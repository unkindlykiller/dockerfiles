{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Shaarli The personal, minimalist, super-fast, database free, bookmarking service. Do you want to share the links you discover? Shaarli is a minimalist bookmark manager and link sharing service that you can install on your own server. It is designed to be personal (single-user), fast and handy. Visit the pages in the sidebar to find information on how to setup, use, configure, tweak and troubleshoot Shaarli. GitHub project page Online documentation Latest releases Changelog Demo You can use this public demo instance of Shaarli . It runs the latest development version of Shaarli and is updated/reset daily. Login: demo ; Password: demo Features Shaarli can be used: to share, comment and save interesting links and news to bookmark useful/frequent links and share them between computers as a minimal blog/microblog/writing platform as a read-it-later list to draft and save articles/posts/ideas to keep notes, documentation and code snippets as a shared clipboard/notepad/pastebin between machines as a todo list to store media playlists to keep extracts/comments from webpages that may disappear. to keep track of ongoing discussions to feed other blogs, aggregators, social networks... using RSS feeds Edit, view and search your links Minimalist design FAST Customizable link titles and descriptions Tags to organize your links (features tag autocompletion, renaming, merging and deletion) Search by tag or using the full-text search Public and private links (visible only to logged-in users) Unique permalinks for easy reference Paginated link list (with image and video thumbnails) Tag cloud and list views Picture wall: image and video thumbnails view (with lazy loading) ATOM and RSS feeds (can also be filtered using tags or text search) Daily: newspaper-like daily digest (and daily RSS feed) URL cleanup: automatic removal of ?utm_source=... , fb=... Extensible through plugins Easy setup Dead-simple installation: drop the files, open the page Links are stored in a file (no database required, easy backup: simply copy the datastore file) Import and export links as Netscape bookmarks compatible with most Web browsers Accessibility Bookmarklet and other tools to share links in one click Support for mobile browsers Degrades gracefully with Javascript disabled Easy page customization through HTML/CSS/RainTPL Security Discreet pop-up notification when a new release is available Bruteforce protection on the login form Protected against XSRF and session cookie hijacking REST API Easily extensible by any client using the REST API exposed by Shaarli ( API documentation ). About Shaarli community fork This friendly fork is maintained by the Shaarli community at https://github.com/shaarli/Shaarli This is a community fork of the original Shaarli project by S\u00e9bastien Sauvage . The original project is currently unmaintained, and the developer has informed us that he would have no time to work on Shaarli in the near future. The Shaarli community has carried on the work to provide many patches for bug fixes and enhancements in this repository, and will keep maintaining the project for the foreseeable future, while keeping Shaarli simple and efficient. Contributing and getting help Feedback is very appreciated! If you have any questions or ideas, please join the chat (also reachable via IRC ), post them in our general discussion or read the current issues . Have a look at the open issues and pull requests If you would like a feature added to Shaarli, check the issues labeled feature , enhancement , and plugin . If you've found a bug, please create a new issue . Feel free to propose solutions to existing problems, help us improve the documentation and translations, and submit pull requests :-) License Shaarli is Free Software . See COPYING for a detail of the contributors and licenses for each individual component. A list of contributors is available here .","title":"Home"},{"location":"#shaarli","text":"The personal, minimalist, super-fast, database free, bookmarking service. Do you want to share the links you discover? Shaarli is a minimalist bookmark manager and link sharing service that you can install on your own server. It is designed to be personal (single-user), fast and handy. Visit the pages in the sidebar to find information on how to setup, use, configure, tweak and troubleshoot Shaarli. GitHub project page Online documentation Latest releases Changelog","title":" Shaarli"},{"location":"#demo","text":"You can use this public demo instance of Shaarli . It runs the latest development version of Shaarli and is updated/reset daily. Login: demo ; Password: demo","title":"Demo"},{"location":"#features","text":"Shaarli can be used: to share, comment and save interesting links and news to bookmark useful/frequent links and share them between computers as a minimal blog/microblog/writing platform as a read-it-later list to draft and save articles/posts/ideas to keep notes, documentation and code snippets as a shared clipboard/notepad/pastebin between machines as a todo list to store media playlists to keep extracts/comments from webpages that may disappear. to keep track of ongoing discussions to feed other blogs, aggregators, social networks... using RSS feeds","title":"Features"},{"location":"#edit-view-and-search-your-links","text":"Minimalist design FAST Customizable link titles and descriptions Tags to organize your links (features tag autocompletion, renaming, merging and deletion) Search by tag or using the full-text search Public and private links (visible only to logged-in users) Unique permalinks for easy reference Paginated link list (with image and video thumbnails) Tag cloud and list views Picture wall: image and video thumbnails view (with lazy loading) ATOM and RSS feeds (can also be filtered using tags or text search) Daily: newspaper-like daily digest (and daily RSS feed) URL cleanup: automatic removal of ?utm_source=... , fb=... Extensible through plugins","title":"Edit, view and search your links"},{"location":"#easy-setup","text":"Dead-simple installation: drop the files, open the page Links are stored in a file (no database required, easy backup: simply copy the datastore file) Import and export links as Netscape bookmarks compatible with most Web browsers","title":"Easy setup"},{"location":"#accessibility","text":"Bookmarklet and other tools to share links in one click Support for mobile browsers Degrades gracefully with Javascript disabled Easy page customization through HTML/CSS/RainTPL","title":"Accessibility"},{"location":"#security","text":"Discreet pop-up notification when a new release is available Bruteforce protection on the login form Protected against XSRF and session cookie hijacking","title":"Security"},{"location":"#rest-api","text":"Easily extensible by any client using the REST API exposed by Shaarli ( API documentation ).","title":"REST API"},{"location":"#about","text":"","title":"About"},{"location":"#shaarli-community-fork","text":"This friendly fork is maintained by the Shaarli community at https://github.com/shaarli/Shaarli This is a community fork of the original Shaarli project by S\u00e9bastien Sauvage . The original project is currently unmaintained, and the developer has informed us that he would have no time to work on Shaarli in the near future. The Shaarli community has carried on the work to provide many patches for bug fixes and enhancements in this repository, and will keep maintaining the project for the foreseeable future, while keeping Shaarli simple and efficient.","title":"Shaarli community fork"},{"location":"#contributing-and-getting-help","text":"Feedback is very appreciated! If you have any questions or ideas, please join the chat (also reachable via IRC ), post them in our general discussion or read the current issues . Have a look at the open issues and pull requests If you would like a feature added to Shaarli, check the issues labeled feature , enhancement , and plugin . If you've found a bug, please create a new issue . Feel free to propose solutions to existing problems, help us improve the documentation and translations, and submit pull requests :-)","title":"Contributing and getting help"},{"location":"#license","text":"Shaarli is Free Software . See COPYING for a detail of the contributors and licenses for each individual component. A list of contributors is available here .","title":"License"},{"location":"3rd-party-libraries/","text":"CSS Yahoo UI CSS Reset - standardize cross-browser rendering Javascript Awesomeplete ( GitHub ) - autocompletion in input forms bLazy ( GitHub ) - lazy loading for thumbnails qr.js ( GitHub ) - QR code generation PHP RainTPL - HTML templating for PHP Composer Library Usage shaarli/netscape-bookmark-parser Import bookmarks from Netscape files erusev/parsedown Parse MarkDown syntax for the MarkDown plugin slim/slim Handle routes and middleware for the REST API","title":"3rd party libraries"},{"location":"3rd-party-libraries/#css","text":"Yahoo UI CSS Reset - standardize cross-browser rendering","title":"CSS"},{"location":"3rd-party-libraries/#javascript","text":"Awesomeplete ( GitHub ) - autocompletion in input forms bLazy ( GitHub ) - lazy loading for thumbnails qr.js ( GitHub ) - QR code generation","title":"Javascript"},{"location":"3rd-party-libraries/#php","text":"RainTPL - HTML templating for PHP","title":"PHP"},{"location":"3rd-party-libraries/#composer","text":"Library Usage shaarli/netscape-bookmark-parser Import bookmarks from Netscape files erusev/parsedown Parse MarkDown syntax for the MarkDown plugin slim/slim Handle routes and middleware for the REST API","title":"Composer"},{"location":"Browsing-and-searching/","text":"Plain text search Use the Search text field to search in any of the fields of all links (Title, URL, Description...) Exclude text/tags: Use the - operator before a word or tag (example -uninteresting ) to prevent entries containing (or tagged) uninteresting from showing up in the search results. Exact text search: Use double-quotes (example \"exact search\" ) to search for the exact expression. Both exclude patterns and exact searches can be combined with normal searches (example \"exact search\" term otherterm -notthis \"very exact\" stuff -notagain ) Tags search Use the Filter by tags field to restrict displayed links to entries tagged with one or multiple tags (use space to separate tags). Hidden tags: Tags starting with a dot . (example .secret ) are private. They can only be seen and searched when logged in. Tag cloud The Tag cloud page diplays a \"cloud\" view of all tags in your Shaarli. The most frequently used tags are displayed with a bigger font size. When sorting by Most used or Alphabetical , tags are displayed as a list , along with counters and edit/delete buttons for each tag. Clicking on any tag will display a list of all Shaares matching this tag. Clicking on the counter next to a tag example , will filter the tag cloud to only display tags found in Shaares tagged example . Repeat this any number of times to further filter the tag cloud. Click List all links with those tags to display Shaares matching your current tag filter. Filtering RSS feeds/Picture wall RSS feeds can also be restricted to only return items matching a text/tag search: see RSS feeds . Filter buttons Filter buttons can be found at the top left of the link list. They allow you to apply different filters to the list: Private links: When this toggle button is enabled, only shaares set to private will be shown. Untagged links: When the this toggle button is enabled (top left of the link list), only shaares without any tags will be shown in the link list. Filter buttons are only available when logged in.","title":"Browsing and searching"},{"location":"Browsing-and-searching/#plain-text-search","text":"Use the Search text field to search in any of the fields of all links (Title, URL, Description...) Exclude text/tags: Use the - operator before a word or tag (example -uninteresting ) to prevent entries containing (or tagged) uninteresting from showing up in the search results. Exact text search: Use double-quotes (example \"exact search\" ) to search for the exact expression. Both exclude patterns and exact searches can be combined with normal searches (example \"exact search\" term otherterm -notthis \"very exact\" stuff -notagain )","title":"Plain text search"},{"location":"Browsing-and-searching/#tags-search","text":"Use the Filter by tags field to restrict displayed links to entries tagged with one or multiple tags (use space to separate tags). Hidden tags: Tags starting with a dot . (example .secret ) are private. They can only be seen and searched when logged in.","title":"Tags search"},{"location":"Browsing-and-searching/#tag-cloud","text":"The Tag cloud page diplays a \"cloud\" view of all tags in your Shaarli. The most frequently used tags are displayed with a bigger font size. When sorting by Most used or Alphabetical , tags are displayed as a list , along with counters and edit/delete buttons for each tag. Clicking on any tag will display a list of all Shaares matching this tag. Clicking on the counter next to a tag example , will filter the tag cloud to only display tags found in Shaares tagged example . Repeat this any number of times to further filter the tag cloud. Click List all links with those tags to display Shaares matching your current tag filter.","title":"Tag cloud"},{"location":"Browsing-and-searching/#filtering-rss-feedspicture-wall","text":"RSS feeds can also be restricted to only return items matching a text/tag search: see RSS feeds .","title":"Filtering RSS feeds/Picture wall"},{"location":"Browsing-and-searching/#filter-buttons","text":"Filter buttons can be found at the top left of the link list. They allow you to apply different filters to the list: Private links: When this toggle button is enabled, only shaares set to private will be shown. Untagged links: When the this toggle button is enabled (top left of the link list), only shaares without any tags will be shown in the link list. Filter buttons are only available when logged in.","title":"Filter buttons"},{"location":"Community-&-Related-software/","text":"Unofficial but related work on Shaarli. If you maintain one of these, please get in touch with us to help us find a way to adapt your work to our fork. Related software REST API clients See REST API for a list of official and community clients. Third party plugins autosave by @kalvn : Automatically saves data when editing a link to avoid any loss in case of crash or unexpected shutdown. Code Coloration by @ArthurHoaro : client side code syntax highlighter. Disqus by @kalvn : Adds Disqus comment system to your Shaarli. emojione by @NerosTie : Add colorful emojis to your Shaarli. twemoji by @NerosTie : Add colorful emojis to your Shaarli (Twemoji version) google analytics by @ericjuden : Adds Google Analytics tracking support launch - Launch Plugin is a plugin designed to enhance and customize Launch Theme for Shaarli. markdown-toolbar by @immanuelfodor - Easily insert markdown syntax into the Description field when editing a link. related by @ilesinge - Show related links based on the number of identical tags. social by @alexisju : share links to social networks. shaarli2twitter by @ArthurHoaro - Automatically tweet your shared links from Shaarli shaarli2mastodon by @kalvn - This Shaarli plugin allows you to automatically publish links you post on your Mastodon timeline. shaarli-descriptor by @immanuelfodor - Customize the default height/number of rows of the Description field when editing a link. Third-party themes See Theming for a list of community-contributed themes, and an installation guide. Integration with other platforms tt-rss-shaarli - Tiny-Tiny RSS plugin that adds support for sharing articles with Shaarli octopress-shaarli - Octopress plugin to retrieve Shaarli links on the sidebar Scuttle to Shaarli - Import bookmarks from Scuttle Shaarli app for Cloudron - Effortlessly run Shaarli with the help of Cloudron Shaarli_ynh - Shaarli is available as a Yunohost app Mobile Apps ShaarliOS - Apple iOS share extension. Shaarli for Android - Android application that adds Shaarli as a sharing provider Shaarlier for Android - Android application to simply add links directly into your Shaarli Stakali for Android - Stakali is a personal bookmark manager which synchronizes with Shaarli Browser addons Shaarli Firefox Extension - toolbar button to share your current tab with Shaarli. Shaarli Chrome Extension - toolbar button to share your current tab with Shaarli. Server apps shaarchiver - Archive your Shaarli bookmarks and their content shaarli-river - An aggregator for shaarlis with many features Shaarlo - An aggregator for shaarlis with many features (a very popular running instance among French shaarliers: shaarli.fr ) Shaarlimages - An image-oriented aggregator for Shaarlis mknexen/shaarli-api - A REST API for Shaarli Self dead link - Detect dead links on shaarli. This version use the database of shaarli. Another version , can be used for other shaarli instances (but is more resource consuming). Bookmark Archiver - Save an archived copy of all websites starred using browser bookmarks/Shaarli/Delicious/Instapaper/Unmark.it/Pocket/Pinboard. Outputs browseable html. Alternatives to Shaarli See awesome-selfhosted: bookmarks & link sharing . Community Liens en vrac de sebsauvage - the original Shaarli A large list of Shaarlis A list of working Shaarli aggregators A list of some known Shaarlis Adieu Delicious, Diigo et StumbleUpon. Salut Shaarli ! - sebsauvage.net (fr) 16/09/2011 - the original post about Shaarli Original ideas/fixme/TODO page Original discussion page (fr) Original revisions history Shaarli.fr/my - Unofficial, unsupported (old fork) hosted Shaarlis provider, courtesy of DMeloni Articles and social media discussions 2016-09-22 - Hacker News - https://news.ycombinator.com/item?id=12552176 2015-08-15 - Reddit - Question about migrating from WordPress to Shaarli. 2015-06-22 - Hacker News - https://news.ycombinator.com/item?id=9755366 2015-05-12 - Reddit - shaarli - Self hosted Bookmarking / Delicious (PHP, MySQL)","title":"Community & Related software"},{"location":"Community-&-Related-software/#related-software","text":"","title":"Related software"},{"location":"Community-&-Related-software/#rest-api-clients","text":"See REST API for a list of official and community clients.","title":"REST API clients"},{"location":"Community-&-Related-software/#third-party-plugins","text":"autosave by @kalvn : Automatically saves data when editing a link to avoid any loss in case of crash or unexpected shutdown. Code Coloration by @ArthurHoaro : client side code syntax highlighter. Disqus by @kalvn : Adds Disqus comment system to your Shaarli. emojione by @NerosTie : Add colorful emojis to your Shaarli. twemoji by @NerosTie : Add colorful emojis to your Shaarli (Twemoji version) google analytics by @ericjuden : Adds Google Analytics tracking support launch - Launch Plugin is a plugin designed to enhance and customize Launch Theme for Shaarli. markdown-toolbar by @immanuelfodor - Easily insert markdown syntax into the Description field when editing a link. related by @ilesinge - Show related links based on the number of identical tags. social by @alexisju : share links to social networks. shaarli2twitter by @ArthurHoaro - Automatically tweet your shared links from Shaarli shaarli2mastodon by @kalvn - This Shaarli plugin allows you to automatically publish links you post on your Mastodon timeline. shaarli-descriptor by @immanuelfodor - Customize the default height/number of rows of the Description field when editing a link.","title":"Third party plugins"},{"location":"Community-&-Related-software/#third-party-themes","text":"See Theming for a list of community-contributed themes, and an installation guide.","title":"Third-party themes"},{"location":"Community-&-Related-software/#integration-with-other-platforms","text":"tt-rss-shaarli - Tiny-Tiny RSS plugin that adds support for sharing articles with Shaarli octopress-shaarli - Octopress plugin to retrieve Shaarli links on the sidebar Scuttle to Shaarli - Import bookmarks from Scuttle Shaarli app for Cloudron - Effortlessly run Shaarli with the help of Cloudron Shaarli_ynh - Shaarli is available as a Yunohost app","title":"Integration with other platforms"},{"location":"Community-&-Related-software/#mobile-apps","text":"ShaarliOS - Apple iOS share extension. Shaarli for Android - Android application that adds Shaarli as a sharing provider Shaarlier for Android - Android application to simply add links directly into your Shaarli Stakali for Android - Stakali is a personal bookmark manager which synchronizes with Shaarli","title":"Mobile Apps"},{"location":"Community-&-Related-software/#browser-addons","text":"Shaarli Firefox Extension - toolbar button to share your current tab with Shaarli. Shaarli Chrome Extension - toolbar button to share your current tab with Shaarli.","title":"Browser addons"},{"location":"Community-&-Related-software/#server-apps","text":"shaarchiver - Archive your Shaarli bookmarks and their content shaarli-river - An aggregator for shaarlis with many features Shaarlo - An aggregator for shaarlis with many features (a very popular running instance among French shaarliers: shaarli.fr ) Shaarlimages - An image-oriented aggregator for Shaarlis mknexen/shaarli-api - A REST API for Shaarli Self dead link - Detect dead links on shaarli. This version use the database of shaarli. Another version , can be used for other shaarli instances (but is more resource consuming). Bookmark Archiver - Save an archived copy of all websites starred using browser bookmarks/Shaarli/Delicious/Instapaper/Unmark.it/Pocket/Pinboard. Outputs browseable html.","title":"Server apps"},{"location":"Community-&-Related-software/#alternatives-to-shaarli","text":"See awesome-selfhosted: bookmarks & link sharing .","title":"Alternatives to Shaarli"},{"location":"Community-&-Related-software/#community","text":"Liens en vrac de sebsauvage - the original Shaarli A large list of Shaarlis A list of working Shaarli aggregators A list of some known Shaarlis Adieu Delicious, Diigo et StumbleUpon. Salut Shaarli ! - sebsauvage.net (fr) 16/09/2011 - the original post about Shaarli Original ideas/fixme/TODO page Original discussion page (fr) Original revisions history Shaarli.fr/my - Unofficial, unsupported (old fork) hosted Shaarlis provider, courtesy of DMeloni","title":"Community"},{"location":"Community-&-Related-software/#articles-and-social-media-discussions","text":"2016-09-22 - Hacker News - https://news.ycombinator.com/item?id=12552176 2015-08-15 - Reddit - Question about migrating from WordPress to Shaarli. 2015-06-22 - Hacker News - https://news.ycombinator.com/item?id=9755366 2015-05-12 - Reddit - shaarli - Self hosted Bookmarking / Delicious (PHP, MySQL)","title":"Articles and social media discussions"},{"location":"Continuous-integration-tools/","text":"Local development A Makefile is available to perform project-related operations: Documentation - generate a local HTML copy of the GitHub wiki Static analysis - check that the code is compliant to PHP conventions Unit tests - ensure there are no regressions introduced by new commits Automatic builds Travis CI is a Continuous Integration build server, that runs a build: each time a commit is merged to the mainline ( master branch) each time a Pull Request is submitted or updated A build is composed of several jobs: one for each supported PHP version (see Server requirements ). Each build job: updates Composer installs 3rd-party test dependencies with Composer runs Unit tests runs ESLint check After all jobs have finished, Travis returns the results to GitHub: a status icon represents the result for the master branch: Pull Requests are updated with the Travis result Green: all tests have passed Red: some tests failed Orange: tests are pending","title":"Continuous integration tools"},{"location":"Continuous-integration-tools/#local-development","text":"A Makefile is available to perform project-related operations: Documentation - generate a local HTML copy of the GitHub wiki Static analysis - check that the code is compliant to PHP conventions Unit tests - ensure there are no regressions introduced by new commits","title":"Local development"},{"location":"Continuous-integration-tools/#automatic-builds","text":"Travis CI is a Continuous Integration build server, that runs a build: each time a commit is merged to the mainline ( master branch) each time a Pull Request is submitted or updated A build is composed of several jobs: one for each supported PHP version (see Server requirements ). Each build job: updates Composer installs 3rd-party test dependencies with Composer runs Unit tests runs ESLint check After all jobs have finished, Travis returns the results to GitHub: a status icon represents the result for the master branch: Pull Requests are updated with the Travis result Green: all tests have passed Red: some tests failed Orange: tests are pending","title":"Automatic builds"},{"location":"Development-guidelines/","text":"Development guidelines Please have a look at the following pages: Contributing to Shaarli Static analysis - patches should try to stick to the PHP Standard Recommendations (PSR), especially: PSR-1 - Basic Coding Standard PSR-2 - Coding Style Guide Unit tests Javascript linting - Shaarli uses Airbnb JavaScript Style Guide . Run make eslint to check JS style. GnuPG signature for tags/releases","title":"Development guidelines"},{"location":"Development-guidelines/#development-guidelines","text":"Please have a look at the following pages: Contributing to Shaarli Static analysis - patches should try to stick to the PHP Standard Recommendations (PSR), especially: PSR-1 - Basic Coding Standard PSR-2 - Coding Style Guide Unit tests Javascript linting - Shaarli uses Airbnb JavaScript Style Guide . Run make eslint to check JS style. GnuPG signature for tags/releases","title":"Development guidelines"},{"location":"Directory-structure/","text":"Directory structure Here is the directory structure of Shaarli and the purpose of the different files: index.php # Main program application/ # Shaarli classes \u251c\u2500\u2500 LinkDB.php ... \u2514\u2500\u2500 Utils.php tests/ # Shaarli unitary & functional tests \u251c\u2500\u2500 LinkDBTest.php ... \u251c\u2500\u2500 utils # utilities to ease testing \u2502 \u2514\u2500\u2500 ReferenceLinkDB.php \u2514\u2500\u2500 UtilsTest.php assets/ \u251c\u2500\u2500 common/ # Assets shared by multiple themes \u251c\u2500\u2500 ... \u251c\u2500\u2500 default/ # Assets for the default template, before compilation \u251c\u2500\u2500 fonts/ # Font files \u251c\u2500\u2500 img/ # Images used by the default theme \u251c\u2500\u2500 js/ # JavaScript files in ES6 syntax \u251c\u2500\u2500 scss/ # SASS files \u2514\u2500\u2500 vintage/ # Assets for the vintage template, before compilation \u2514\u2500\u2500 ... COPYING # Shaarli license inc/ # static assets and 3rd party libraries \u2514\u2500\u2500 rain.tpl.class.php # RainTPL templating library images/ # Images and icons used in Shaarli data/ # data storage: bookmark database, configuration, logs, banlist... \u251c\u2500\u2500 config.json.php # Shaarli configuration (login, password, timezone, title...) \u251c\u2500\u2500 datastore.php # Your link database (compressed). \u251c\u2500\u2500 ipban.php # IP address ban system data \u251c\u2500\u2500 lastupdatecheck.txt # Update check timestamp file \u2514\u2500\u2500 log.txt # login/IPban log. tpl/ # RainTPL templates for Shaarli. They are used to build the pages. \u251c\u2500\u2500 default/ # Default Shaarli theme \u251c\u2500\u2500 fonts/ # Font files \u251c\u2500\u2500 img/ # Images \u251c\u2500\u2500 js/ # JavaScript files compiled by Babel and compatible with all browsers \u251c\u2500\u2500 css/ # CSS files compiled with SASS \u2514\u2500\u2500 vintage/ # Legacy Shaarli theme \u2514\u2500\u2500 ... cache/ # thumbnails cache # This directory is automatically created. You can erase it anytime you want. tmp/ # Temporary directory for compiled RainTPL templates. # This directory is automatically created. You can erase it anytime you want. vendor/ # Third-party dependencies. This directory is created by Composer","title":"Directory structure"},{"location":"Directory-structure/#directory-structure","text":"Here is the directory structure of Shaarli and the purpose of the different files: index.php # Main program application/ # Shaarli classes \u251c\u2500\u2500 LinkDB.php ... \u2514\u2500\u2500 Utils.php tests/ # Shaarli unitary & functional tests \u251c\u2500\u2500 LinkDBTest.php ... \u251c\u2500\u2500 utils # utilities to ease testing \u2502 \u2514\u2500\u2500 ReferenceLinkDB.php \u2514\u2500\u2500 UtilsTest.php assets/ \u251c\u2500\u2500 common/ # Assets shared by multiple themes \u251c\u2500\u2500 ... \u251c\u2500\u2500 default/ # Assets for the default template, before compilation \u251c\u2500\u2500 fonts/ # Font files \u251c\u2500\u2500 img/ # Images used by the default theme \u251c\u2500\u2500 js/ # JavaScript files in ES6 syntax \u251c\u2500\u2500 scss/ # SASS files \u2514\u2500\u2500 vintage/ # Assets for the vintage template, before compilation \u2514\u2500\u2500 ... COPYING # Shaarli license inc/ # static assets and 3rd party libraries \u2514\u2500\u2500 rain.tpl.class.php # RainTPL templating library images/ # Images and icons used in Shaarli data/ # data storage: bookmark database, configuration, logs, banlist... \u251c\u2500\u2500 config.json.php # Shaarli configuration (login, password, timezone, title...) \u251c\u2500\u2500 datastore.php # Your link database (compressed). \u251c\u2500\u2500 ipban.php # IP address ban system data \u251c\u2500\u2500 lastupdatecheck.txt # Update check timestamp file \u2514\u2500\u2500 log.txt # login/IPban log. tpl/ # RainTPL templates for Shaarli. They are used to build the pages. \u251c\u2500\u2500 default/ # Default Shaarli theme \u251c\u2500\u2500 fonts/ # Font files \u251c\u2500\u2500 img/ # Images \u251c\u2500\u2500 js/ # JavaScript files compiled by Babel and compatible with all browsers \u251c\u2500\u2500 css/ # CSS files compiled with SASS \u2514\u2500\u2500 vintage/ # Legacy Shaarli theme \u2514\u2500\u2500 ... cache/ # thumbnails cache # This directory is automatically created. You can erase it anytime you want. tmp/ # Temporary directory for compiled RainTPL templates. # This directory is automatically created. You can erase it anytime you want. vendor/ # Third-party dependencies. This directory is created by Composer","title":"Directory structure"},{"location":"Download-and-Installation/","text":"To install Shaarli, simply place the files in a directory under your webserver's Document Root (or directly at the document root). Also, please make sure your server is properly configured . Multiple releases branches are available: latest (last release) stable (previous major release) master (development) Using one of the following methods: by downloading full release archives including all dependencies by downloading Github archives by cloning the Git repository using Docker: see the documentation Latest release (recommended) Download as an archive In most cases, you should download the latest Shaarli release from the releases page. Download our shaarli-full archive to include dependencies. The current latest released version is v0.9.7 $ wget https://github.com/shaarli/Shaarli/releases/download/v0.9.7/shaarli-v0.9.7-full.zip $ unzip shaarli-v0.9.7-full.zip $ mv Shaarli /path/to/shaarli/ Using git Cloning using git or downloading Github branches as zip files requires additional steps: Install Composer to manage third-party PHP dependencies . Install yarn to build the frontend dependencies. Install python3-virtualenv to build the local HTML documentation. $ mkdir -p /path/to/shaarli && cd /path/to/shaarli/ $ git clone -b latest https://github.com/shaarli/Shaarli.git . $ composer install --no-dev --prefer-dist $ make build_frontend $ make translate $ make htmldoc Stable version The stable version has been experienced by Shaarli users, and will receive security updates. Download as an archive As a .zip archive: $ wget https://github.com/shaarli/Shaarli/archive/stable.zip $ unzip stable.zip $ mv Shaarli-stable /path/to/shaarli/ As a .tar.gz archive : $ wget https://github.com/shaarli/Shaarli/archive/stable.tar.gz $ tar xvf stable.tar.gz $ mv Shaarli-stable /path/to/shaarli/ Using git Install Composer to manage Shaarli dependencies. $ git clone https://github.com/shaarli/Shaarli.git -b stable /path/to/shaarli/ # install/update third-party dependencies $ cd /path/to/shaarli/ $ composer install --no-dev --prefer-dist Development version (mainline) Use at your own risk! Install Composer to manage Shaarli PHP dependencies, and yarn for front-end dependencies. To get the latest changes from the master branch: # clone the repository $ git clone https://github.com/shaarli/Shaarli.git -b master /path/to/shaarli/ # install/update third-party dependencies $ cd /path/to/shaarli $ composer install --no-dev --prefer-dist $ make build_frontend $ make translate $ make htmldoc Finish Installation Once Shaarli is downloaded and files have been placed at the correct location, open it this location your favorite browser. Setup your Shaarli installation, and it's ready to use! Updating Shaarli See Upgrade and Migration","title":"Download and Installation"},{"location":"Download-and-Installation/#latest-release-recommended","text":"","title":"Latest release (recommended)"},{"location":"Download-and-Installation/#download-as-an-archive","text":"In most cases, you should download the latest Shaarli release from the releases page. Download our shaarli-full archive to include dependencies. The current latest released version is v0.9.7 $ wget https://github.com/shaarli/Shaarli/releases/download/v0.9.7/shaarli-v0.9.7-full.zip $ unzip shaarli-v0.9.7-full.zip $ mv Shaarli /path/to/shaarli/","title":"Download as an archive"},{"location":"Download-and-Installation/#using-git","text":"Cloning using git or downloading Github branches as zip files requires additional steps: Install Composer to manage third-party PHP dependencies . Install yarn to build the frontend dependencies. Install python3-virtualenv to build the local HTML documentation. $ mkdir -p /path/to/shaarli && cd /path/to/shaarli/ $ git clone -b latest https://github.com/shaarli/Shaarli.git . $ composer install --no-dev --prefer-dist $ make build_frontend $ make translate $ make htmldoc","title":"Using git"},{"location":"Download-and-Installation/#stable-version","text":"The stable version has been experienced by Shaarli users, and will receive security updates.","title":"Stable version"},{"location":"Download-and-Installation/#download-as-an-archive_1","text":"As a .zip archive: $ wget https://github.com/shaarli/Shaarli/archive/stable.zip $ unzip stable.zip $ mv Shaarli-stable /path/to/shaarli/ As a .tar.gz archive : $ wget https://github.com/shaarli/Shaarli/archive/stable.tar.gz $ tar xvf stable.tar.gz $ mv Shaarli-stable /path/to/shaarli/","title":"Download as an archive"},{"location":"Download-and-Installation/#using-git_1","text":"Install Composer to manage Shaarli dependencies. $ git clone https://github.com/shaarli/Shaarli.git -b stable /path/to/shaarli/ # install/update third-party dependencies $ cd /path/to/shaarli/ $ composer install --no-dev --prefer-dist","title":"Using git"},{"location":"Download-and-Installation/#development-version-mainline","text":"Use at your own risk! Install Composer to manage Shaarli PHP dependencies, and yarn for front-end dependencies. To get the latest changes from the master branch: # clone the repository $ git clone https://github.com/shaarli/Shaarli.git -b master /path/to/shaarli/ # install/update third-party dependencies $ cd /path/to/shaarli $ composer install --no-dev --prefer-dist $ make build_frontend $ make translate $ make htmldoc","title":"Development version (mainline)"},{"location":"Download-and-Installation/#finish-installation","text":"Once Shaarli is downloaded and files have been placed at the correct location, open it this location your favorite browser. Setup your Shaarli installation, and it's ready to use!","title":"Finish Installation"},{"location":"Download-and-Installation/#updating-shaarli","text":"See Upgrade and Migration","title":"Updating Shaarli"},{"location":"FAQ/","text":"Why did you create Shaarli ? I was a StumbleUpon user. Then I got fed up with they big toolbar. I switched to delicious, which was lighter, faster and more beautiful. Until Yahoo bought it. Then the export API broke all the time, delicious became slow and was ditched by Yahoo. I switched to Diigo, which is not bad, but does too much. And Diigo is sslllooooowww and their Firefox extension a bit buggy. And\u2026 oh\u2026 their Firefox addon sends to Diigo every single URL you visit (Don't believe me ? Use Tamper Data and open any page). Enough is enough. Saving simple links should not be a complicated heavy thing. I ditched them all and wrote my own: Shaarli. It's simple, but it does the job and does it well. And my data is not hosted on a foreign server, but on my server. Why use Shaarli and not Delicious/Diigo ? With Shaarli: The data is yours: It's hosted on your server. Never fear of having your data locked-in. Never fear to have your data sold to third party. Your private links are not hosted on a third party server. You are not tracked by browser addons (like Diigo does) You can change the look and feel of the pages if you want. You can change the behaviour of the program. It's magnitude faster than most bookmarking services. What does Shaarli mean? Shaarli stands for shaaring your links . My Shaarli is broken! First of all, ensure that both the web server and Shaarli are correctly configured, and that your installation is supported . If everything looks right but the issue(s) remain(s), please: take a look at the troubleshooting section come chat with us on Gitter, we'll be happy to help ;-) browse active issues and Pull Requests if you find one that is related to the issue, feel free to comment and provide additional details (host/Shaarli setup) else, open a new issue , and provide information about the problem: what happens? - display glitches, invalid data, security flaws... what is your configuration? - OS, server version, activated extensions, web browser... is it reproducible? Why not use a real database? Files are slow! Does browsing this page feel slow? Try browsing older pages, too. It's not slow at all, is it? And don't forget the database contains more than 16000 links, and it's on a shared host, with 32000 visitors/day for my website alone. And it's still damn fast. Why? The data file is only 3.7 Mb. It's read 99% of the time, and is probably already in the operation system disk cache. So generating a page involves no I/O at all most of the time.","title":"FAQ"},{"location":"FAQ/#why-did-you-create-shaarli","text":"I was a StumbleUpon user. Then I got fed up with they big toolbar. I switched to delicious, which was lighter, faster and more beautiful. Until Yahoo bought it. Then the export API broke all the time, delicious became slow and was ditched by Yahoo. I switched to Diigo, which is not bad, but does too much. And Diigo is sslllooooowww and their Firefox extension a bit buggy. And\u2026 oh\u2026 their Firefox addon sends to Diigo every single URL you visit (Don't believe me ? Use Tamper Data and open any page). Enough is enough. Saving simple links should not be a complicated heavy thing. I ditched them all and wrote my own: Shaarli. It's simple, but it does the job and does it well. And my data is not hosted on a foreign server, but on my server.","title":"Why did you create Shaarli ?"},{"location":"FAQ/#why-use-shaarli-and-not-deliciousdiigo","text":"With Shaarli: The data is yours: It's hosted on your server. Never fear of having your data locked-in. Never fear to have your data sold to third party. Your private links are not hosted on a third party server. You are not tracked by browser addons (like Diigo does) You can change the look and feel of the pages if you want. You can change the behaviour of the program. It's magnitude faster than most bookmarking services.","title":"Why use Shaarli and not Delicious/Diigo ?"},{"location":"FAQ/#what-does-shaarli-mean","text":"Shaarli stands for shaaring your links .","title":"What does Shaarli mean?"},{"location":"FAQ/#my-shaarli-is-broken","text":"First of all, ensure that both the web server and Shaarli are correctly configured, and that your installation is supported . If everything looks right but the issue(s) remain(s), please: take a look at the troubleshooting section come chat with us on Gitter, we'll be happy to help ;-) browse active issues and Pull Requests if you find one that is related to the issue, feel free to comment and provide additional details (host/Shaarli setup) else, open a new issue , and provide information about the problem: what happens? - display glitches, invalid data, security flaws... what is your configuration? - OS, server version, activated extensions, web browser... is it reproducible?","title":"My Shaarli is broken!"},{"location":"FAQ/#why-not-use-a-real-database-files-are-slow","text":"Does browsing this page feel slow? Try browsing older pages, too. It's not slow at all, is it? And don't forget the database contains more than 16000 links, and it's on a shared host, with 32000 visitors/day for my website alone. And it's still damn fast. Why? The data file is only 3.7 Mb. It's read 99% of the time, and is probably already in the operation system disk cache. So generating a page involves no I/O at all most of the time.","title":"Why not use a real database? Files are slow!"},{"location":"GnuPG-signature/","text":"Introduction PGP and GPG Gnu Privacy Guard (GnuPG) is an Open Source implementation of the Pretty Good Privacy (OpenPGP) specification. Its main purposes are digital authentication, signature and encryption. It is often used by the FLOSS community to verify: Linux package signatures: Debian SecureApt , ArchLinux Master Keys SCM releases & maintainer identity Trust To quote Phil Pennock (the author of the SKS key server - http://sks.spodhuis.org/): You MUST understand that presence of data in the keyserver (pools) in no way connotes trust. Anyone can generate a key, with any name or email address, and upload it. All security and trust comes from evaluating security at the \u201cobject level\u201d, via PGP Web-Of-Trust signatures. This keyserver makes it possible to retrieve keys, looking them up via various indices, but the collection of keys in this public pool is KNOWN to contain malicious and fraudulent keys. It is the common expectation of server operators that users understand this and use software which, like all known common OpenPGP implementations, evaluates trust accordingly. This expectation is so common that it is not normally explicitly stated. Trust can be gained by having your key signed by other people (and signing their key back, too :) ), for instance during key signing parties , see: The Keysigning party HOWTO Web of trust Generate a GPG key Generating a GPG key for Git tagging (StackOverflow) Generating a GPG key (GitHub) gpg - provide identity information $ gpg --gen-key gpg (GnuPG) 2.1.6; Copyright (C) 2015 Free Software Foundation, Inc. This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Note: Use \"gpg2 --full-gen-key\" for a full featured key generation dialog. GnuPG needs to construct a user ID to identify your key. Real name: Marvin the Paranoid Android Email address: marvin@h2g2.net You selected this USER-ID: \"Marvin the Paranoid Android <marvin@h2g2.net>\" Change (N)ame, (E)mail, or (O)kay/(Q)uit? o We need to generate a lot of random bytes. It is a good idea to perform some other action (type on the keyboard, move the mouse, utilize the disks) during the prime generation; this gives the random number generator a better chance to gain enough entropy. gpg - entropy interlude At this point, you will: - be prompted for a secure password to protect your key (the input method will depend on your Desktop Environment and configuration) - be asked to use your machine's input devices (mouse, keyboard, etc.) to generate random entropy; this step may take some time gpg - key creation confirmation gpg: key A9D53A3E marked as ultimately trusted public and secret key created and signed. gpg: checking the trustdb gpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust model gpg: depth: 0 valid: 2 signed: 0 trust: 0-, 0q, 0n, 0m, 0f, 2u pub rsa2048/A9D53A3E 2015-07-31 Key fingerprint = AF2A 5381 E54B 2FD2 14C4 A9A3 0E35 ACA4 A9D5 3A3E uid [ultimate] Marvin the Paranoid Android <marvin@h2g2.net> sub rsa2048/8C0EACF1 2015-07-31 gpg - submit your public key to a PGP server (Optional) $ gpg --keyserver pgp.mit.edu --send-keys A9D53A3E gpg: sending key A9D53A3E to hkp server pgp.mit.edu Create and push a GPG-signed tag See Release Shaarli .","title":"GnuPG signature"},{"location":"GnuPG-signature/#introduction","text":"","title":"Introduction"},{"location":"GnuPG-signature/#pgp-and-gpg","text":"Gnu Privacy Guard (GnuPG) is an Open Source implementation of the Pretty Good Privacy (OpenPGP) specification. Its main purposes are digital authentication, signature and encryption. It is often used by the FLOSS community to verify: Linux package signatures: Debian SecureApt , ArchLinux Master Keys SCM releases & maintainer identity","title":"PGP and GPG"},{"location":"GnuPG-signature/#trust","text":"To quote Phil Pennock (the author of the SKS key server - http://sks.spodhuis.org/): You MUST understand that presence of data in the keyserver (pools) in no way connotes trust. Anyone can generate a key, with any name or email address, and upload it. All security and trust comes from evaluating security at the \u201cobject level\u201d, via PGP Web-Of-Trust signatures. This keyserver makes it possible to retrieve keys, looking them up via various indices, but the collection of keys in this public pool is KNOWN to contain malicious and fraudulent keys. It is the common expectation of server operators that users understand this and use software which, like all known common OpenPGP implementations, evaluates trust accordingly. This expectation is so common that it is not normally explicitly stated. Trust can be gained by having your key signed by other people (and signing their key back, too :) ), for instance during key signing parties , see: The Keysigning party HOWTO Web of trust","title":"Trust"},{"location":"GnuPG-signature/#generate-a-gpg-key","text":"Generating a GPG key for Git tagging (StackOverflow) Generating a GPG key (GitHub)","title":"Generate a GPG key"},{"location":"GnuPG-signature/#gpg-provide-identity-information","text":"$ gpg --gen-key gpg (GnuPG) 2.1.6; Copyright (C) 2015 Free Software Foundation, Inc. This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Note: Use \"gpg2 --full-gen-key\" for a full featured key generation dialog. GnuPG needs to construct a user ID to identify your key. Real name: Marvin the Paranoid Android Email address: marvin@h2g2.net You selected this USER-ID: \"Marvin the Paranoid Android <marvin@h2g2.net>\" Change (N)ame, (E)mail, or (O)kay/(Q)uit? o We need to generate a lot of random bytes. It is a good idea to perform some other action (type on the keyboard, move the mouse, utilize the disks) during the prime generation; this gives the random number generator a better chance to gain enough entropy.","title":"gpg - provide identity information"},{"location":"GnuPG-signature/#gpg-entropy-interlude","text":"At this point, you will: - be prompted for a secure password to protect your key (the input method will depend on your Desktop Environment and configuration) - be asked to use your machine's input devices (mouse, keyboard, etc.) to generate random entropy; this step may take some time","title":"gpg - entropy interlude"},{"location":"GnuPG-signature/#gpg-key-creation-confirmation","text":"gpg: key A9D53A3E marked as ultimately trusted public and secret key created and signed. gpg: checking the trustdb gpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust model gpg: depth: 0 valid: 2 signed: 0 trust: 0-, 0q, 0n, 0m, 0f, 2u pub rsa2048/A9D53A3E 2015-07-31 Key fingerprint = AF2A 5381 E54B 2FD2 14C4 A9A3 0E35 ACA4 A9D5 3A3E uid [ultimate] Marvin the Paranoid Android <marvin@h2g2.net> sub rsa2048/8C0EACF1 2015-07-31","title":"gpg - key creation confirmation"},{"location":"GnuPG-signature/#gpg-submit-your-public-key-to-a-pgp-server-optional","text":"$ gpg --keyserver pgp.mit.edu --send-keys A9D53A3E gpg: sending key A9D53A3E to hkp server pgp.mit.edu","title":"gpg - submit your public key to a PGP server (Optional)"},{"location":"GnuPG-signature/#create-and-push-a-gpg-signed-tag","text":"See Release Shaarli .","title":"Create and push a GPG-signed tag"},{"location":"Link-structure/","text":"Link structure Every link available through the LinkDB object is represented as an array containing the following fields: id (integer): Unique identifier. title (string): Title of the link. url (string): URL of the link. Used for displayable links (without redirector, url encoding, etc.). Can be absolute or relative for Notes. real_url (string): Real destination URL, can be redirected, encoded, etc. shorturl (string): Permalink small hash. description (string): Link text description. private (boolean): whether the link is private or not. tags (string): all link tags separated by a single space thumbnail (string|boolean): relative path of the thumbnail cache file, or false if there isn't any. created (DateTime): link creation date time. updated (DateTime): last modification date time.","title":"Link Structure"},{"location":"Link-structure/#link-structure","text":"Every link available through the LinkDB object is represented as an array containing the following fields: id (integer): Unique identifier. title (string): Title of the link. url (string): URL of the link. Used for displayable links (without redirector, url encoding, etc.). Can be absolute or relative for Notes. real_url (string): Real destination URL, can be redirected, encoded, etc. shorturl (string): Permalink small hash. description (string): Link text description. private (boolean): whether the link is private or not. tags (string): all link tags separated by a single space thumbnail (string|boolean): relative path of the thumbnail cache file, or false if there isn't any. created (DateTime): link creation date time. updated (DateTime): last modification date time.","title":"Link structure"},{"location":"Plugin-System/","text":"I am a developer: Developer API I am a template designer: Guide for template designers Developer API What can I do with plugins? The plugin system let you: insert content into specific places across templates. alter data before templates rendering. alter data before saving new links. How can I create a plugin for Shaarli? First, chose a plugin name, such as demo_plugin . Under plugin folder, create a folder named with your plugin name. Then create a .php file in that folder. You should have the following tree view: | index.php | plugins/ |---| demo_plugin/ | |---| demo_plugin.php Plugin initialization At the beginning of Shaarli execution, all enabled plugins are loaded. At this point, the plugin system looks for an init() function to execute and run it if it exists. This function must be named this way, and takes the ConfigManager as parameter. <plugin_name>_init($conf) This function can be used to create initial data, load default settings, etc. But also to set plugin errors . If the initialization function returns an array of strings, they will be understand as errors, and displayed in the header to logged in users. Understanding hooks A plugin is a set of functions. Each function will be triggered by the plugin system at certain point in Shaarli execution. These functions need to be named with this pattern: hook_<plugin_name>_<hook_name>($data, $conf) Parameters: data: see $data section conf: the ConfigManager instance. For example, if my plugin want to add data to the header, this function is needed: hook_demo_plugin_render_header If this function is declared, and the plugin enabled, it will be called every time Shaarli is rendering the header. Plugin's data Parameters Every hook function has a $data parameter. Its content differs for each hooks. This parameter needs to be returned every time , otherwise data is lost. return $data; Filling templates placeholder Template placeholders are displayed in template in specific places. RainTPL displays every element contained in the placeholder's array. These element can be added by plugins. For example, let's add a value in the placeholder top_placeholder which is displayed at the top of my page: $data['top_placeholder'][] = 'My content'; # OR array_push($data['top_placeholder'], 'My', 'content'); return $data; Data manipulation When a page is displayed, every variable send to the template engine is passed to plugins before that in $data . The data contained by this array can be altered before template rendering. For exemple, in linklist, it is possible to alter every title: // mind the reference if you want $data to be altered foreach ($data['links'] as &$value) { // String reverse every title. $value['title'] = strrev($value['title']); } return $data; Metadata Every plugin needs a <plugin_name>.meta file, which is in fact an .ini file ( KEY=\"VALUE\" ), to be listed in plugin administration. Each file contain two keys: description : plugin description parameters : user parameter names, separated by a ; . parameter.<PARAMETER_NAME> : add a text description the specified parameter. Note: In PHP, parse_ini_file() seems to want strings to be between by quotes \" in the ini file. It's not working! Use demo_plugin as a functional example. It covers most of the plugin system features. If it's still not working, please open an issue . Hooks Hooks Description render_header Allow plugin to add content in page headers. render_includes Allow plugin to include their own CSS files. render_footer Allow plugin to add content in page footer and include their own JS files. render_linklist It allows to add content at the begining and end of the page, after every link displayed and to alter link data. render_editlink Allow to add fields in the form, or display elements. render_tools Allow to add content at the end of the page. render_picwall Allow to add content at the top and bottom of the page. render_tagcloud Allow to add content at the top and bottom of the page, and after all tags. render_taglist Allow to add content at the top and bottom of the page, and after all tags. render_daily Allow to add content at the top and bottom of the page, the bottom of each link and to alter data. render_feed Allow to do add tags in RSS and ATOM feeds. save_link Allow to alter the link being saved in the datastore. delete_link Allow to do an action before a link is deleted from the datastore. render_header Triggered on every page. Allow plugin to add content in page headers. Data $data is an array containing: _PAGE_ : current target page (eg: linklist , picwall , etc.). _LOGGEDIN_ : true if user is logged in, false otherwise. Template placeholders Items can be displayed in templates by adding an entry in $data['<placeholder>'] array. List of placeholders: buttons_toolbar : after the list of buttons in the header. fields_toolbar : after search fields in the header. Note: This will only be called in linklist. render_includes Triggered on every page. Allow plugin to include their own CSS files. Data $data is an array containing: _PAGE_ : current target page (eg: linklist , picwall , etc.). _LOGGEDIN_ : true if user is logged in, false otherwise. Template placeholders Items can be displayed in templates by adding an entry in $data['<placeholder>'] array. List of placeholders: css_files : called after loading default CSS. Note: only add the path of the CSS file. E.g: plugins/demo_plugin/custom_demo.css . render_footer Triggered on every page. Allow plugin to add content in page footer and include their own JS files. Data $data is an array containing: _PAGE_ : current target page (eg: linklist , picwall , etc.). _LOGGEDIN_ : true if user is logged in, false otherwise. Template placeholders Items can be displayed in templates by adding an entry in $data['<placeholder>'] array. List of placeholders: text : called after the end of the footer text. endofpage : called at the end of the page. js_files : called at the end of the page, to include custom JS scripts. Note: only add the path of the JS file. E.g: plugins/demo_plugin/custom_demo.js . render_linklist Triggered when linklist is displayed (list of links, permalink, search, tag filtered, etc.). It allows to add content at the begining and end of the page, after every link displayed and to alter link data. Data $data is an array containing: _LOGGEDIN_ : true if user is logged in, false otherwise. All templates data, including links. Template placeholders Items can be displayed in templates by adding an entry in $data['<placeholder>'] array. List of placeholders: action_plugin : next to the button \"private only\" at the top and bottom of the page. link_plugin : for every link, between permalink and link URL. plugin_start_zone : before displaying the template content. plugin_end_zone : after displaying the template content. render_editlink Triggered when the link edition form is displayed. Allow to add fields in the form, or display elements. Data $data is an array containing: All templates data. Template placeholders Items can be displayed in templates by adding an entry in $data['<placeholder>'] array. List of placeholders: edit_link_plugin : after tags field. render_tools Triggered when the \"tools\" page is displayed. Allow to add content at the end of the page. Data $data is an array containing: All templates data. Template placeholders Items can be displayed in templates by adding an entry in $data['<placeholder>'] array. List of placeholders: tools_plugin : at the end of the page. render_picwall Triggered when picwall is displayed. Allow to add content at the top and bottom of the page. Data $data is an array containing: _LOGGEDIN_ : true if user is logged in, false otherwise. All templates data. Template placeholders Items can be displayed in templates by adding an entry in $data['<placeholder>'] array. List of placeholders: plugin_start_zone : before displaying the template content. plugin_end_zone : after displaying the template content. render_tagcloud Triggered when tagcloud is displayed. Allow to add content at the top and bottom of the page. Data $data is an array containing: _LOGGEDIN_ : true if user is logged in, false otherwise. All templates data. Template placeholders Items can be displayed in templates by adding an entry in $data['<placeholder>'] array. List of placeholders: plugin_start_zone : before displaying the template content. plugin_end_zone : after displaying the template content. For each tag, the following placeholder can be used: tag_plugin : after each tag render_taglist Triggered when taglist is displayed. Allow to add content at the top and bottom of the page. Data $data is an array containing: _LOGGEDIN_ : true if user is logged in, false otherwise. All templates data. Template placeholders Items can be displayed in templates by adding an entry in $data['<placeholder>'] array. List of placeholders: plugin_start_zone : before displaying the template content. plugin_end_zone : after displaying the template content. For each tag, the following placeholder can be used: tag_plugin : after each tag render_daily Triggered when tagcloud is displayed. Allow to add content at the top and bottom of the page, the bottom of each link and to alter data. Data $data is an array containing: _LOGGEDIN_ : true if user is logged in, false otherwise. All templates data, including links. Template placeholders Items can be displayed in templates by adding an entry in $data['<placeholder>'] array. List of placeholders: link_plugin : used at bottom of each link. plugin_start_zone : before displaying the template content. plugin_end_zone : after displaying the template content. render_feed Triggered when the ATOM or RSS feed is displayed. Allow to add tags in the feed, either in the header or for each items. Items (links) can also be altered before being rendered. Data $data is an array containing: _LOGGEDIN_ : true if user is logged in, false otherwise. _PAGE_ : containing either rss or atom . All templates data, including links. Template placeholders Tags can be added in feeds by adding an entry in $data['<placeholder>'] array. List of placeholders: feed_plugins_header : used as a header tag in the feed. For each links: feed_plugins : additional tag for every link entry. save_link Triggered when a link is save (new link or edit). Allow to alter the link being saved in the datastore. Data $data is an array containing the link being saved: id title url shorturl description private tags created updated delete_link Triggered when a link is deleted. Allow to execute any action before the link is actually removed from the datastore Data $data is an array containing the link being saved: id title url shorturl description private tags created updated Guide for template designer Plugin administration Your theme must include a plugin administration page: pluginsadmin.html . Note: repo's template link needs to be added when the PR is merged. Use the default one as an example. Aside from classic RainTPL loops, plugins order is handle by JavaScript. You can just include plugin_admin.js , only if: you're using a table. you call orderUp() and orderUp() onclick on arrows. you add data-line and data-order to your rows. Otherwise, you can use your own JS as long as this field is send by the form: Placeholder system In order to make plugins work with every custom themes, you need to add variable placeholder in your templates. It's a RainTPL loop like this: {loop=\"$plugin_variable\"} {$value} {/loop} You should enable demo_plugin for testing purpose, since it uses every placeholder available. List of placeholders page.header.html At the end of the menu: {loop=\"$plugins_header.buttons_toolbar\"} {$value} {/loop} At the end of file, before clearing floating blocks: {if=\"!empty($plugin_errors) && isLoggedIn()\"} <ul class=\"errors\"> {loop=\"plugin_errors\"} <li>{$value}</li> {/loop} </ul> {/if} includes.html At the end of the file: {loop=\"$plugins_includes.css_files\"} <link type=\"text/css\" rel=\"stylesheet\" href=\"{$value}#\"/> {/loop} page.footer.html At the end of your footer notes: {loop=\"$plugins_footer.text\"} {$value} {/loop} At the end of file: {loop=\"$plugins_footer.js_files\"} <script src=\"{$value}#\"></script> {/loop} linklist.html After search fields: {loop=\"$plugins_header.fields_toolbar\"} {$value} {/loop} Before displaying the link list (after paging): {loop=\"$plugin_start_zone\"} {$value} {/loop} For every links (icons): {loop=\"$value.link_plugin\"} <span>{$value}</span> {/loop} Before end paging: {loop=\"$plugin_end_zone\"} {$value} {/loop} linklist.paging.html After the \"private only\" icon: {loop=\"$action_plugin\"} {$value} {/loop} editlink.html After tags field: {loop=\"$edit_link_plugin\"} {$value} {/loop} tools.html After the last tool: {loop=\"$tools_plugin\"} {$value} {/loop} picwall.html Top: <div id=\"plugin_zone_start_picwall\" class=\"plugin_zone\"> {loop=\"$plugin_start_zone\"} {$value} {/loop} </div> Bottom: <div id=\"plugin_zone_end_picwall\" class=\"plugin_zone\"> {loop=\"$plugin_end_zone\"} {$value} {/loop} </div> tagcloud.html Top: <div id=\"plugin_zone_start_tagcloud\" class=\"plugin_zone\"> {loop=\"$plugin_start_zone\"} {$value} {/loop} </div> Bottom: <div id=\"plugin_zone_end_tagcloud\" class=\"plugin_zone\"> {loop=\"$plugin_end_zone\"} {$value} {/loop} </div> daily.html Top: <div id=\"plugin_zone_start_picwall\" class=\"plugin_zone\"> {loop=\"$plugin_start_zone\"} {$value} {/loop} </div> After every link: <div class=\"dailyEntryFooter\"> {loop=\"$link.link_plugin\"} {$value} {/loop} </div> Bottom: <div id=\"plugin_zone_end_picwall\" class=\"plugin_zone\"> {loop=\"$plugin_end_zone\"} {$value} {/loop} </div> feed.atom.xml and feed.rss.xml : In headers tags section: {loop=\"$feed_plugins_header\"} {$value} {/loop} After each entry: {loop=\"$value.feed_plugins\"} {$value} {/loop}","title":"Plugin System"},{"location":"Plugin-System/#developer-api","text":"","title":"Developer API"},{"location":"Plugin-System/#what-can-i-do-with-plugins","text":"The plugin system let you: insert content into specific places across templates. alter data before templates rendering. alter data before saving new links.","title":"What can I do with plugins?"},{"location":"Plugin-System/#how-can-i-create-a-plugin-for-shaarli","text":"First, chose a plugin name, such as demo_plugin . Under plugin folder, create a folder named with your plugin name. Then create a .php file in that folder. You should have the following tree view: | index.php | plugins/ |---| demo_plugin/ | |---| demo_plugin.php","title":"How can I create a plugin for Shaarli?"},{"location":"Plugin-System/#plugin-initialization","text":"At the beginning of Shaarli execution, all enabled plugins are loaded. At this point, the plugin system looks for an init() function to execute and run it if it exists. This function must be named this way, and takes the ConfigManager as parameter. <plugin_name>_init($conf) This function can be used to create initial data, load default settings, etc. But also to set plugin errors . If the initialization function returns an array of strings, they will be understand as errors, and displayed in the header to logged in users.","title":"Plugin initialization"},{"location":"Plugin-System/#understanding-hooks","text":"A plugin is a set of functions. Each function will be triggered by the plugin system at certain point in Shaarli execution. These functions need to be named with this pattern: hook_<plugin_name>_<hook_name>($data, $conf) Parameters: data: see $data section conf: the ConfigManager instance. For example, if my plugin want to add data to the header, this function is needed: hook_demo_plugin_render_header If this function is declared, and the plugin enabled, it will be called every time Shaarli is rendering the header.","title":"Understanding hooks"},{"location":"Plugin-System/#plugins-data","text":"","title":"Plugin's data"},{"location":"Plugin-System/#parameters","text":"Every hook function has a $data parameter. Its content differs for each hooks. This parameter needs to be returned every time , otherwise data is lost. return $data;","title":"Parameters"},{"location":"Plugin-System/#filling-templates-placeholder","text":"Template placeholders are displayed in template in specific places. RainTPL displays every element contained in the placeholder's array. These element can be added by plugins. For example, let's add a value in the placeholder top_placeholder which is displayed at the top of my page: $data['top_placeholder'][] = 'My content'; # OR array_push($data['top_placeholder'], 'My', 'content'); return $data;","title":"Filling templates placeholder"},{"location":"Plugin-System/#data-manipulation","text":"When a page is displayed, every variable send to the template engine is passed to plugins before that in $data . The data contained by this array can be altered before template rendering. For exemple, in linklist, it is possible to alter every title: // mind the reference if you want $data to be altered foreach ($data['links'] as &$value) { // String reverse every title. $value['title'] = strrev($value['title']); } return $data;","title":"Data manipulation"},{"location":"Plugin-System/#metadata","text":"Every plugin needs a <plugin_name>.meta file, which is in fact an .ini file ( KEY=\"VALUE\" ), to be listed in plugin administration. Each file contain two keys: description : plugin description parameters : user parameter names, separated by a ; . parameter.<PARAMETER_NAME> : add a text description the specified parameter. Note: In PHP, parse_ini_file() seems to want strings to be between by quotes \" in the ini file.","title":"Metadata"},{"location":"Plugin-System/#its-not-working","text":"Use demo_plugin as a functional example. It covers most of the plugin system features. If it's still not working, please open an issue .","title":"It's not working!"},{"location":"Plugin-System/#hooks","text":"Hooks Description render_header Allow plugin to add content in page headers. render_includes Allow plugin to include their own CSS files. render_footer Allow plugin to add content in page footer and include their own JS files. render_linklist It allows to add content at the begining and end of the page, after every link displayed and to alter link data. render_editlink Allow to add fields in the form, or display elements. render_tools Allow to add content at the end of the page. render_picwall Allow to add content at the top and bottom of the page. render_tagcloud Allow to add content at the top and bottom of the page, and after all tags. render_taglist Allow to add content at the top and bottom of the page, and after all tags. render_daily Allow to add content at the top and bottom of the page, the bottom of each link and to alter data. render_feed Allow to do add tags in RSS and ATOM feeds. save_link Allow to alter the link being saved in the datastore. delete_link Allow to do an action before a link is deleted from the datastore.","title":"Hooks"},{"location":"Plugin-System/#render_header","text":"Triggered on every page. Allow plugin to add content in page headers.","title":"render_header"},{"location":"Plugin-System/#data","text":"$data is an array containing: _PAGE_ : current target page (eg: linklist , picwall , etc.). _LOGGEDIN_ : true if user is logged in, false otherwise.","title":"Data"},{"location":"Plugin-System/#template-placeholders","text":"Items can be displayed in templates by adding an entry in $data['<placeholder>'] array. List of placeholders: buttons_toolbar : after the list of buttons in the header. fields_toolbar : after search fields in the header. Note: This will only be called in linklist.","title":"Template placeholders"},{"location":"Plugin-System/#render_includes","text":"Triggered on every page. Allow plugin to include their own CSS files.","title":"render_includes"},{"location":"Plugin-System/#data_1","text":"$data is an array containing: _PAGE_ : current target page (eg: linklist , picwall , etc.). _LOGGEDIN_ : true if user is logged in, false otherwise.","title":"Data"},{"location":"Plugin-System/#template-placeholders_1","text":"Items can be displayed in templates by adding an entry in $data['<placeholder>'] array. List of placeholders: css_files : called after loading default CSS. Note: only add the path of the CSS file. E.g: plugins/demo_plugin/custom_demo.css .","title":"Template placeholders"},{"location":"Plugin-System/#render_footer","text":"Triggered on every page. Allow plugin to add content in page footer and include their own JS files.","title":"render_footer"},{"location":"Plugin-System/#data_2","text":"$data is an array containing: _PAGE_ : current target page (eg: linklist , picwall , etc.). _LOGGEDIN_ : true if user is logged in, false otherwise.","title":"Data"},{"location":"Plugin-System/#template-placeholders_2","text":"Items can be displayed in templates by adding an entry in $data['<placeholder>'] array. List of placeholders: text : called after the end of the footer text. endofpage : called at the end of the page. js_files : called at the end of the page, to include custom JS scripts. Note: only add the path of the JS file. E.g: plugins/demo_plugin/custom_demo.js .","title":"Template placeholders"},{"location":"Plugin-System/#render_linklist","text":"Triggered when linklist is displayed (list of links, permalink, search, tag filtered, etc.). It allows to add content at the begining and end of the page, after every link displayed and to alter link data.","title":"render_linklist"},{"location":"Plugin-System/#data_3","text":"$data is an array containing: _LOGGEDIN_ : true if user is logged in, false otherwise. All templates data, including links.","title":"Data"},{"location":"Plugin-System/#template-placeholders_3","text":"Items can be displayed in templates by adding an entry in $data['<placeholder>'] array. List of placeholders: action_plugin : next to the button \"private only\" at the top and bottom of the page. link_plugin : for every link, between permalink and link URL. plugin_start_zone : before displaying the template content. plugin_end_zone : after displaying the template content.","title":"Template placeholders"},{"location":"Plugin-System/#render_editlink","text":"Triggered when the link edition form is displayed. Allow to add fields in the form, or display elements.","title":"render_editlink"},{"location":"Plugin-System/#data_4","text":"$data is an array containing: All templates data.","title":"Data"},{"location":"Plugin-System/#template-placeholders_4","text":"Items can be displayed in templates by adding an entry in $data['<placeholder>'] array. List of placeholders: edit_link_plugin : after tags field.","title":"Template placeholders"},{"location":"Plugin-System/#render_tools","text":"Triggered when the \"tools\" page is displayed. Allow to add content at the end of the page.","title":"render_tools"},{"location":"Plugin-System/#data_5","text":"$data is an array containing: All templates data.","title":"Data"},{"location":"Plugin-System/#template-placeholders_5","text":"Items can be displayed in templates by adding an entry in $data['<placeholder>'] array. List of placeholders: tools_plugin : at the end of the page.","title":"Template placeholders"},{"location":"Plugin-System/#render_picwall","text":"Triggered when picwall is displayed. Allow to add content at the top and bottom of the page.","title":"render_picwall"},{"location":"Plugin-System/#data_6","text":"$data is an array containing: _LOGGEDIN_ : true if user is logged in, false otherwise. All templates data.","title":"Data"},{"location":"Plugin-System/#template-placeholders_6","text":"Items can be displayed in templates by adding an entry in $data['<placeholder>'] array. List of placeholders: plugin_start_zone : before displaying the template content. plugin_end_zone : after displaying the template content.","title":"Template placeholders"},{"location":"Plugin-System/#render_tagcloud","text":"Triggered when tagcloud is displayed. Allow to add content at the top and bottom of the page.","title":"render_tagcloud"},{"location":"Plugin-System/#data_7","text":"$data is an array containing: _LOGGEDIN_ : true if user is logged in, false otherwise. All templates data.","title":"Data"},{"location":"Plugin-System/#template-placeholders_7","text":"Items can be displayed in templates by adding an entry in $data['<placeholder>'] array. List of placeholders: plugin_start_zone : before displaying the template content. plugin_end_zone : after displaying the template content. For each tag, the following placeholder can be used: tag_plugin : after each tag","title":"Template placeholders"},{"location":"Plugin-System/#render_taglist","text":"Triggered when taglist is displayed. Allow to add content at the top and bottom of the page.","title":"render_taglist"},{"location":"Plugin-System/#data_8","text":"$data is an array containing: _LOGGEDIN_ : true if user is logged in, false otherwise. All templates data.","title":"Data"},{"location":"Plugin-System/#template-placeholders_8","text":"Items can be displayed in templates by adding an entry in $data['<placeholder>'] array. List of placeholders: plugin_start_zone : before displaying the template content. plugin_end_zone : after displaying the template content. For each tag, the following placeholder can be used: tag_plugin : after each tag","title":"Template placeholders"},{"location":"Plugin-System/#render_daily","text":"Triggered when tagcloud is displayed. Allow to add content at the top and bottom of the page, the bottom of each link and to alter data.","title":"render_daily"},{"location":"Plugin-System/#data_9","text":"$data is an array containing: _LOGGEDIN_ : true if user is logged in, false otherwise. All templates data, including links.","title":"Data"},{"location":"Plugin-System/#template-placeholders_9","text":"Items can be displayed in templates by adding an entry in $data['<placeholder>'] array. List of placeholders: link_plugin : used at bottom of each link. plugin_start_zone : before displaying the template content. plugin_end_zone : after displaying the template content.","title":"Template placeholders"},{"location":"Plugin-System/#render_feed","text":"Triggered when the ATOM or RSS feed is displayed. Allow to add tags in the feed, either in the header or for each items. Items (links) can also be altered before being rendered.","title":"render_feed"},{"location":"Plugin-System/#data_10","text":"$data is an array containing: _LOGGEDIN_ : true if user is logged in, false otherwise. _PAGE_ : containing either rss or atom . All templates data, including links.","title":"Data"},{"location":"Plugin-System/#template-placeholders_10","text":"Tags can be added in feeds by adding an entry in $data['<placeholder>'] array. List of placeholders: feed_plugins_header : used as a header tag in the feed. For each links: feed_plugins : additional tag for every link entry.","title":"Template placeholders"},{"location":"Plugin-System/#save_link","text":"Triggered when a link is save (new link or edit). Allow to alter the link being saved in the datastore.","title":"save_link"},{"location":"Plugin-System/#data_11","text":"$data is an array containing the link being saved: id title url shorturl description private tags created updated","title":"Data"},{"location":"Plugin-System/#delete_link","text":"Triggered when a link is deleted. Allow to execute any action before the link is actually removed from the datastore","title":"delete_link"},{"location":"Plugin-System/#data_12","text":"$data is an array containing the link being saved: id title url shorturl description private tags created updated","title":"Data"},{"location":"Plugin-System/#guide-for-template-designer","text":"","title":"Guide for template designer"},{"location":"Plugin-System/#plugin-administration","text":"Your theme must include a plugin administration page: pluginsadmin.html . Note: repo's template link needs to be added when the PR is merged. Use the default one as an example. Aside from classic RainTPL loops, plugins order is handle by JavaScript. You can just include plugin_admin.js , only if: you're using a table. you call orderUp() and orderUp() onclick on arrows. you add data-line and data-order to your rows. Otherwise, you can use your own JS as long as this field is send by the form:","title":"Plugin administration"},{"location":"Plugin-System/#placeholder-system","text":"In order to make plugins work with every custom themes, you need to add variable placeholder in your templates. It's a RainTPL loop like this: {loop=\"$plugin_variable\"} {$value} {/loop} You should enable demo_plugin for testing purpose, since it uses every placeholder available.","title":"Placeholder system"},{"location":"Plugin-System/#list-of-placeholders","text":"page.header.html At the end of the menu: {loop=\"$plugins_header.buttons_toolbar\"} {$value} {/loop} At the end of file, before clearing floating blocks: {if=\"!empty($plugin_errors) && isLoggedIn()\"} <ul class=\"errors\"> {loop=\"plugin_errors\"} <li>{$value}</li> {/loop} </ul> {/if} includes.html At the end of the file: {loop=\"$plugins_includes.css_files\"} <link type=\"text/css\" rel=\"stylesheet\" href=\"{$value}#\"/> {/loop} page.footer.html At the end of your footer notes: {loop=\"$plugins_footer.text\"} {$value} {/loop} At the end of file: {loop=\"$plugins_footer.js_files\"} <script src=\"{$value}#\"></script> {/loop} linklist.html After search fields: {loop=\"$plugins_header.fields_toolbar\"} {$value} {/loop} Before displaying the link list (after paging): {loop=\"$plugin_start_zone\"} {$value} {/loop} For every links (icons): {loop=\"$value.link_plugin\"} <span>{$value}</span> {/loop} Before end paging: {loop=\"$plugin_end_zone\"} {$value} {/loop} linklist.paging.html After the \"private only\" icon: {loop=\"$action_plugin\"} {$value} {/loop} editlink.html After tags field: {loop=\"$edit_link_plugin\"} {$value} {/loop} tools.html After the last tool: {loop=\"$tools_plugin\"} {$value} {/loop} picwall.html Top: <div id=\"plugin_zone_start_picwall\" class=\"plugin_zone\"> {loop=\"$plugin_start_zone\"} {$value} {/loop} </div> Bottom: <div id=\"plugin_zone_end_picwall\" class=\"plugin_zone\"> {loop=\"$plugin_end_zone\"} {$value} {/loop} </div> tagcloud.html Top: <div id=\"plugin_zone_start_tagcloud\" class=\"plugin_zone\"> {loop=\"$plugin_start_zone\"} {$value} {/loop} </div> Bottom: <div id=\"plugin_zone_end_tagcloud\" class=\"plugin_zone\"> {loop=\"$plugin_end_zone\"} {$value} {/loop} </div> daily.html Top: <div id=\"plugin_zone_start_picwall\" class=\"plugin_zone\"> {loop=\"$plugin_start_zone\"} {$value} {/loop} </div> After every link: <div class=\"dailyEntryFooter\"> {loop=\"$link.link_plugin\"} {$value} {/loop} </div> Bottom: <div id=\"plugin_zone_end_picwall\" class=\"plugin_zone\"> {loop=\"$plugin_end_zone\"} {$value} {/loop} </div> feed.atom.xml and feed.rss.xml : In headers tags section: {loop=\"$feed_plugins_header\"} {$value} {/loop} After each entry: {loop=\"$value.feed_plugins\"} {$value} {/loop}","title":"List of placeholders"},{"location":"Plugins/","text":"Plugin installation There is a bunch of plugins shipped with Shaarli, where there is nothing to do to install them. If you want to install a third party plugin: Download it. Put it in the plugins directory in Shaarli's installation folder. Make sure you put it correctly: | index.php | plugins/ |---| custom_plugin/ | |---| custom_plugin.php | |---| ... Make sure your webserver can read and write the files in your plugin folder. Plugin configuration In Shaarli's administration page ( Tools link), go to Plugin administration . Here you can enable and disable all plugins available, and configure them. Plugin order In the plugin administration page, you can move enabled plugins to the top or bottom of the list. The first plugins in the list will be processed first. This is important in case plugins are depending on each other. Read plugins README details for more information. Use case : The (non existent) plugin shaares_footer adds a footer to every shaare in Markdown syntax. It needs to be processed before (higher in the list) the Markdown plugin. Otherwise its syntax won't be translated in HTML. File mode Enabled plugin are stored in your config.json.php parameters file, under the array : $GLOBALS['config']['ENABLED_PLUGINS'] You can edit them manually here. Example: $GLOBALS['config']['ENABLED_PLUGINS'] = array( 'qrcode', 'archiveorg', 'wallabag', 'markdown', ); Plugin usage Official plugins Usage of each plugin is documented in it's README file: addlink-toolbar : Adds the addlink input on the linklist page archiveorg : For each link, add an Archive.org icon markdown : Render shaare description with Markdown syntax. playvideos : Add a button in the toolbar allowing to watch all videos. qrcode : For each link, add a QRCode icon. wallabag : For each link, add a Wallabag icon to save it in your instance. Third party plugins See Community & related software","title":"Plugins"},{"location":"Plugins/#plugin-installation","text":"There is a bunch of plugins shipped with Shaarli, where there is nothing to do to install them. If you want to install a third party plugin: Download it. Put it in the plugins directory in Shaarli's installation folder. Make sure you put it correctly: | index.php | plugins/ |---| custom_plugin/ | |---| custom_plugin.php | |---| ... Make sure your webserver can read and write the files in your plugin folder.","title":"Plugin installation"},{"location":"Plugins/#plugin-configuration","text":"In Shaarli's administration page ( Tools link), go to Plugin administration . Here you can enable and disable all plugins available, and configure them.","title":"Plugin configuration"},{"location":"Plugins/#plugin-order","text":"In the plugin administration page, you can move enabled plugins to the top or bottom of the list. The first plugins in the list will be processed first. This is important in case plugins are depending on each other. Read plugins README details for more information. Use case : The (non existent) plugin shaares_footer adds a footer to every shaare in Markdown syntax. It needs to be processed before (higher in the list) the Markdown plugin. Otherwise its syntax won't be translated in HTML.","title":"Plugin order"},{"location":"Plugins/#file-mode","text":"Enabled plugin are stored in your config.json.php parameters file, under the array : $GLOBALS['config']['ENABLED_PLUGINS'] You can edit them manually here. Example: $GLOBALS['config']['ENABLED_PLUGINS'] = array( 'qrcode', 'archiveorg', 'wallabag', 'markdown', );","title":"File mode"},{"location":"Plugins/#plugin-usage","text":"","title":"Plugin usage"},{"location":"Plugins/#official-plugins","text":"Usage of each plugin is documented in it's README file: addlink-toolbar : Adds the addlink input on the linklist page archiveorg : For each link, add an Archive.org icon markdown : Render shaare description with Markdown syntax. playvideos : Add a button in the toolbar allowing to watch all videos. qrcode : For each link, add a QRCode icon. wallabag : For each link, add a Wallabag icon to save it in your instance.","title":"Official plugins"},{"location":"Plugins/#third-party-plugins","text":"See Community & related software","title":"Third party plugins"},{"location":"REST-API/","text":"Usage and Prerequisites See the REST API documentation for a list of available endpoints and parameters. Please ensure that your server meets the requirements and is properly configured : URL rewriting is enabled (see specific Apache and Nginx sections) the server's timezone is properly defined the server's clock is synchronized with NTP The host where the API client is invoked should also be synchronized with NTP, see token expiration . Authentication All requests to Shaarli's API must include a JWT token to verify their authenticity. This token has to be included as an HTTP header called Authentication: Bearer <jwt token> . JWT resources : jwt.io (including a list of client per language). RFC : https://tools.ietf.org/html/rfc7519 https://float-middle.com/json-web-tokens-jwt-vs-sessions/ HackerNews thread: https://news.ycombinator.com/item?id=11929267 Shaarli JWT Token JWT tokens are composed by three parts, separated by a dot . and encoded in base64: [header].[payload].[signature] Header Shaarli only allow one hash algorithm, so the header will always be the same: { \"typ\": \"JWT\", \"alg\": \"HS512\" } Encoded in base64, it gives: ewogICAgICAgICJ0eXAiOiAiSldUIiwKICAgICAgICAiYWxnIjogIkhTNTEyIgogICAgfQ== Payload Token expiration To avoid infinite token validity, JWT tokens must include their creation date in UNIX timestamp format (timezone independent - UTC) under the key iat (issued at). This token will be valid during 9 minutes . { \"iat\": 1468663519 } See RFC reference . Signature The signature authenticate the token validity. It contains the base64 of the header and the body, separated by a dot . , hashed in SHA512 with the API secret available in Shaarli administration page. Signature example with PHP: $content = base64_encode($header) . '.' . base64_encode($payload); $signature = hash_hmac('sha512', $content, $secret); Clients and examples Android, Java, Kotlin Android client example with Kotlin by Braincoke Javascript, NodeJS shaarli-client ( source code ) by laBecasse PHP This example uses the PHP cURL library. <?php $baseUrl = 'https://shaarli.mydomain.net'; $secret = 'thats_my_api_secret'; function base64url_encode($data) { return rtrim(strtr(base64_encode($data), '+/', '-_'), '='); } function generateToken($secret) { $header = base64url_encode('{ \"typ\": \"JWT\", \"alg\": \"HS512\" }'); $payload = base64url_encode('{ \"iat\": '. time() .' }'); $signature = base64url_encode(hash_hmac('sha512', $header .'.'. $payload , $secret, true)); return $header . '.' . $payload . '.' . $signature; } function getInfo($baseUrl, $secret) { $token = generateToken($secret); $endpoint = rtrim($baseUrl, '/') . '/api/v1/info'; $headers = [ 'Content-Type: text/plain; charset=UTF-8', 'Authorization: Bearer ' . $token, ]; $ch = curl_init($endpoint); curl_setopt($ch, CURLOPT_HTTPHEADER, $headers); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); curl_setopt($ch, CURLOPT_AUTOREFERER, 1); curl_setopt($ch, CURLOPT_FRESH_CONNECT, 1); $result = curl_exec($ch); curl_close($ch); return $result; } var_dump(getInfo($baseUrl, $secret)); Python See the reference API client: Documentation on ReadTheDocs python-shaarli-client on Github Troubleshooting Debug mode This should never be used in a production environment. For security reasons, authentication issues will always return an HTTP 401 error code without any detail. It is possible to enable the debug mode in config.json.php to get the actual error message in the HTTP response body with: { \"dev\": { \"debug\": true } }","title":"REST API"},{"location":"REST-API/#usage-and-prerequisites","text":"See the REST API documentation for a list of available endpoints and parameters. Please ensure that your server meets the requirements and is properly configured : URL rewriting is enabled (see specific Apache and Nginx sections) the server's timezone is properly defined the server's clock is synchronized with NTP The host where the API client is invoked should also be synchronized with NTP, see token expiration .","title":"Usage and Prerequisites"},{"location":"REST-API/#authentication","text":"All requests to Shaarli's API must include a JWT token to verify their authenticity. This token has to be included as an HTTP header called Authentication: Bearer <jwt token> . JWT resources : jwt.io (including a list of client per language). RFC : https://tools.ietf.org/html/rfc7519 https://float-middle.com/json-web-tokens-jwt-vs-sessions/ HackerNews thread: https://news.ycombinator.com/item?id=11929267","title":"Authentication"},{"location":"REST-API/#shaarli-jwt-token","text":"JWT tokens are composed by three parts, separated by a dot . and encoded in base64: [header].[payload].[signature]","title":"Shaarli JWT Token"},{"location":"REST-API/#header","text":"Shaarli only allow one hash algorithm, so the header will always be the same: { \"typ\": \"JWT\", \"alg\": \"HS512\" } Encoded in base64, it gives: ewogICAgICAgICJ0eXAiOiAiSldUIiwKICAgICAgICAiYWxnIjogIkhTNTEyIgogICAgfQ==","title":"Header"},{"location":"REST-API/#payload","text":"Token expiration To avoid infinite token validity, JWT tokens must include their creation date in UNIX timestamp format (timezone independent - UTC) under the key iat (issued at). This token will be valid during 9 minutes . { \"iat\": 1468663519 } See RFC reference .","title":"Payload"},{"location":"REST-API/#signature","text":"The signature authenticate the token validity. It contains the base64 of the header and the body, separated by a dot . , hashed in SHA512 with the API secret available in Shaarli administration page. Signature example with PHP: $content = base64_encode($header) . '.' . base64_encode($payload); $signature = hash_hmac('sha512', $content, $secret);","title":"Signature"},{"location":"REST-API/#clients-and-examples","text":"","title":"Clients and examples"},{"location":"REST-API/#android-java-kotlin","text":"Android client example with Kotlin by Braincoke","title":"Android, Java, Kotlin"},{"location":"REST-API/#javascript-nodejs","text":"shaarli-client ( source code ) by laBecasse","title":"Javascript, NodeJS"},{"location":"REST-API/#php","text":"This example uses the PHP cURL library. <?php $baseUrl = 'https://shaarli.mydomain.net'; $secret = 'thats_my_api_secret'; function base64url_encode($data) { return rtrim(strtr(base64_encode($data), '+/', '-_'), '='); } function generateToken($secret) { $header = base64url_encode('{ \"typ\": \"JWT\", \"alg\": \"HS512\" }'); $payload = base64url_encode('{ \"iat\": '. time() .' }'); $signature = base64url_encode(hash_hmac('sha512', $header .'.'. $payload , $secret, true)); return $header . '.' . $payload . '.' . $signature; } function getInfo($baseUrl, $secret) { $token = generateToken($secret); $endpoint = rtrim($baseUrl, '/') . '/api/v1/info'; $headers = [ 'Content-Type: text/plain; charset=UTF-8', 'Authorization: Bearer ' . $token, ]; $ch = curl_init($endpoint); curl_setopt($ch, CURLOPT_HTTPHEADER, $headers); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); curl_setopt($ch, CURLOPT_AUTOREFERER, 1); curl_setopt($ch, CURLOPT_FRESH_CONNECT, 1); $result = curl_exec($ch); curl_close($ch); return $result; } var_dump(getInfo($baseUrl, $secret));","title":"PHP"},{"location":"REST-API/#python","text":"See the reference API client: Documentation on ReadTheDocs python-shaarli-client on Github","title":"Python"},{"location":"REST-API/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"REST-API/#debug-mode","text":"This should never be used in a production environment. For security reasons, authentication issues will always return an HTTP 401 error code without any detail. It is possible to enable the debug mode in config.json.php to get the actual error message in the HTTP response body with: { \"dev\": { \"debug\": true } }","title":"Debug mode"},{"location":"RSS-feeds/","text":"Feeds options Feeds are available in ATOM with ?do=atom and RSS with do=RSS . Options: You can use permalinks in the feed URL to get permalink to Shaares instead of direct link to shaared URL. E.G. https://my.shaarli.domain/?do=atom&permalinks . You can use nb parameter in the feed URL to specify the number of Shaares you want in a feed (default if not specified: 50 ). The keyword all is available if you want everything. https://my.shaarli.domain/?do=atom&permalinks&nb=42 https://my.shaarli.domain/?do=atom&permalinks&nb=all RSS Feeds or Picture Wall for a specific search/tag It is possible to filter RSS/ATOM feeds and Picture Wall on a Shaarli to only display results of a specific search, or for a specific tag . For example, if you want to subscribe only to links tagged photography : Go to the desired Shaarli instance. Search for the photography tag in the Filter by tag box. Links tagged photography are displayed. Click on the RSS Feed button. You are presented with an RSS feed showing only these links. Subscribe to it to receive only updates with this tag. The same method also works for a full-text search ( Search box) and for the Picture Wall (want to only see pictures about nature ?) You can also build the URLs manually: https://my.shaarli.domain/?do=rss&searchtags=nature https://my.shaarli.domain/links/?do=picwall&searchterm=poney","title":"RSS feeds"},{"location":"RSS-feeds/#feeds-options","text":"Feeds are available in ATOM with ?do=atom and RSS with do=RSS . Options: You can use permalinks in the feed URL to get permalink to Shaares instead of direct link to shaared URL. E.G. https://my.shaarli.domain/?do=atom&permalinks . You can use nb parameter in the feed URL to specify the number of Shaares you want in a feed (default if not specified: 50 ). The keyword all is available if you want everything. https://my.shaarli.domain/?do=atom&permalinks&nb=42 https://my.shaarli.domain/?do=atom&permalinks&nb=all","title":"Feeds options"},{"location":"RSS-feeds/#rss-feeds-or-picture-wall-for-a-specific-searchtag","text":"It is possible to filter RSS/ATOM feeds and Picture Wall on a Shaarli to only display results of a specific search, or for a specific tag . For example, if you want to subscribe only to links tagged photography : Go to the desired Shaarli instance. Search for the photography tag in the Filter by tag box. Links tagged photography are displayed. Click on the RSS Feed button. You are presented with an RSS feed showing only these links. Subscribe to it to receive only updates with this tag. The same method also works for a full-text search ( Search box) and for the Picture Wall (want to only see pictures about nature ?) You can also build the URLs manually: https://my.shaarli.domain/?do=rss&searchtags=nature https://my.shaarli.domain/links/?do=picwall&searchterm=poney","title":"RSS Feeds or Picture Wall for a specific search/tag"},{"location":"Release-Shaarli/","text":"See Git - Maintaining a project - Tagging your releases . Prerequisites This guide assumes that you have: a GPG key matching your GitHub authentication credentials i.e., the email address identified by the GPG key is the same as the one in your ~/.gitconfig a GitHub fork of Shaarli a local clone of your Shaarli fork, with the following remotes: origin pointing to your GitHub fork upstream pointing to the main Shaarli repository maintainer permissions on the main Shaarli repository, to: push the signed tag create a new release Composer needs to be installed The venv Python 3 module needs to be installed for HTML documentation generation. GitHub release draft and CHANGELOG.md See http://keepachangelog.com/en/0.3.0/ for changelog formatting. GitHub release draft GitHub allows drafting the release note for the upcoming release, from the Releases page. This way, the release note can be drafted while contributions are merged to master . CHANGELOG.md This file should contain the same information as the release note draft for the upcoming version. Update it to: add new entries (additions, fixes, etc.) mark the current version as released by setting its date and link add a new section for the future unreleased version $ cd /path/to/shaarli $ nano CHANGELOG.md [...] ## vA.B.C - UNRELEASED TBA ## [vX.Y.Z](https://github.com/shaarli/Shaarli/releases/tag/vX.Y.Z) - YYYY-MM-DD [...] Increment the version code, update docs, create and push a signed tag Update the list of Git contributors $ make authors $ git commit -s -m \"Update AUTHORS\" Create and merge a Pull Request This one is pretty straightforward ;-) Bump Shaarli version to v0.x branch $ git checkout master $ git fetch upstream $ git pull upstream master # IF the branch doesn't exists $ git checkout -b v0.5 # OR if the branch already exists $ git checkout v0.5 $ git rebase upstream/master # Bump shaarli version from dev to 0.5.0, **without the `v`** $ vim shaarli_version.php $ git add shaarli_version $ git commit -s -m \"Bump Shaarli version to v0.5.0\" $ git push upstream v0.5 Create and push a signed tag # update your local copy $ git checkout v0.5 $ git fetch upstream $ git pull upstream v0.5 # create a signed tag $ git tag -s -m \"Release v0.5.0\" v0.5.0 # push it to \"upstream\" $ git push --tags upstream Verify a signed tag v0.5.0 is the first GPG-signed tag pushed on the Community Shaarli. Let's have a look at its signature! $ cd /path/to/shaarli $ git fetch upstream # get the SHA1 reference of the tag $ git show-ref tags/v0.5.0 f7762cf803f03f5caf4b8078359a63783d0090c1 refs/tags/v0.5.0 # verify the tag signature information $ git verify-tag f7762cf803f03f5caf4b8078359a63783d0090c1 gpg: Signature made Thu 30 Jul 2015 11:46:34 CEST using RSA key ID 4100DF6F gpg: Good signature from \"VirtualTam <virtualtam@flibidi.net>\" [ultimate] Publish the GitHub release Update release badges Update README.md so version badges display and point to the newly released Shaarli version(s), in the master branch. Create a GitHub release from a Git tag From the previously drafted release: edit the release notes (if needed) specify the appropriate Git tag publish the release profit! Generate and upload all-in-one release archives Users with a shared hosting may have: no SSH access no possibility to install PHP packages or server extensions no possibility to run scripts To ease Shaarli installations, it is possible to generate and upload additional release archives, that will contain Shaarli code plus all required third-party libraries. From the v0.5 branch: $ make release_archive This will create the following archives: shaarli-vX.Y.Z-full.tar shaarli-vX.Y.Z-full.zip The archives need to be manually uploaded on the previously created GitHub release. Update stable and latest branches $ git checkout latest # latest release $ git merge v0.5.0 # fix eventual conflicts $ make test $ git push upstream latest $ git checkout stable # latest previous major $ git merge v0.4.5 # fix eventual conflicts $ make test $ git push upstream stable","title":"Release Shaarli"},{"location":"Release-Shaarli/#prerequisites","text":"This guide assumes that you have: a GPG key matching your GitHub authentication credentials i.e., the email address identified by the GPG key is the same as the one in your ~/.gitconfig a GitHub fork of Shaarli a local clone of your Shaarli fork, with the following remotes: origin pointing to your GitHub fork upstream pointing to the main Shaarli repository maintainer permissions on the main Shaarli repository, to: push the signed tag create a new release Composer needs to be installed The venv Python 3 module needs to be installed for HTML documentation generation.","title":"Prerequisites"},{"location":"Release-Shaarli/#github-release-draft-and-changelogmd","text":"See http://keepachangelog.com/en/0.3.0/ for changelog formatting.","title":"GitHub release draft and CHANGELOG.md"},{"location":"Release-Shaarli/#github-release-draft","text":"GitHub allows drafting the release note for the upcoming release, from the Releases page. This way, the release note can be drafted while contributions are merged to master .","title":"GitHub release draft"},{"location":"Release-Shaarli/#changelogmd","text":"This file should contain the same information as the release note draft for the upcoming version. Update it to: add new entries (additions, fixes, etc.) mark the current version as released by setting its date and link add a new section for the future unreleased version $ cd /path/to/shaarli $ nano CHANGELOG.md [...] ## vA.B.C - UNRELEASED TBA ## [vX.Y.Z](https://github.com/shaarli/Shaarli/releases/tag/vX.Y.Z) - YYYY-MM-DD [...]","title":"CHANGELOG.md"},{"location":"Release-Shaarli/#increment-the-version-code-update-docs-create-and-push-a-signed-tag","text":"","title":"Increment the version code, update docs, create and push a signed tag"},{"location":"Release-Shaarli/#update-the-list-of-git-contributors","text":"$ make authors $ git commit -s -m \"Update AUTHORS\"","title":"Update the list of Git contributors"},{"location":"Release-Shaarli/#create-and-merge-a-pull-request","text":"This one is pretty straightforward ;-)","title":"Create and merge a Pull Request"},{"location":"Release-Shaarli/#bump-shaarli-version-to-v0x-branch","text":"$ git checkout master $ git fetch upstream $ git pull upstream master # IF the branch doesn't exists $ git checkout -b v0.5 # OR if the branch already exists $ git checkout v0.5 $ git rebase upstream/master # Bump shaarli version from dev to 0.5.0, **without the `v`** $ vim shaarli_version.php $ git add shaarli_version $ git commit -s -m \"Bump Shaarli version to v0.5.0\" $ git push upstream v0.5","title":"Bump Shaarli version to v0.x branch"},{"location":"Release-Shaarli/#create-and-push-a-signed-tag","text":"# update your local copy $ git checkout v0.5 $ git fetch upstream $ git pull upstream v0.5 # create a signed tag $ git tag -s -m \"Release v0.5.0\" v0.5.0 # push it to \"upstream\" $ git push --tags upstream","title":"Create and push a signed tag"},{"location":"Release-Shaarli/#verify-a-signed-tag","text":"v0.5.0 is the first GPG-signed tag pushed on the Community Shaarli. Let's have a look at its signature! $ cd /path/to/shaarli $ git fetch upstream # get the SHA1 reference of the tag $ git show-ref tags/v0.5.0 f7762cf803f03f5caf4b8078359a63783d0090c1 refs/tags/v0.5.0 # verify the tag signature information $ git verify-tag f7762cf803f03f5caf4b8078359a63783d0090c1 gpg: Signature made Thu 30 Jul 2015 11:46:34 CEST using RSA key ID 4100DF6F gpg: Good signature from \"VirtualTam <virtualtam@flibidi.net>\" [ultimate]","title":"Verify a signed tag"},{"location":"Release-Shaarli/#publish-the-github-release","text":"","title":"Publish the GitHub release"},{"location":"Release-Shaarli/#update-release-badges","text":"Update README.md so version badges display and point to the newly released Shaarli version(s), in the master branch.","title":"Update release badges"},{"location":"Release-Shaarli/#create-a-github-release-from-a-git-tag","text":"From the previously drafted release: edit the release notes (if needed) specify the appropriate Git tag publish the release profit!","title":"Create a GitHub release from a Git tag"},{"location":"Release-Shaarli/#generate-and-upload-all-in-one-release-archives","text":"Users with a shared hosting may have: no SSH access no possibility to install PHP packages or server extensions no possibility to run scripts To ease Shaarli installations, it is possible to generate and upload additional release archives, that will contain Shaarli code plus all required third-party libraries. From the v0.5 branch: $ make release_archive This will create the following archives: shaarli-vX.Y.Z-full.tar shaarli-vX.Y.Z-full.zip The archives need to be manually uploaded on the previously created GitHub release.","title":"Generate and upload all-in-one release archives"},{"location":"Release-Shaarli/#update-stable-and-latest-branches","text":"$ git checkout latest # latest release $ git merge v0.5.0 # fix eventual conflicts $ make test $ git push upstream latest $ git checkout stable # latest previous major $ git merge v0.4.5 # fix eventual conflicts $ make test $ git push upstream stable","title":"Update stable and latest branches"},{"location":"Security/","text":"Client browser Shaarli relies on HTTP_REFERER for some functions (like redirects and clicking on tags). If you have disabled or masqueraded HTTP_REFERER in your browser, some features of Shaarli may not work Server and sessions Directories are protected using .htaccess files Forms are protected against XSRF (Cross-site requests forgery): Forms which act on data (save,delete\u2026) contain a token generated by the server. Any posted form which does not contain a valid token is rejected. Any token can only be used once. Tokens are attached to the session and cannot be reused in another session. Sessions automatically expire after 60 minutes. Sessions are protected against hijacking: the session ID cannot be used from a different IP address. Shaarli datastore and configuration The password is salted, hashed and stored in the data subdirectory, in a PHP file, and protected by htaccess. Even if the webserver does not support htaccess, the hash is not readable by URL. Even if the .php file is stolen, the password cannot deduced from the hash. The salt prevents rainbow-tables attacks. Links are stored as an associative array which is serialized, compressed (with deflate), base64-encoded and saved as a comment in a .php file. Even if the server does not support .htaccess files, the data file will still not be readable by URL. The database looks like this: <?php /* zP1ZjxxJtiYIvvevEPJ2lDOaLrZv7o... ...ka7gaco/Z+TFXM2i7BlfMf8qxpaSSYfKlvqv/x8= */ ?> Small hashes are used to make a link to an entry in Shaarli. They are unique. In fact, the date of the items (eg. 20110923_150523 ) is hashed with CRC32, then converted to base64 and some characters are replaced. They are always 6 characters longs and use only A-Z a-z 0-9 - _ and @ .","title":"Security"},{"location":"Security/#client-browser","text":"Shaarli relies on HTTP_REFERER for some functions (like redirects and clicking on tags). If you have disabled or masqueraded HTTP_REFERER in your browser, some features of Shaarli may not work","title":"Client browser"},{"location":"Security/#server-and-sessions","text":"Directories are protected using .htaccess files Forms are protected against XSRF (Cross-site requests forgery): Forms which act on data (save,delete\u2026) contain a token generated by the server. Any posted form which does not contain a valid token is rejected. Any token can only be used once. Tokens are attached to the session and cannot be reused in another session. Sessions automatically expire after 60 minutes. Sessions are protected against hijacking: the session ID cannot be used from a different IP address.","title":"Server and sessions"},{"location":"Security/#shaarli-datastore-and-configuration","text":"The password is salted, hashed and stored in the data subdirectory, in a PHP file, and protected by htaccess. Even if the webserver does not support htaccess, the hash is not readable by URL. Even if the .php file is stolen, the password cannot deduced from the hash. The salt prevents rainbow-tables attacks. Links are stored as an associative array which is serialized, compressed (with deflate), base64-encoded and saved as a comment in a .php file. Even if the server does not support .htaccess files, the data file will still not be readable by URL. The database looks like this: <?php /* zP1ZjxxJtiYIvvevEPJ2lDOaLrZv7o... ...ka7gaco/Z+TFXM2i7BlfMf8qxpaSSYfKlvqv/x8= */ ?> Small hashes are used to make a link to an entry in Shaarli. They are unique. In fact, the date of the items (eg. 20110923_150523 ) is hashed with CRC32, then converted to base64 and some characters are replaced. They are always 6 characters longs and use only A-Z a-z 0-9 - _ and @ .","title":"Shaarli datastore and configuration"},{"location":"Server-configuration/","text":"Prerequisites Apache Nginx Proxies See also Prerequisites Shaarli A web server and PHP interpreter module/service have been installed. You have write access to the Shaarli installation directory. The correct read/write permissions have been granted to the web server user and group. Your PHP interpreter is compatible with supported PHP versions: Version Status Shaarli compatibility 7.2 Supported Yes 7.1 Supported Yes 7.0 Supported Yes 5.6 EOL: 2018-12-31 Yes (up to Shaarli 0.10.x) 5.5 EOL: 2016-07-10 Yes 5.4 EOL: 2015-09-14 Yes (up to Shaarli 0.8.x) 5.3 EOL: 2014-08-14 Yes (up to Shaarli 0.8.x) The following PHP extensions are installed on the server: Extension Required? Usage openssl All OpenSSL, HTTPS php-mbstring CentOS, Fedora, RHEL, Windows, some hosting providers multibyte (Unicode) string support php-gd optional required to use thumbnails php-intl optional localized text sorting (e.g. e->\u00e8->f ) php-curl optional using cURL for fetching webpages and thumbnails in a more robust way php-gettext optional Use the translation system in gettext mode (faster) SSL/TLS configuration To setup HTTPS / SSL on your webserver (recommended), you must generate a public/private key pair and a certificate , and install, configure and activate the appropriate webserver SSL extension . Let's Encrypt Let's Encrypt is a certificate authority that provides free TLS/X.509 certificates via an automated process. Install certbot using the appropriate method described on https://certbot.eff.org/. Location of the certbot program and template configuration files may vary depending on which installation method was used. Change the file paths below accordingly. Here is an easy way to create a signed certificate using certbot , it assumes certbot was installed through APT on a Debian-based distribution: Stop the apache2/nginx service. Run certbot --agree-tos --standalone --preferred-challenges tls-sni --email \"youremail@example.com\" --domain yourdomain.example.com For the Apache webserver, copy /usr/lib/python2.7/dist-packages/certbot_apache/options-ssl-apache.conf to /etc/letsencrypt/options-ssl-apache.conf (paths may vary depending on installation method) For Nginx: TODO Setup your webserver as described below Restart the apache2/nginx service. Self-signed certificates If you don't want to request a certificate from Let's Encrypt, or are unable to (for example, webserver on a LAN, or domain name not registered in the public DNS system), you can generate a self-signed certificate. This certificate will trigger security warnings in web browsers, unless you add it to the browser's SSL store manually. Apache: run make-ssl-cert generate-default-snakeoil --force-overwrite Nginx: TODO Apache Here is a basic configuration example for the Apache web server with mod_php . In /etc/apache2/sites-available/shaarli.conf : <VirtualHost *:443> ServerName shaarli.my-domain.org DocumentRoot /absolute/path/to/shaarli/ # Logging # Possible values include: debug, info, notice, warn, error, crit, alert, emerg. LogLevel warn ErrorLog /var/log/apache2/shaarli-error.log CustomLog /var/log/apache2/shaarli-access.log combined # Let's Encrypt SSL configuration (recommended) SSLEngine on SSLCertificateFile /etc/letsencrypt/live/yourdomain.example.com/fullchain.pem SSLCertificateKeyFile /etc/letsencrypt/live/yourdomain.example.com/privkey.pem Include /etc/letsencrypt/options-ssl-apache.conf # Self-signed SSL cert configuration #SSLEngine on #SSLCertificateFile /etc/ssl/certs/ssl-cert-snakeoil.pem #SSLCertificateKeyFile /etc/ssl/private/ssl-cert-snakeoil.key # Optional, log PHP errors, useful for debugging #php_flag log_errors on #php_flag display_errors on #php_value error_reporting 2147483647 #php_value error_log /var/log/apache2/shaarli-php-error.log <Directory /absolute/path/to/shaarli/> #Required for .htaccess support AllowOverride All Order allow,deny Allow from all Options Indexes FollowSymLinks MultiViews #TODO is Indexes/Multiviews required? # Optional - required for playvideos plugin #Header set Content-Security-Policy \"script-src 'self' 'unsafe-inline' https://www.youtube.com https://s.ytimg.com 'unsafe-eval'\" </Directory> </VirtualHost> Enable this configuration with sudo a2ensite shaarli Note: If you use Apache 2.2 or lower, you need mod_version to be installed and enabled. Note: Apache module mod_rewrite must be enabled to use the REST API. Nginx Here is a basic configuration example for the Nginx web server, using the php-fpm PHP FastCGI Process Manager, and Nginx's FastCGI module. Common setup Once Nginx and PHP-FPM are installed, we need to ensure: Nginx and PHP-FPM are running using the same user and group both these user and group have read permissions for Shaarli resources execute permissions for Shaarli directories AND their parent directories On a production server: user:group will likely be http:http , www:www or www-data:www-data files will be located under /var/www , /var/http or /usr/share/nginx On a development server: files may be located in a user's home directory in this case, make sure both Nginx and PHP-FPM are running as the local user/group! For all following configuration examples, this user/group pair will be used: user:group = john:users , which corresponds to the following service configuration: ; /etc/php/php-fpm.conf user = john group = users [...] listen.owner = john listen.group = users # /etc/nginx/nginx.conf user john users; http { [...] } (Optional) Increase the maximum file upload size Some bookmark dumps generated by web browsers can be huge due to the presence of Base64-encoded images and favicons, as well as extra verbosity when nesting links in (sub-)folders. To increase upload size, you will need to modify both nginx and PHP configuration: # /etc/nginx/nginx.conf http { [...] client_max_body_size 10m; [...] } # /etc/php5/fpm/php.ini [...] post_max_size = 10M [...] upload_max_filesize = 10M Minimal WARNING: Use for development only! user john users; worker_processes 1; events { worker_connections 1024; } http { include mime.types; default_type application/octet-stream; keepalive_timeout 20; index index.html index.php; server { listen 80; server_name localhost; root /home/john/web; access_log /var/log/nginx/access.log; error_log /var/log/nginx/error.log; location /shaarli/ { try_files $uri /shaarli/index.php$is_args$args; access_log /var/log/nginx/shaarli.access.log; error_log /var/log/nginx/shaarli.error.log; } location ~ (index)\\.php$ { try_files $uri =404; fastcgi_split_path_info ^(.+\\.php)(/.+)$; fastcgi_pass unix:/var/run/php-fpm/php-fpm.sock; fastcgi_index index.php; include fastcgi.conf; } } } Modular The previous setup is sufficient for development purposes, but has several major caveats: every content that does not match the PHP rule will be sent to client browsers: dotfiles - in our case, .htaccess temporary files, e.g. Vim or Emacs files: index.php~ asset / static resource caching is not optimized if serving several PHP sites, there will be a lot of duplication: location /shaarli/ , location /mysite/ , etc. To solve this, we will split Nginx configuration in several parts, that will be included when needed: # /etc/nginx/deny.conf location ~ /\\. { # deny access to dotfiles access_log off; log_not_found off; deny all; } location ~ ~$ { # deny access to temp editor files, e.g. \"script.php~\" access_log off; log_not_found off; deny all; } # /etc/nginx/php.conf location ~ (index)\\.php$ { # Slim - split URL path into (script_filename, path_info) try_files $uri =404; fastcgi_split_path_info ^(.+\\.php)(/.+)$; # filter and proxy PHP requests to PHP-FPM fastcgi_pass unix:/var/run/php-fpm/php-fpm.sock; fastcgi_index index.php; include fastcgi.conf; } location ~ \\.php$ { # deny access to all other PHP scripts deny all; } # /etc/nginx/static_assets.conf location ~* \\.(?:ico|css|js|gif|jpe?g|png)$ { expires max; add_header Pragma public; add_header Cache-Control \"public, must-revalidate, proxy-revalidate\"; } # /etc/nginx/nginx.conf [...] http { [...] root /home/john/web; access_log /var/log/nginx/access.log; error_log /var/log/nginx/error.log; server { # virtual host for a first domain listen 80; server_name my.first.domain.org; location /shaarli/ { # Slim - rewrite URLs try_files $uri /shaarli/index.php$is_args$args; access_log /var/log/nginx/shaarli.access.log; error_log /var/log/nginx/shaarli.error.log; } location = /shaarli/favicon.ico { # serve the Shaarli favicon from its custom location alias /var/www/shaarli/images/favicon.ico; } include deny.conf; include static_assets.conf; include php.conf; } server { # virtual host for a second domain listen 80; server_name second.domain.com; location /minigal/ { access_log /var/log/nginx/minigal.access.log; error_log /var/log/nginx/minigal.error.log; } include deny.conf; include static_assets.conf; include php.conf; } } Redirect HTTP to HTTPS Assuming you have generated a (self-signed) key and certificate, and they are located under /home/john/ssl/localhost.{key,crt} , it is pretty straightforward to set an HTTP (:80) to HTTPS (:443) redirection to force SSL/TLS usage. # /etc/nginx/nginx.conf [...] http { [...] index index.html index.php; root /home/john/web; access_log /var/log/nginx/access.log; error_log /var/log/nginx/error.log; server { listen 80; server_name localhost; return 301 https://localhost$request_uri; } server { listen 443 ssl; server_name localhost; ssl_certificate /home/john/ssl/localhost.crt; ssl_certificate_key /home/john/ssl/localhost.key; location /shaarli/ { # Slim - rewrite URLs try_files $uri /index.php$is_args$args; access_log /var/log/nginx/shaarli.access.log; error_log /var/log/nginx/shaarli.error.log; } location = /shaarli/favicon.ico { # serve the Shaarli favicon from its custom location alias /var/www/shaarli/images/favicon.ico; } include deny.conf; include static_assets.conf; include php.conf; } } Proxies If Shaarli is served behind a proxy (i.e. there is a proxy server between clients and the web server hosting Shaarli), please refer to the proxy server documentation for proper configuration. In particular, you have to ensure that the following server variables are properly set: X-Forwarded-Proto X-Forwarded-Host X-Forwarded-For See also proxy-related issues. Robots and crawlers Shaarli disallows indexing and crawling of your local documentation pages by search engines, using <meta name=\"robots\"> HTML tags. Your Shaarli instance and other pages you host may still be indexed by various robots on the public Internet. You may want to setup a robots.txt file or other crawler control mechanism on your server. See [1] , [2] and [3] See also Server security Webservers Apache/PHP - error log per VirtualHost (StackOverflow) Apache - PHP: php_value vs php_admin_value and the use of php_flag explained Server-side TLS (Apache) (Mozilla) Nginx Beginner's guide Nginx ngx_http_fastcgi_module Nginx Pitfalls Nginx PHP configuration examples (Karl Blessing) Server-side TLS (Nginx) (Mozilla) How to Create Self-Signed SSL Certificates with OpenSSL How do I create my own Certificate Authority? PHP Travis configuration PHP: Supported versions PHP: Unsupported versions (EOL - End Of Life) PHP 7 Changelog PHP 5 Changelog PHP: Bugs","title":"Server configuration"},{"location":"Server-configuration/#prerequisites","text":"","title":"Prerequisites"},{"location":"Server-configuration/#shaarli","text":"A web server and PHP interpreter module/service have been installed. You have write access to the Shaarli installation directory. The correct read/write permissions have been granted to the web server user and group. Your PHP interpreter is compatible with supported PHP versions: Version Status Shaarli compatibility 7.2 Supported Yes 7.1 Supported Yes 7.0 Supported Yes 5.6 EOL: 2018-12-31 Yes (up to Shaarli 0.10.x) 5.5 EOL: 2016-07-10 Yes 5.4 EOL: 2015-09-14 Yes (up to Shaarli 0.8.x) 5.3 EOL: 2014-08-14 Yes (up to Shaarli 0.8.x) The following PHP extensions are installed on the server: Extension Required? Usage openssl All OpenSSL, HTTPS php-mbstring CentOS, Fedora, RHEL, Windows, some hosting providers multibyte (Unicode) string support php-gd optional required to use thumbnails php-intl optional localized text sorting (e.g. e->\u00e8->f ) php-curl optional using cURL for fetching webpages and thumbnails in a more robust way php-gettext optional Use the translation system in gettext mode (faster)","title":"Shaarli"},{"location":"Server-configuration/#ssltls-configuration","text":"To setup HTTPS / SSL on your webserver (recommended), you must generate a public/private key pair and a certificate , and install, configure and activate the appropriate webserver SSL extension .","title":"SSL/TLS configuration"},{"location":"Server-configuration/#lets-encrypt","text":"Let's Encrypt is a certificate authority that provides free TLS/X.509 certificates via an automated process. Install certbot using the appropriate method described on https://certbot.eff.org/. Location of the certbot program and template configuration files may vary depending on which installation method was used. Change the file paths below accordingly. Here is an easy way to create a signed certificate using certbot , it assumes certbot was installed through APT on a Debian-based distribution: Stop the apache2/nginx service. Run certbot --agree-tos --standalone --preferred-challenges tls-sni --email \"youremail@example.com\" --domain yourdomain.example.com For the Apache webserver, copy /usr/lib/python2.7/dist-packages/certbot_apache/options-ssl-apache.conf to /etc/letsencrypt/options-ssl-apache.conf (paths may vary depending on installation method) For Nginx: TODO Setup your webserver as described below Restart the apache2/nginx service.","title":"Let's Encrypt"},{"location":"Server-configuration/#self-signed-certificates","text":"If you don't want to request a certificate from Let's Encrypt, or are unable to (for example, webserver on a LAN, or domain name not registered in the public DNS system), you can generate a self-signed certificate. This certificate will trigger security warnings in web browsers, unless you add it to the browser's SSL store manually. Apache: run make-ssl-cert generate-default-snakeoil --force-overwrite Nginx: TODO","title":"Self-signed certificates"},{"location":"Server-configuration/#apache","text":"Here is a basic configuration example for the Apache web server with mod_php . In /etc/apache2/sites-available/shaarli.conf : <VirtualHost *:443> ServerName shaarli.my-domain.org DocumentRoot /absolute/path/to/shaarli/ # Logging # Possible values include: debug, info, notice, warn, error, crit, alert, emerg. LogLevel warn ErrorLog /var/log/apache2/shaarli-error.log CustomLog /var/log/apache2/shaarli-access.log combined # Let's Encrypt SSL configuration (recommended) SSLEngine on SSLCertificateFile /etc/letsencrypt/live/yourdomain.example.com/fullchain.pem SSLCertificateKeyFile /etc/letsencrypt/live/yourdomain.example.com/privkey.pem Include /etc/letsencrypt/options-ssl-apache.conf # Self-signed SSL cert configuration #SSLEngine on #SSLCertificateFile /etc/ssl/certs/ssl-cert-snakeoil.pem #SSLCertificateKeyFile /etc/ssl/private/ssl-cert-snakeoil.key # Optional, log PHP errors, useful for debugging #php_flag log_errors on #php_flag display_errors on #php_value error_reporting 2147483647 #php_value error_log /var/log/apache2/shaarli-php-error.log <Directory /absolute/path/to/shaarli/> #Required for .htaccess support AllowOverride All Order allow,deny Allow from all Options Indexes FollowSymLinks MultiViews #TODO is Indexes/Multiviews required? # Optional - required for playvideos plugin #Header set Content-Security-Policy \"script-src 'self' 'unsafe-inline' https://www.youtube.com https://s.ytimg.com 'unsafe-eval'\" </Directory> </VirtualHost> Enable this configuration with sudo a2ensite shaarli Note: If you use Apache 2.2 or lower, you need mod_version to be installed and enabled. Note: Apache module mod_rewrite must be enabled to use the REST API.","title":"Apache"},{"location":"Server-configuration/#nginx","text":"Here is a basic configuration example for the Nginx web server, using the php-fpm PHP FastCGI Process Manager, and Nginx's FastCGI module.","title":"Nginx"},{"location":"Server-configuration/#common-setup","text":"Once Nginx and PHP-FPM are installed, we need to ensure: Nginx and PHP-FPM are running using the same user and group both these user and group have read permissions for Shaarli resources execute permissions for Shaarli directories AND their parent directories On a production server: user:group will likely be http:http , www:www or www-data:www-data files will be located under /var/www , /var/http or /usr/share/nginx On a development server: files may be located in a user's home directory in this case, make sure both Nginx and PHP-FPM are running as the local user/group! For all following configuration examples, this user/group pair will be used: user:group = john:users , which corresponds to the following service configuration: ; /etc/php/php-fpm.conf user = john group = users [...] listen.owner = john listen.group = users # /etc/nginx/nginx.conf user john users; http { [...] }","title":"Common setup"},{"location":"Server-configuration/#optional-increase-the-maximum-file-upload-size","text":"Some bookmark dumps generated by web browsers can be huge due to the presence of Base64-encoded images and favicons, as well as extra verbosity when nesting links in (sub-)folders. To increase upload size, you will need to modify both nginx and PHP configuration: # /etc/nginx/nginx.conf http { [...] client_max_body_size 10m; [...] } # /etc/php5/fpm/php.ini [...] post_max_size = 10M [...] upload_max_filesize = 10M","title":"(Optional) Increase the maximum file upload size"},{"location":"Server-configuration/#minimal","text":"WARNING: Use for development only! user john users; worker_processes 1; events { worker_connections 1024; } http { include mime.types; default_type application/octet-stream; keepalive_timeout 20; index index.html index.php; server { listen 80; server_name localhost; root /home/john/web; access_log /var/log/nginx/access.log; error_log /var/log/nginx/error.log; location /shaarli/ { try_files $uri /shaarli/index.php$is_args$args; access_log /var/log/nginx/shaarli.access.log; error_log /var/log/nginx/shaarli.error.log; } location ~ (index)\\.php$ { try_files $uri =404; fastcgi_split_path_info ^(.+\\.php)(/.+)$; fastcgi_pass unix:/var/run/php-fpm/php-fpm.sock; fastcgi_index index.php; include fastcgi.conf; } } }","title":"Minimal"},{"location":"Server-configuration/#modular","text":"The previous setup is sufficient for development purposes, but has several major caveats: every content that does not match the PHP rule will be sent to client browsers: dotfiles - in our case, .htaccess temporary files, e.g. Vim or Emacs files: index.php~ asset / static resource caching is not optimized if serving several PHP sites, there will be a lot of duplication: location /shaarli/ , location /mysite/ , etc. To solve this, we will split Nginx configuration in several parts, that will be included when needed: # /etc/nginx/deny.conf location ~ /\\. { # deny access to dotfiles access_log off; log_not_found off; deny all; } location ~ ~$ { # deny access to temp editor files, e.g. \"script.php~\" access_log off; log_not_found off; deny all; } # /etc/nginx/php.conf location ~ (index)\\.php$ { # Slim - split URL path into (script_filename, path_info) try_files $uri =404; fastcgi_split_path_info ^(.+\\.php)(/.+)$; # filter and proxy PHP requests to PHP-FPM fastcgi_pass unix:/var/run/php-fpm/php-fpm.sock; fastcgi_index index.php; include fastcgi.conf; } location ~ \\.php$ { # deny access to all other PHP scripts deny all; } # /etc/nginx/static_assets.conf location ~* \\.(?:ico|css|js|gif|jpe?g|png)$ { expires max; add_header Pragma public; add_header Cache-Control \"public, must-revalidate, proxy-revalidate\"; } # /etc/nginx/nginx.conf [...] http { [...] root /home/john/web; access_log /var/log/nginx/access.log; error_log /var/log/nginx/error.log; server { # virtual host for a first domain listen 80; server_name my.first.domain.org; location /shaarli/ { # Slim - rewrite URLs try_files $uri /shaarli/index.php$is_args$args; access_log /var/log/nginx/shaarli.access.log; error_log /var/log/nginx/shaarli.error.log; } location = /shaarli/favicon.ico { # serve the Shaarli favicon from its custom location alias /var/www/shaarli/images/favicon.ico; } include deny.conf; include static_assets.conf; include php.conf; } server { # virtual host for a second domain listen 80; server_name second.domain.com; location /minigal/ { access_log /var/log/nginx/minigal.access.log; error_log /var/log/nginx/minigal.error.log; } include deny.conf; include static_assets.conf; include php.conf; } }","title":"Modular"},{"location":"Server-configuration/#redirect-http-to-https","text":"Assuming you have generated a (self-signed) key and certificate, and they are located under /home/john/ssl/localhost.{key,crt} , it is pretty straightforward to set an HTTP (:80) to HTTPS (:443) redirection to force SSL/TLS usage. # /etc/nginx/nginx.conf [...] http { [...] index index.html index.php; root /home/john/web; access_log /var/log/nginx/access.log; error_log /var/log/nginx/error.log; server { listen 80; server_name localhost; return 301 https://localhost$request_uri; } server { listen 443 ssl; server_name localhost; ssl_certificate /home/john/ssl/localhost.crt; ssl_certificate_key /home/john/ssl/localhost.key; location /shaarli/ { # Slim - rewrite URLs try_files $uri /index.php$is_args$args; access_log /var/log/nginx/shaarli.access.log; error_log /var/log/nginx/shaarli.error.log; } location = /shaarli/favicon.ico { # serve the Shaarli favicon from its custom location alias /var/www/shaarli/images/favicon.ico; } include deny.conf; include static_assets.conf; include php.conf; } }","title":"Redirect HTTP to HTTPS"},{"location":"Server-configuration/#proxies","text":"If Shaarli is served behind a proxy (i.e. there is a proxy server between clients and the web server hosting Shaarli), please refer to the proxy server documentation for proper configuration. In particular, you have to ensure that the following server variables are properly set: X-Forwarded-Proto X-Forwarded-Host X-Forwarded-For See also proxy-related issues.","title":"Proxies"},{"location":"Server-configuration/#robots-and-crawlers","text":"Shaarli disallows indexing and crawling of your local documentation pages by search engines, using <meta name=\"robots\"> HTML tags. Your Shaarli instance and other pages you host may still be indexed by various robots on the public Internet. You may want to setup a robots.txt file or other crawler control mechanism on your server. See [1] , [2] and [3]","title":"Robots and crawlers"},{"location":"Server-configuration/#see-also","text":"Server security","title":"See also"},{"location":"Server-configuration/#webservers","text":"Apache/PHP - error log per VirtualHost (StackOverflow) Apache - PHP: php_value vs php_admin_value and the use of php_flag explained Server-side TLS (Apache) (Mozilla) Nginx Beginner's guide Nginx ngx_http_fastcgi_module Nginx Pitfalls Nginx PHP configuration examples (Karl Blessing) Server-side TLS (Nginx) (Mozilla) How to Create Self-Signed SSL Certificates with OpenSSL How do I create my own Certificate Authority?","title":"Webservers"},{"location":"Server-configuration/#php","text":"Travis configuration PHP: Supported versions PHP: Unsupported versions (EOL - End Of Life) PHP 7 Changelog PHP 5 Changelog PHP: Bugs","title":"PHP"},{"location":"Server-security/","text":"php.ini PHP settings are defined in: a main configuration file, usually found under /etc/php5/php.ini ; some distributions provide different configuration environments, e.g. /etc/php5/php.ini - used when running console scripts /etc/php5/apache2/php.ini - used when a client requests PHP resources from Apache /etc/php5/php-fpm.conf - used when PHP requests are proxied to PHP-FPM additional configuration files/entries, depending on the installed/enabled extensions: /etc/php/conf.d/xdebug.ini Locate .ini files Console environment $ php --ini Configuration File (php.ini) Path: /etc/php Loaded Configuration File: /etc/php/php.ini Scan for additional .ini files in: /etc/php/conf.d Additional .ini files parsed: /etc/php/conf.d/xdebug.ini Server environment create a phpinfo.php script located in a path supported by the web server, e.g. Apache (with user dirs enabled): /home/myself/public_html/phpinfo.php /var/www/test/phpinfo.php make sure the script is readable by the web server user/group (usually, www , www-data or httpd ) access the script from a web browser look at the Loaded Configuration File and Scan this dir for additional .ini files entries <?php phpinfo(); ?> fail2ban fail2ban is an intrusion prevention framework that reads server (Apache, SSH, etc.) and uses iptables profiles to block brute-force attempts: Official website Source code Read Shaarli logs to ban IPs Example configuration: - allow 3 login attempts per IP address - after 3 failures, permanently ban the corresponding IP adddress /etc/fail2ban/jail.local [shaarli-auth] enabled = true port = https,http filter = shaarli-auth logpath = /var/www/path/to/shaarli/data/log.txt maxretry = 3 bantime = -1 /etc/fail2ban/filter.d/shaarli-auth.conf [INCLUDES] before = common.conf [Definition] failregex = \\s-\\s<HOST>\\s-\\sLogin failed for user.*$ ignoreregex = Robots - Restricting search engines and web crawler traffic Creating a robots.txt with the following contents at the root of your Shaarli installation will prevent honest web crawlers from indexing each and every link and Daily page from a Shaarli instance, thus getting rid of a certain amount of unsollicited network traffic. User-agent: * Disallow: / See: http://www.robotstxt.org http://www.robotstxt.org/robotstxt.html http://www.robotstxt.org/meta.html","title":"Server security"},{"location":"Server-security/#phpini","text":"PHP settings are defined in: a main configuration file, usually found under /etc/php5/php.ini ; some distributions provide different configuration environments, e.g. /etc/php5/php.ini - used when running console scripts /etc/php5/apache2/php.ini - used when a client requests PHP resources from Apache /etc/php5/php-fpm.conf - used when PHP requests are proxied to PHP-FPM additional configuration files/entries, depending on the installed/enabled extensions: /etc/php/conf.d/xdebug.ini","title":"php.ini"},{"location":"Server-security/#locate-ini-files","text":"","title":"Locate .ini files"},{"location":"Server-security/#console-environment","text":"$ php --ini Configuration File (php.ini) Path: /etc/php Loaded Configuration File: /etc/php/php.ini Scan for additional .ini files in: /etc/php/conf.d Additional .ini files parsed: /etc/php/conf.d/xdebug.ini","title":"Console environment"},{"location":"Server-security/#server-environment","text":"create a phpinfo.php script located in a path supported by the web server, e.g. Apache (with user dirs enabled): /home/myself/public_html/phpinfo.php /var/www/test/phpinfo.php make sure the script is readable by the web server user/group (usually, www , www-data or httpd ) access the script from a web browser look at the Loaded Configuration File and Scan this dir for additional .ini files entries <?php phpinfo(); ?>","title":"Server environment"},{"location":"Server-security/#fail2ban","text":"fail2ban is an intrusion prevention framework that reads server (Apache, SSH, etc.) and uses iptables profiles to block brute-force attempts: Official website Source code","title":"fail2ban"},{"location":"Server-security/#read-shaarli-logs-to-ban-ips","text":"Example configuration: - allow 3 login attempts per IP address - after 3 failures, permanently ban the corresponding IP adddress /etc/fail2ban/jail.local [shaarli-auth] enabled = true port = https,http filter = shaarli-auth logpath = /var/www/path/to/shaarli/data/log.txt maxretry = 3 bantime = -1 /etc/fail2ban/filter.d/shaarli-auth.conf [INCLUDES] before = common.conf [Definition] failregex = \\s-\\s<HOST>\\s-\\sLogin failed for user.*$ ignoreregex =","title":"Read Shaarli logs to ban IPs"},{"location":"Server-security/#robots-restricting-search-engines-and-web-crawler-traffic","text":"Creating a robots.txt with the following contents at the root of your Shaarli installation will prevent honest web crawlers from indexing each and every link and Daily page from a Shaarli instance, thus getting rid of a certain amount of unsollicited network traffic. User-agent: * Disallow: / See: http://www.robotstxt.org http://www.robotstxt.org/robotstxt.html http://www.robotstxt.org/meta.html","title":"Robots - Restricting search engines and web crawler traffic"},{"location":"Shaarli-configuration/","text":"Foreword Do not edit configuration options in index.php! Your changes would be lost. Once your Shaarli instance is installed, the file data/config.json.php is generated: * it contains all settings in JSON format, and can be edited to customize values * it defines which plugins are enabled * its values override those defined in index.php * it is wrap in a PHP comment to prevent anyone accessing it, regardless of server configuration File and directory permissions The server process running Shaarli must have: read access to the following resources: PHP scripts: index.php , application/*.php , plugins/*.php 3rd party PHP and Javascript libraries: inc/*.php , inc/*.js static assets: CSS stylesheets: inc/*.css images/* RainTPL templates: tpl/*.html read , write and execution access to the following directories: cache - thumbnail cache data - link data store, configuration options pagecache - Atom/RSS feed cache tmp - RainTPL page cache On a Linux distribution: the web server user will likely be www or http (for Apache2) it will be a member of a group of the same name: www:www , http:http to give it access to Shaarli, either: unzip Shaarli in the default web server location (usually /var/www/ ) and set the web server user as the owner put users in the same group as the web server, and set the appropriate access rights if you have a domain / subdomain to serve Shaarli, configure the server accordingly Configuration In data/config.json.php . See also Plugin System . Credentials These settings should not be edited login : Login username. hash : Generated password hash. salt : Password salt. General title : Shaarli's instance title. header_link : Link to the homepage. links_per_page : Number of shaares displayed per page. timezone : See the list of supported timezones . enabled_plugins : List of enabled plugins. default_note_title : Default title of a new note. Security session_protection_disabled : Disable session cookie hijacking protection (not recommended). It might be useful if your IP adress often changes. ban_after : Failed login attempts before being IP banned. ban_duration : IP ban duration in seconds. open_shaarli : Anyone can add a new link while logged out if enabled. trusted_proxies : List of trusted IP which won't be banned after failed login attemps. Useful if Shaarli is behind a reverse proxy. allowed_protocols : List of allowed protocols in shaare URLs or markdown-rendered descriptions. Useful if you want to store javascript: links (bookmarklets) in Shaarli (default: [\"ftp\", \"ftps\", \"magnet\"] ). Resources data_dir : Data directory. datastore : Shaarli's links database file path. history : Shaarli's operation history file path. updates : File path for the ran updates file. log : Log file path. update_check : Last update check file path. raintpl_tpl : Templates directory. raintpl_tmp : Template engine cache directory. thumbnails_cache : Thumbnails cache directory. page_cache : Shaarli's internal cache directory. ban_file : Banned IP file path. Translation language : translation language (also see Translations ) auto (default): The translation language is chosen from the browser locale. It means that the language can be different for 2 different visitors depending on their locale. en : Use the English translation. fr : Use the French translation. mode : auto or php (default): Use the PHP implementation of gettext (slower) gettext : Use PHP builtin gettext extension (faster, but requires php-gettext to be installed and to reload the web server on update) extension : Translation extensions for custom themes or plugins. Must be an associative array: translation domain => translation path . Updates check_updates : Enable or disable update check to the git repository. check_updates_branch : Git branch used to check updates (e.g. stable or master ). check_updates_interval : Look for new version every N seconds (default: every day). Privacy default_private_links : Check the private checkbox by default for every new link. hide_public_links : All links are hidden while logged out. force_login : if hide_public_links and this are set to true , all anonymous users are redirected to the login page. hide_timestamps : Timestamps are hidden. remember_user_default : Default state of the login page's remember me checkbox true : checked by default, false : unchecked by default Feed rss_permalinks : Enable this to redirect RSS links to Shaarli's permalinks instead of shaared URL. show_atom : Display ATOM feed button. Thumbnail enable_thumbnails : Enable or disable thumbnail display. enable_localcache : Enable or disable local cache. Redirector url : Redirector URL, such as anonym.to . encode_url : Enable this if the redirector needs encoded URL to work properly. Configuration file example <?php /* { \"credentials\": { \"login\": \"<login>\", \"hash\": \"<password hash>\", \"salt\": \"<password salt>\" }, \"security\": { \"ban_after\": 4, \"session_protection_disabled\": false, \"ban_duration\": 1800, \"trusted_proxies\": [ \"1.2.3.4\", \"5.6.7.8\" ], \"allowed_protocols\": [ \"ftp\", \"ftps\", \"magnet\" ] }, \"resources\": { \"data_dir\": \"data\", \"config\": \"data\\/config.php\", \"datastore\": \"data\\/datastore.php\", \"ban_file\": \"data\\/ipbans.php\", \"updates\": \"data\\/updates.txt\", \"log\": \"data\\/log.txt\", \"update_check\": \"data\\/lastupdatecheck.txt\", \"raintpl_tmp\": \"tmp\\/\", \"raintpl_tpl\": \"tpl\\/\", \"thumbnails_cache\": \"cache\", \"page_cache\": \"pagecache\" }, \"general\": { \"check_updates\": true, \"rss_permalinks\": true, \"links_per_page\": 20, \"default_private_links\": true, \"enable_thumbnails\": true, \"enable_localcache\": true, \"check_updates_branch\": \"stable\", \"check_updates_interval\": 86400, \"enabled_plugins\": [ \"markdown\", \"wallabag\", \"archiveorg\" ], \"timezone\": \"Europe\\/Paris\", \"title\": \"My Shaarli\", \"header_link\": \"?\" }, \"extras\": { \"show_atom\": false, \"hide_public_links\": false, \"hide_timestamps\": false, \"open_shaarli\": false, \"redirector\": \"http://anonym.to/?\", \"redirector_encode_url\": false }, \"general\": { \"header_link\": \"?\", \"links_per_page\": 20, \"enabled_plugins\": [ \"markdown\", \"wallabag\" ], \"timezone\": \"Europe\\/Paris\", \"title\": \"My Shaarli\" }, \"updates\": { \"check_updates\": true, \"check_updates_branch\": \"stable\", \"check_updates_interval\": 86400 }, \"feed\": { \"rss_permalinks\": true, \"show_atom\": false }, \"privacy\": { \"default_private_links\": true, \"hide_public_links\": false, \"force_login\": false, \"hide_timestamps\": false, \"remember_user_default\": true }, \"thumbnail\": { \"enable_thumbnails\": true, \"enable_localcache\": true }, \"redirector\": { \"url\": \"http://anonym.to/?\", \"encode_url\": false }, \"plugins\": { \"WALLABAG_URL\": \"http://demo.wallabag.org\", \"WALLABAG_VERSION\": \"1\" }, \"translation\": { \"language\": \"fr\", \"mode\": \"php\", \"extensions\": { \"demo\": \"plugins/demo_plugin/languages/\" } } } ?> Additional configuration The playvideos plugin may require that you adapt your server's Content Security Policy configuration to work properly.","title":"Shaarli configuration"},{"location":"Shaarli-configuration/#foreword","text":"Do not edit configuration options in index.php! Your changes would be lost. Once your Shaarli instance is installed, the file data/config.json.php is generated: * it contains all settings in JSON format, and can be edited to customize values * it defines which plugins are enabled * its values override those defined in index.php * it is wrap in a PHP comment to prevent anyone accessing it, regardless of server configuration","title":"Foreword"},{"location":"Shaarli-configuration/#file-and-directory-permissions","text":"The server process running Shaarli must have: read access to the following resources: PHP scripts: index.php , application/*.php , plugins/*.php 3rd party PHP and Javascript libraries: inc/*.php , inc/*.js static assets: CSS stylesheets: inc/*.css images/* RainTPL templates: tpl/*.html read , write and execution access to the following directories: cache - thumbnail cache data - link data store, configuration options pagecache - Atom/RSS feed cache tmp - RainTPL page cache On a Linux distribution: the web server user will likely be www or http (for Apache2) it will be a member of a group of the same name: www:www , http:http to give it access to Shaarli, either: unzip Shaarli in the default web server location (usually /var/www/ ) and set the web server user as the owner put users in the same group as the web server, and set the appropriate access rights if you have a domain / subdomain to serve Shaarli, configure the server accordingly","title":"File and directory permissions"},{"location":"Shaarli-configuration/#configuration","text":"In data/config.json.php . See also Plugin System .","title":"Configuration"},{"location":"Shaarli-configuration/#credentials","text":"These settings should not be edited login : Login username. hash : Generated password hash. salt : Password salt.","title":"Credentials"},{"location":"Shaarli-configuration/#general","text":"title : Shaarli's instance title. header_link : Link to the homepage. links_per_page : Number of shaares displayed per page. timezone : See the list of supported timezones . enabled_plugins : List of enabled plugins. default_note_title : Default title of a new note.","title":"General"},{"location":"Shaarli-configuration/#security","text":"session_protection_disabled : Disable session cookie hijacking protection (not recommended). It might be useful if your IP adress often changes. ban_after : Failed login attempts before being IP banned. ban_duration : IP ban duration in seconds. open_shaarli : Anyone can add a new link while logged out if enabled. trusted_proxies : List of trusted IP which won't be banned after failed login attemps. Useful if Shaarli is behind a reverse proxy. allowed_protocols : List of allowed protocols in shaare URLs or markdown-rendered descriptions. Useful if you want to store javascript: links (bookmarklets) in Shaarli (default: [\"ftp\", \"ftps\", \"magnet\"] ).","title":"Security"},{"location":"Shaarli-configuration/#resources","text":"data_dir : Data directory. datastore : Shaarli's links database file path. history : Shaarli's operation history file path. updates : File path for the ran updates file. log : Log file path. update_check : Last update check file path. raintpl_tpl : Templates directory. raintpl_tmp : Template engine cache directory. thumbnails_cache : Thumbnails cache directory. page_cache : Shaarli's internal cache directory. ban_file : Banned IP file path.","title":"Resources"},{"location":"Shaarli-configuration/#translation","text":"language : translation language (also see Translations ) auto (default): The translation language is chosen from the browser locale. It means that the language can be different for 2 different visitors depending on their locale. en : Use the English translation. fr : Use the French translation. mode : auto or php (default): Use the PHP implementation of gettext (slower) gettext : Use PHP builtin gettext extension (faster, but requires php-gettext to be installed and to reload the web server on update) extension : Translation extensions for custom themes or plugins. Must be an associative array: translation domain => translation path .","title":"Translation"},{"location":"Shaarli-configuration/#updates","text":"check_updates : Enable or disable update check to the git repository. check_updates_branch : Git branch used to check updates (e.g. stable or master ). check_updates_interval : Look for new version every N seconds (default: every day).","title":"Updates"},{"location":"Shaarli-configuration/#privacy","text":"default_private_links : Check the private checkbox by default for every new link. hide_public_links : All links are hidden while logged out. force_login : if hide_public_links and this are set to true , all anonymous users are redirected to the login page. hide_timestamps : Timestamps are hidden. remember_user_default : Default state of the login page's remember me checkbox true : checked by default, false : unchecked by default","title":"Privacy"},{"location":"Shaarli-configuration/#feed","text":"rss_permalinks : Enable this to redirect RSS links to Shaarli's permalinks instead of shaared URL. show_atom : Display ATOM feed button.","title":"Feed"},{"location":"Shaarli-configuration/#thumbnail","text":"enable_thumbnails : Enable or disable thumbnail display. enable_localcache : Enable or disable local cache.","title":"Thumbnail"},{"location":"Shaarli-configuration/#redirector","text":"url : Redirector URL, such as anonym.to . encode_url : Enable this if the redirector needs encoded URL to work properly.","title":"Redirector"},{"location":"Shaarli-configuration/#configuration-file-example","text":"<?php /* { \"credentials\": { \"login\": \"<login>\", \"hash\": \"<password hash>\", \"salt\": \"<password salt>\" }, \"security\": { \"ban_after\": 4, \"session_protection_disabled\": false, \"ban_duration\": 1800, \"trusted_proxies\": [ \"1.2.3.4\", \"5.6.7.8\" ], \"allowed_protocols\": [ \"ftp\", \"ftps\", \"magnet\" ] }, \"resources\": { \"data_dir\": \"data\", \"config\": \"data\\/config.php\", \"datastore\": \"data\\/datastore.php\", \"ban_file\": \"data\\/ipbans.php\", \"updates\": \"data\\/updates.txt\", \"log\": \"data\\/log.txt\", \"update_check\": \"data\\/lastupdatecheck.txt\", \"raintpl_tmp\": \"tmp\\/\", \"raintpl_tpl\": \"tpl\\/\", \"thumbnails_cache\": \"cache\", \"page_cache\": \"pagecache\" }, \"general\": { \"check_updates\": true, \"rss_permalinks\": true, \"links_per_page\": 20, \"default_private_links\": true, \"enable_thumbnails\": true, \"enable_localcache\": true, \"check_updates_branch\": \"stable\", \"check_updates_interval\": 86400, \"enabled_plugins\": [ \"markdown\", \"wallabag\", \"archiveorg\" ], \"timezone\": \"Europe\\/Paris\", \"title\": \"My Shaarli\", \"header_link\": \"?\" }, \"extras\": { \"show_atom\": false, \"hide_public_links\": false, \"hide_timestamps\": false, \"open_shaarli\": false, \"redirector\": \"http://anonym.to/?\", \"redirector_encode_url\": false }, \"general\": { \"header_link\": \"?\", \"links_per_page\": 20, \"enabled_plugins\": [ \"markdown\", \"wallabag\" ], \"timezone\": \"Europe\\/Paris\", \"title\": \"My Shaarli\" }, \"updates\": { \"check_updates\": true, \"check_updates_branch\": \"stable\", \"check_updates_interval\": 86400 }, \"feed\": { \"rss_permalinks\": true, \"show_atom\": false }, \"privacy\": { \"default_private_links\": true, \"hide_public_links\": false, \"force_login\": false, \"hide_timestamps\": false, \"remember_user_default\": true }, \"thumbnail\": { \"enable_thumbnails\": true, \"enable_localcache\": true }, \"redirector\": { \"url\": \"http://anonym.to/?\", \"encode_url\": false }, \"plugins\": { \"WALLABAG_URL\": \"http://demo.wallabag.org\", \"WALLABAG_VERSION\": \"1\" }, \"translation\": { \"language\": \"fr\", \"mode\": \"php\", \"extensions\": { \"demo\": \"plugins/demo_plugin/languages/\" } } } ?>","title":"Configuration file example"},{"location":"Shaarli-configuration/#additional-configuration","text":"The playvideos plugin may require that you adapt your server's Content Security Policy configuration to work properly.","title":"Additional configuration"},{"location":"Sharing-content/","text":"Content posted to Shaarli is separated in items called Shaares . For each Shaare, you can customize the following aspects: URL to link to Title Free-text description Tags Public/private status Adding new Shaares While logged in to your Shaarli, you can add new Shaares in several ways: +Shaare button Bookmarklet Third-party apps and browser addons REST API +Shaare button While logged in to your Shaarli, click the +Shaare button located in the toolbar. Enter the URL of a link you want to share. Click Add link The New Shaare dialog appears, allowing you to fill in the details of your Shaare. The Description, Title, and Tags will help you find your Shaare later using tags or full-text search. You can also check the \u201cPrivate\u201d box so that the link is saved but only visible to you (the logged-in user). Click Save . Bookmarklet The Bookmarklet [ 1 ] is a special browser bookmark you can use to add new content to your Shaarli. This bookmarklet is compatible with Firefox, Opera, Chrome and Safari. To set it up: Access the Tools page from the button in the toolbar. Drag the \u271aShaare link button to your browser's bookmarks bar. Once this is done, you can shaare any URL you are visiting simply by clicking the bookmarklet in your browser! The same New Shaare dialog as above is displayed. Note Websites which enforce Content Security Policy (CSP), such as github.com, disallow usage of bookmarklets. Unfortunately, there is nothing Shaarli can do about it. [ 1 ]\\ [ 2 ]\\ [ 3 ]\\ Note Under Opera, you can't drag'n drop the button: You have to right-click on it and add a bookmark to your personal toolbar. Editing Shaares Any Shaare can edited by clicking its Edit button. Editing a Shaare will not change it's permalink, each permalink always points to the latest revision of a Shaare. Using shaarli as a blog, notepad, pastebin... While adding or editing a link, leave the URL field blank to create a text-only (\"note\") post. This allows you to post any kind of text content, such as blog articles, private or public notes, snippets... There is no character limit! You can access your Shaare from its permalink.","title":"Sharing content"},{"location":"Sharing-content/#adding-new-shaares","text":"While logged in to your Shaarli, you can add new Shaares in several ways: +Shaare button Bookmarklet Third-party apps and browser addons REST API","title":"Adding new Shaares"},{"location":"Sharing-content/#shaare-button","text":"While logged in to your Shaarli, click the +Shaare button located in the toolbar. Enter the URL of a link you want to share. Click Add link The New Shaare dialog appears, allowing you to fill in the details of your Shaare. The Description, Title, and Tags will help you find your Shaare later using tags or full-text search. You can also check the \u201cPrivate\u201d box so that the link is saved but only visible to you (the logged-in user). Click Save .","title":"+Shaare button"},{"location":"Sharing-content/#bookmarklet","text":"The Bookmarklet [ 1 ] is a special browser bookmark you can use to add new content to your Shaarli. This bookmarklet is compatible with Firefox, Opera, Chrome and Safari. To set it up: Access the Tools page from the button in the toolbar. Drag the \u271aShaare link button to your browser's bookmarks bar. Once this is done, you can shaare any URL you are visiting simply by clicking the bookmarklet in your browser! The same New Shaare dialog as above is displayed. Note Websites which enforce Content Security Policy (CSP), such as github.com, disallow usage of bookmarklets. Unfortunately, there is nothing Shaarli can do about it. [ 1 ]\\ [ 2 ]\\ [ 3 ]\\ Note Under Opera, you can't drag'n drop the button: You have to right-click on it and add a bookmark to your personal toolbar.","title":"Bookmarklet"},{"location":"Sharing-content/#editing-shaares","text":"Any Shaare can edited by clicking its Edit button. Editing a Shaare will not change it's permalink, each permalink always points to the latest revision of a Shaare.","title":"Editing Shaares"},{"location":"Sharing-content/#using-shaarli-as-a-blog-notepad-pastebin","text":"While adding or editing a link, leave the URL field blank to create a text-only (\"note\") post. This allows you to post any kind of text content, such as blog articles, private or public notes, snippets... There is no character limit! You can access your Shaare from its permalink.","title":"Using shaarli as a blog, notepad, pastebin..."},{"location":"Static-analysis/","text":"WIP This topic is currently being discussed here: Fix coding style (static analysis) (#95) Continuous Integration tools & features (#130) Usage Static analysis tools can be installed with Composer, and used through Shaarli's Makefile . For an overview of the available features, see: Code quality: Makefile to run static code checkers (#124) Run PHPCS against different coding standards (#276)","title":"Static analysis"},{"location":"Static-analysis/#wip","text":"This topic is currently being discussed here: Fix coding style (static analysis) (#95) Continuous Integration tools & features (#130)","title":"WIP"},{"location":"Static-analysis/#usage","text":"Static analysis tools can be installed with Composer, and used through Shaarli's Makefile . For an overview of the available features, see: Code quality: Makefile to run static code checkers (#124) Run PHPCS against different coding standards (#276)","title":"Usage"},{"location":"Theming/","text":"Foreword There are two ways of customizing how Shaarli looks: by using a custom CSS to override Shaarli's CSS by using a full theme that provides its own RainTPL templates, CSS and Javascript resources Custom CSS Shaarli's appearance can be modified by adding CSS rules to: Shaarli < v0.9.0 : inc/user.css Shaarli >= v0.9.0 : data/user.css This file allows overriding rules defined in the template CSS files (only add changed rules), or define a whole new theme. Note : Do not edit tpl/default/css/shaarli.css ! Your changes would be overridden when updating Shaarli. See also Download CSS styles from an OPML list Themes Installation: find a theme you'd like to install copy or clone the theme folder under tpl/<a_sweet_theme> enable the theme: Shaarli < v0.9.0 : edit data/config.json.php and set the value of raintpl_tpl to the new theme name: \"raintpl_tpl\": \"tpl\\/my-template\\/\" Shaarli >= v0.9.0 : select the theme through the Tools page Community CSS & themes Custom CSS mrjovanovic/serious-theme-shaarli - A serious theme for Shaarli shaarli/shaarli-themes Themes AkibaTech/Shaarli Superhero Theme - A template/theme for Shaarli alexisju/albinomouse-template - A full template for Shaarli ArthurHoaro/shaarli-launch - Customizable Shaarli theme dhoko/ShaarliTemplate - A template/theme for Shaarli kalvn/shaarli-blocks - A template/theme for Shaarli kalvn/Shaarli-Material - A theme (template) based on Google's Material Design for Shaarli, the superfast delicious clone ManufacturaInd/shaarli-2004licious-theme - A template/theme as a humble homage to the early looks of the del.icio.us site Shaarli forks misterair/Limonade - A fork of (legacy) Shaarli with a new template vivienhaese/shaarlitheme - A Shaarli fork meant to be run in an openshift instance Example installation: AlbinoMouse theme With the following configuration: Apache 2 / PHP 5.6 user sites are enabled, e.g. /home/user/public_html/somedir is served as http://localhost/~user/somedir http is the name of the Apache user $ cd ~/public_html # clone repositories $ git clone https://github.com/shaarli/Shaarli.git shaarli $ pushd shaarli/tpl $ git clone https://github.com/alexisju/albinomouse-template.git $ popd # set access rights for Apache $ chgrp -R http shaarli $ chmod g+rwx shaarli shaarli/cache shaarli/data shaarli/pagecache shaarli/tmp Get config written: - go to the freshly installed site - fill the install form - log in to Shaarli Edit Shaarli's configuration : # the file should be owned by Apache, thus not writeable => sudo $ sudo sed -i s=tpl=tpl/albinomouse-template=g shaarli/data/config.php","title":"Theming"},{"location":"Theming/#foreword","text":"There are two ways of customizing how Shaarli looks: by using a custom CSS to override Shaarli's CSS by using a full theme that provides its own RainTPL templates, CSS and Javascript resources","title":"Foreword"},{"location":"Theming/#custom-css","text":"Shaarli's appearance can be modified by adding CSS rules to: Shaarli < v0.9.0 : inc/user.css Shaarli >= v0.9.0 : data/user.css This file allows overriding rules defined in the template CSS files (only add changed rules), or define a whole new theme. Note : Do not edit tpl/default/css/shaarli.css ! Your changes would be overridden when updating Shaarli. See also Download CSS styles from an OPML list","title":"Custom CSS"},{"location":"Theming/#themes","text":"Installation: find a theme you'd like to install copy or clone the theme folder under tpl/<a_sweet_theme> enable the theme: Shaarli < v0.9.0 : edit data/config.json.php and set the value of raintpl_tpl to the new theme name: \"raintpl_tpl\": \"tpl\\/my-template\\/\" Shaarli >= v0.9.0 : select the theme through the Tools page","title":"Themes"},{"location":"Theming/#community-css-themes","text":"","title":"Community CSS &amp; themes"},{"location":"Theming/#custom-css_1","text":"mrjovanovic/serious-theme-shaarli - A serious theme for Shaarli shaarli/shaarli-themes","title":"Custom CSS"},{"location":"Theming/#themes_1","text":"AkibaTech/Shaarli Superhero Theme - A template/theme for Shaarli alexisju/albinomouse-template - A full template for Shaarli ArthurHoaro/shaarli-launch - Customizable Shaarli theme dhoko/ShaarliTemplate - A template/theme for Shaarli kalvn/shaarli-blocks - A template/theme for Shaarli kalvn/Shaarli-Material - A theme (template) based on Google's Material Design for Shaarli, the superfast delicious clone ManufacturaInd/shaarli-2004licious-theme - A template/theme as a humble homage to the early looks of the del.icio.us site","title":"Themes"},{"location":"Theming/#shaarli-forks","text":"misterair/Limonade - A fork of (legacy) Shaarli with a new template vivienhaese/shaarlitheme - A Shaarli fork meant to be run in an openshift instance","title":"Shaarli forks"},{"location":"Theming/#example-installation-albinomouse-theme","text":"With the following configuration: Apache 2 / PHP 5.6 user sites are enabled, e.g. /home/user/public_html/somedir is served as http://localhost/~user/somedir http is the name of the Apache user $ cd ~/public_html # clone repositories $ git clone https://github.com/shaarli/Shaarli.git shaarli $ pushd shaarli/tpl $ git clone https://github.com/alexisju/albinomouse-template.git $ popd # set access rights for Apache $ chgrp -R http shaarli $ chmod g+rwx shaarli shaarli/cache shaarli/data shaarli/pagecache shaarli/tmp Get config written: - go to the freshly installed site - fill the install form - log in to Shaarli Edit Shaarli's configuration : # the file should be owned by Apache, thus not writeable => sudo $ sudo sed -i s=tpl=tpl/albinomouse-template=g shaarli/data/config.php","title":"Example installation: AlbinoMouse theme"},{"location":"Translations/","text":"Translations Shaarli supports gettext translations since >= v0.9.2 . Note that only the default theme supports translations. Contributing We encourage the community to contribute to Shaarli's translation either by improving existing translations or submitting a new language. Contributing to the translation does not require development skill. Please submit a pull request with the .po file updated/created. Note that the compiled file ( .mo ) is not stored on the repository, and is generated during the release process. How to First, install Poedit tool. Poedit will extract strings to translate from the PHP source code. Important : due to the usage of a template engine, it's important to generate PHP cache files to extract every translatable string. You can either use this script (recommended) or visit every template page in your browser to generate cache files, while logged in. Here is a list : http://<replace_domain>/ http://<replace_domain>/?nonope http://<replace_domain>/?do=addlink http://<replace_domain>/?do=changepasswd http://<replace_domain>/?do=changetag http://<replace_domain>/?do=configure http://<replace_domain>/?do=tools http://<replace_domain>/?do=daily http://<replace_domain>/?post http://<replace_domain>/?do=export http://<replace_domain>/?do=import http://<replace_domain>/?do=login http://<replace_domain>/?do=picwall http://<replace_domain>/?do=pluginadmin http://<replace_domain>/?do=tagcloud http://<replace_domain>/?do=taglist Improve existing translation In Poedit, click on \"Edit a Translation\", and from Shaarli's directory open inc/languages/<lang>/LC_MESSAGES/shaarli.po . The existing list of translatable strings should have been loaded, then click on the \"Update\" button. You can start editing the translation. Save when you're done, then you can submit a pull request containing the updated shaarli.po . Add a new language Open Poedit and select \"Create New Translation\", then from Shaarli's directory open inc/languages/<lang>/LC_MESSAGES/shaarli.po . Then select the language you want to create. Click on File > Save as... , and save your file in <shaarli directory>/inc/language/<new language>/LC_MESSAGES/shaarli.po . <new language> here should be the language code respecting the ISO 3166-1 alpha-2 format in lowercase (e.g. de for German). Then click on the \"Update\" button, and you can start to translate every available string. Save when you're done, then you can submit a pull request containing the new shaarli.po . Theme translations Theme translation extensions are loaded automatically if they're present. As a theme developer, all you have to do is to add the .po and .mo compiled file like this: tpl/<theme name>/language/<lang>/LC_MESSAGES/<theme name>.po tpl/<theme name>/language/<lang>/LC_MESSAGES/<theme name>.mo Where <lang> is the ISO 3166-1 alpha-2 language code. Read the following section \"Extend Shaarli's translation\" to learn how to generate those files. Extend Shaarli's translation If you're writing a custom theme, or a non official plugin, you might want to use the translation system, but you won't be able to able to override Shaarli's translation. However, you can add your own translation domain which extends the main translation list. Note that you can find a live example of translation extension in the demo_plugin . First, create your translation files tree directory: <your_module>/languages/<ISO 3166-1 alpha-2 language code>/LC_MESSAGES/ Your .po files must be named like your domain. E.g. if your translation domain is my_theme , then your file will be my_theme.po . Users have to register your extension in their configuration with the parameter translation.extensions.<domain>: <translation files path> . Example: if (! $conf->exists('translation.extensions.my_theme')) { $conf->set('translation.extensions.my_theme', '<your_module>/languages/'); $conf->write(true); } Note that the page needs to be reloaded after the registration. It is then recommended to create a custom translation function which will call the t() function with your domain. For example : function my_theme_t($text, $nText = '', $nb = 1) { return t($text, $nText, $nb, 'my_theme'); // the last parameter is your translation domain. } All strings which can be translated should be processed through your function: my_theme_t('Comment'); my_theme_t('Comment', 'Comments', 2); Or in templates: {'Comment'|my_theme_t} {function=\"my_theme_t('Comment', 'Comments', 2)\"} Note than in template, you need to visit your page at least once to generate a cache file. When you're done, open Poedit and load translation strings from sources: File > New Choose your language Save your PO file in <your_module>/languages/<language code>/LC_MESSAGES/my_theme.po . Go to Catalog > Properties... Fill the Translation Properties tab Add your source path in the Sources Paths tab In the Sources Keywords tab uncheck \"Also use default keywords\" and add the following lines: my_theme_t my_theme_t:1,2 Click on the \"Update\" button and you're free to start your translations!","title":"Translations"},{"location":"Translations/#translations","text":"Shaarli supports gettext translations since >= v0.9.2 . Note that only the default theme supports translations.","title":"Translations"},{"location":"Translations/#contributing","text":"We encourage the community to contribute to Shaarli's translation either by improving existing translations or submitting a new language. Contributing to the translation does not require development skill. Please submit a pull request with the .po file updated/created. Note that the compiled file ( .mo ) is not stored on the repository, and is generated during the release process.","title":"Contributing"},{"location":"Translations/#how-to","text":"First, install Poedit tool. Poedit will extract strings to translate from the PHP source code. Important : due to the usage of a template engine, it's important to generate PHP cache files to extract every translatable string. You can either use this script (recommended) or visit every template page in your browser to generate cache files, while logged in. Here is a list : http://<replace_domain>/ http://<replace_domain>/?nonope http://<replace_domain>/?do=addlink http://<replace_domain>/?do=changepasswd http://<replace_domain>/?do=changetag http://<replace_domain>/?do=configure http://<replace_domain>/?do=tools http://<replace_domain>/?do=daily http://<replace_domain>/?post http://<replace_domain>/?do=export http://<replace_domain>/?do=import http://<replace_domain>/?do=login http://<replace_domain>/?do=picwall http://<replace_domain>/?do=pluginadmin http://<replace_domain>/?do=tagcloud http://<replace_domain>/?do=taglist","title":"How to"},{"location":"Translations/#improve-existing-translation","text":"In Poedit, click on \"Edit a Translation\", and from Shaarli's directory open inc/languages/<lang>/LC_MESSAGES/shaarli.po . The existing list of translatable strings should have been loaded, then click on the \"Update\" button. You can start editing the translation. Save when you're done, then you can submit a pull request containing the updated shaarli.po .","title":"Improve existing translation"},{"location":"Translations/#add-a-new-language","text":"Open Poedit and select \"Create New Translation\", then from Shaarli's directory open inc/languages/<lang>/LC_MESSAGES/shaarli.po . Then select the language you want to create. Click on File > Save as... , and save your file in <shaarli directory>/inc/language/<new language>/LC_MESSAGES/shaarli.po . <new language> here should be the language code respecting the ISO 3166-1 alpha-2 format in lowercase (e.g. de for German). Then click on the \"Update\" button, and you can start to translate every available string. Save when you're done, then you can submit a pull request containing the new shaarli.po .","title":"Add a new language"},{"location":"Translations/#theme-translations","text":"Theme translation extensions are loaded automatically if they're present. As a theme developer, all you have to do is to add the .po and .mo compiled file like this: tpl/<theme name>/language/<lang>/LC_MESSAGES/<theme name>.po tpl/<theme name>/language/<lang>/LC_MESSAGES/<theme name>.mo Where <lang> is the ISO 3166-1 alpha-2 language code. Read the following section \"Extend Shaarli's translation\" to learn how to generate those files.","title":"Theme translations"},{"location":"Translations/#extend-shaarlis-translation","text":"If you're writing a custom theme, or a non official plugin, you might want to use the translation system, but you won't be able to able to override Shaarli's translation. However, you can add your own translation domain which extends the main translation list. Note that you can find a live example of translation extension in the demo_plugin . First, create your translation files tree directory: <your_module>/languages/<ISO 3166-1 alpha-2 language code>/LC_MESSAGES/ Your .po files must be named like your domain. E.g. if your translation domain is my_theme , then your file will be my_theme.po . Users have to register your extension in their configuration with the parameter translation.extensions.<domain>: <translation files path> . Example: if (! $conf->exists('translation.extensions.my_theme')) { $conf->set('translation.extensions.my_theme', '<your_module>/languages/'); $conf->write(true); } Note that the page needs to be reloaded after the registration. It is then recommended to create a custom translation function which will call the t() function with your domain. For example : function my_theme_t($text, $nText = '', $nb = 1) { return t($text, $nText, $nb, 'my_theme'); // the last parameter is your translation domain. } All strings which can be translated should be processed through your function: my_theme_t('Comment'); my_theme_t('Comment', 'Comments', 2); Or in templates: {'Comment'|my_theme_t} {function=\"my_theme_t('Comment', 'Comments', 2)\"} Note than in template, you need to visit your page at least once to generate a cache file. When you're done, open Poedit and load translation strings from sources: File > New Choose your language Save your PO file in <your_module>/languages/<language code>/LC_MESSAGES/my_theme.po . Go to Catalog > Properties... Fill the Translation Properties tab Add your source path in the Sources Paths tab In the Sources Keywords tab uncheck \"Also use default keywords\" and add the following lines: my_theme_t my_theme_t:1,2 Click on the \"Update\" button and you're free to start your translations!","title":"Extend Shaarli's translation"},{"location":"Troubleshooting/","text":"Troubleshooting Browser Redirection issues (HTTP Referer) Depending on its configuration and installed plugins, the browser may remove or alter (spoof) HTTP referers, thus preventing Shaarli from properly redirecting between pages. See: HTTP referer (Wikipedia) Improve online privacy by controlling referrer information Better security, privacy and anonymity in Firefox Firefox HTTP Referer options HTTP settings are available by browsing about:config , here are the available settings and their values. network.http.sendRefererHeader - determines when to send the Referer HTTP header 0 : Never send the referring URL not recommended, may break some sites 1 : Send only on clicked links 2 (default): Send for links and images network.http.referer.XOriginPolicy - Cross-domain origin policy 0 (default): Always send 1 : Send if base domains match 2 : Send if hosts match network.http.referer.spoofSource - Referer spoofing (~faking) false (default): real referer true : spoof referer (use target URI as referer) known to break some functionality in Shaarli network.http.referer.trimmingPolicy - trim the URI not to send a full Referer 0 : (default): send full URI 1 : scheme+host+port+path 2 : scheme+host+port Firefox, localhost and redirections localhost is not a proper Fully Qualified Domain Name (FQDN); if Firefox has been set up to spoof referers, or only accept requests from the same base domain/host, Shaarli redirections will not work properly. To solve this, assign a local domain to your host, e.g. 127.0.0.1 localhost desktop localhost.lan ::1 localhost desktop localhost.lan and browse Shaarli at http://localhost.lan/. Related threads: - What is localhost.localdomain for? - Stop returning to the first page after editing a bookmark from another page Login I forgot my password! Delete the file data/config.json.php and display the page again. You will be asked for a new login/password. I'm locked out - Login bruteforce protection Login form is protected against brute force attacks: 4 failed logins will ban the IP address from login for 30 minutes. Banned IPs can still browse links. To remove the current IP bans, delete the file data/ipbans.php List of all login attempts The file data/log.txt shows all logins (successful or failed) and bans/lifted bans. Search for failed in this file to look for unauthorized login attempts. Hosting problems Old PHP versions On free.fr : free.fr now supports php 5.6.x( link ) and so support now the tag autocompletion but you have to do the following. At the root of your webspace create a sessions directory and a .htaccess file containing: <IfDefine Free> php56 1 </IfDefine> If you have an error such as: Parse error: syntax error, unexpected '=', expecting '(' in /links/index.php on line xxx , it means that your host is using php4, not php5. Shaarli requires php 5.1. Try changing the file extension to .php5 On 1and1 : If you add the link from the page (and not from the bookmarklet), Shaarli will no be able to get the title of the page. You will have to enter it manually. (Because they have disabled the ability to download a file through HTTP). If you have the error Warning: file_get_contents() [function.file-get-contents]: URL file-access is disabled in the server configuration in /\u2026/index.php on line xxx , it means that your host has disabled the ability to fetch a file by HTTP in the php config (Typically in 1and1 hosting). Bad host. Change host. Or comment the following lines: //list($status,$headers,$data) = getHTTP($url,4); // Short timeout to keep the application responsive. // FIXME: Decode charset according to charset specified in either 1) HTTP response headers or 2) <head> in html //if (strpos($status,'200 OK')) $title=html_extract_title($data); On hosts which forbid outgoing HTTP requests (such as free.fr), some thumbnails will not work. On lost-oasis , RSS doesn't work correctly, because of this message at the begining of the RSS/ATOM feed : <? // tout ce qui est charge ici (generalement des includes et require) est charge en permanence. ?> . To fix this, remove this message from php-include/prepend.php Dates are not properly formatted Shaarli tries to sniff the language of the browser (using HTTP_ACCEPT_LANGUAGE headers) and choose a date format accordingly. But Shaarli can only use the date formats (and more generally speaking, the locales) provided by the webserver. So even if you have a browser in French, you may end up with dates in US format (it's the case on sebsauvage.net :-( ) My session expires! I can't stay logged in This can be caused by several things: Your php installation may not have a proper directory setup for session files. (eg. on Free.fr you need to create a session directory on the root of your website.) You may need to create the session directory of set it up. Most hosts regularly clean the temporary and session directories. Your host may be cleaning those directories too aggressively (eg.OVH hosts), forcing an expire of the session. You may want to set the session directory in your web root. (eg. Create the sessions subdirectory and add ini_set('session.save_path', $_SERVER['DOCUMENT_ROOT'].'/../sessions'); . Make sure this directory is not browsable !) If your IP address changes during surfing, Shaarli will force expire your session for security reasons (to prevent session cookie hijacking). This can happen when surfing from WiFi or 3G (you may have switched WiFi/3G access point), or in some corporate/university proxies which use load balancing (and may have proxies with several external IP addresses). Some browser addons may interfer with HTTP headers (ipfuck/ipflood/GreaseMonkey\u2026). Try disabling those. You may be using OperaTurbo or OperaMini, which use their own proxies which may change from time to time. If you have another application on the same webserver where Shaarli is installed, these application may forcefully expire php sessions. Sessions do not seem to work correctly on your server Follow the instructions in the error message. Make sure you are accessing shaarli via a direct IP address or a proper hostname. If you have no dots in the hostname (e.g. localhost or http://my-webserver/shaarli/ ), some browsers will not store cookies at all (this respects the HTTP cookie specification ).","title":"Troubleshooting"},{"location":"Troubleshooting/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"Troubleshooting/#browser","text":"","title":"Browser"},{"location":"Troubleshooting/#redirection-issues-http-referer","text":"Depending on its configuration and installed plugins, the browser may remove or alter (spoof) HTTP referers, thus preventing Shaarli from properly redirecting between pages. See: HTTP referer (Wikipedia) Improve online privacy by controlling referrer information Better security, privacy and anonymity in Firefox","title":"Redirection issues (HTTP Referer)"},{"location":"Troubleshooting/#firefox-http-referer-options","text":"HTTP settings are available by browsing about:config , here are the available settings and their values. network.http.sendRefererHeader - determines when to send the Referer HTTP header 0 : Never send the referring URL not recommended, may break some sites 1 : Send only on clicked links 2 (default): Send for links and images network.http.referer.XOriginPolicy - Cross-domain origin policy 0 (default): Always send 1 : Send if base domains match 2 : Send if hosts match network.http.referer.spoofSource - Referer spoofing (~faking) false (default): real referer true : spoof referer (use target URI as referer) known to break some functionality in Shaarli network.http.referer.trimmingPolicy - trim the URI not to send a full Referer 0 : (default): send full URI 1 : scheme+host+port+path 2 : scheme+host+port","title":"Firefox HTTP Referer options"},{"location":"Troubleshooting/#firefox-localhost-and-redirections","text":"localhost is not a proper Fully Qualified Domain Name (FQDN); if Firefox has been set up to spoof referers, or only accept requests from the same base domain/host, Shaarli redirections will not work properly. To solve this, assign a local domain to your host, e.g. 127.0.0.1 localhost desktop localhost.lan ::1 localhost desktop localhost.lan and browse Shaarli at http://localhost.lan/. Related threads: - What is localhost.localdomain for? - Stop returning to the first page after editing a bookmark from another page","title":"Firefox, localhost and redirections"},{"location":"Troubleshooting/#login","text":"","title":"Login"},{"location":"Troubleshooting/#i-forgot-my-password","text":"Delete the file data/config.json.php and display the page again. You will be asked for a new login/password.","title":"I forgot my password!"},{"location":"Troubleshooting/#im-locked-out-login-bruteforce-protection","text":"Login form is protected against brute force attacks: 4 failed logins will ban the IP address from login for 30 minutes. Banned IPs can still browse links. To remove the current IP bans, delete the file data/ipbans.php","title":"I'm locked out - Login bruteforce protection"},{"location":"Troubleshooting/#list-of-all-login-attempts","text":"The file data/log.txt shows all logins (successful or failed) and bans/lifted bans. Search for failed in this file to look for unauthorized login attempts.","title":"List of all login attempts"},{"location":"Troubleshooting/#hosting-problems","text":"","title":"Hosting problems"},{"location":"Troubleshooting/#old-php-versions","text":"On free.fr : free.fr now supports php 5.6.x( link ) and so support now the tag autocompletion but you have to do the following. At the root of your webspace create a sessions directory and a .htaccess file containing: <IfDefine Free> php56 1 </IfDefine> If you have an error such as: Parse error: syntax error, unexpected '=', expecting '(' in /links/index.php on line xxx , it means that your host is using php4, not php5. Shaarli requires php 5.1. Try changing the file extension to .php5 On 1and1 : If you add the link from the page (and not from the bookmarklet), Shaarli will no be able to get the title of the page. You will have to enter it manually. (Because they have disabled the ability to download a file through HTTP). If you have the error Warning: file_get_contents() [function.file-get-contents]: URL file-access is disabled in the server configuration in /\u2026/index.php on line xxx , it means that your host has disabled the ability to fetch a file by HTTP in the php config (Typically in 1and1 hosting). Bad host. Change host. Or comment the following lines: //list($status,$headers,$data) = getHTTP($url,4); // Short timeout to keep the application responsive. // FIXME: Decode charset according to charset specified in either 1) HTTP response headers or 2) <head> in html //if (strpos($status,'200 OK')) $title=html_extract_title($data); On hosts which forbid outgoing HTTP requests (such as free.fr), some thumbnails will not work. On lost-oasis , RSS doesn't work correctly, because of this message at the begining of the RSS/ATOM feed : <? // tout ce qui est charge ici (generalement des includes et require) est charge en permanence. ?> . To fix this, remove this message from php-include/prepend.php","title":"Old PHP versions"},{"location":"Troubleshooting/#dates-are-not-properly-formatted","text":"Shaarli tries to sniff the language of the browser (using HTTP_ACCEPT_LANGUAGE headers) and choose a date format accordingly. But Shaarli can only use the date formats (and more generally speaking, the locales) provided by the webserver. So even if you have a browser in French, you may end up with dates in US format (it's the case on sebsauvage.net :-( )","title":"Dates are not properly formatted"},{"location":"Troubleshooting/#my-session-expires-i-cant-stay-logged-in","text":"This can be caused by several things: Your php installation may not have a proper directory setup for session files. (eg. on Free.fr you need to create a session directory on the root of your website.) You may need to create the session directory of set it up. Most hosts regularly clean the temporary and session directories. Your host may be cleaning those directories too aggressively (eg.OVH hosts), forcing an expire of the session. You may want to set the session directory in your web root. (eg. Create the sessions subdirectory and add ini_set('session.save_path', $_SERVER['DOCUMENT_ROOT'].'/../sessions'); . Make sure this directory is not browsable !) If your IP address changes during surfing, Shaarli will force expire your session for security reasons (to prevent session cookie hijacking). This can happen when surfing from WiFi or 3G (you may have switched WiFi/3G access point), or in some corporate/university proxies which use load balancing (and may have proxies with several external IP addresses). Some browser addons may interfer with HTTP headers (ipfuck/ipflood/GreaseMonkey\u2026). Try disabling those. You may be using OperaTurbo or OperaMini, which use their own proxies which may change from time to time. If you have another application on the same webserver where Shaarli is installed, these application may forcefully expire php sessions.","title":"My session expires! I can't stay logged in"},{"location":"Troubleshooting/#sessions-do-not-seem-to-work-correctly-on-your-server","text":"Follow the instructions in the error message. Make sure you are accessing shaarli via a direct IP address or a proper hostname. If you have no dots in the hostname (e.g. localhost or http://my-webserver/shaarli/ ), some browsers will not store cookies at all (this respects the HTTP cookie specification ).","title":"Sessions do not seem to work correctly on your server"},{"location":"Unit-tests-Docker/","text":"Running tests inside Docker containers Read first: Docker 101 Docker resources Unit tests Docker test images Test Dockerfiles are located under tests/docker/<distribution>/Dockerfile , and can be used to build Docker images to run Shaarli test suites under common Linux environments. Dockerfiles are provided for the following environments: alpine36 - Alpine 3.6 debian8 - Debian 8 Jessie (oldstable) debian9 - Debian 9 Stretch (stable) ubuntu16 - Ubuntu 16.04 Xenial Xerus (LTS) What's behind the curtains: each image provides: a base Linux OS Shaarli PHP dependencies (OS packages) test PHP dependencies (OS packages) Composer the local workspace is mapped to the container's /shaarli/ directory, the files are rsync'd so tests are run using a standard Linux user account (running tests as root would bypass permission checks and may hide issues) the tests are run inside the container. Building test images # build the Debian 9 Docker image $ cd /path/to/shaarli $ cd tests/docker/debian9 $ docker build -t shaarli-test:debian9 . Running tests $ cd /path/to/shaarli # install/update 3rd-party test dependencies $ composer install --prefer-dist # run tests using the freshly built image $ docker run -v $PWD:/shaarli shaarli-test:debian9 docker_test # run the full test campaign $ docker run -v $PWD:/shaarli shaarli-test:debian9 docker_all_tests","title":"Unit tests inside Docker"},{"location":"Unit-tests-Docker/#running-tests-inside-docker-containers","text":"Read first: Docker 101 Docker resources Unit tests","title":"Running tests inside Docker containers"},{"location":"Unit-tests-Docker/#docker-test-images","text":"Test Dockerfiles are located under tests/docker/<distribution>/Dockerfile , and can be used to build Docker images to run Shaarli test suites under common Linux environments. Dockerfiles are provided for the following environments: alpine36 - Alpine 3.6 debian8 - Debian 8 Jessie (oldstable) debian9 - Debian 9 Stretch (stable) ubuntu16 - Ubuntu 16.04 Xenial Xerus (LTS) What's behind the curtains: each image provides: a base Linux OS Shaarli PHP dependencies (OS packages) test PHP dependencies (OS packages) Composer the local workspace is mapped to the container's /shaarli/ directory, the files are rsync'd so tests are run using a standard Linux user account (running tests as root would bypass permission checks and may hide issues) the tests are run inside the container.","title":"Docker test images"},{"location":"Unit-tests-Docker/#building-test-images","text":"# build the Debian 9 Docker image $ cd /path/to/shaarli $ cd tests/docker/debian9 $ docker build -t shaarli-test:debian9 .","title":"Building test images"},{"location":"Unit-tests-Docker/#running-tests","text":"$ cd /path/to/shaarli # install/update 3rd-party test dependencies $ composer install --prefer-dist # run tests using the freshly built image $ docker run -v $PWD:/shaarli shaarli-test:debian9 docker_test # run the full test campaign $ docker run -v $PWD:/shaarli shaarli-test:debian9 docker_all_tests","title":"Running tests"},{"location":"Unit-tests/","text":"Setup your environment for tests The framework used is PHPUnit ; it can be installed with Composer , which is a dependency management tool. Install composer You can either use: a system-wide version, e.g. installed through your distro's package manager a local version, downloadable here . # system-wide version $ composer install $ composer update # local version $ php composer.phar self-update $ php composer.phar install $ php composer.phar update Install Shaarli dev dependencies $ cd /path/to/shaarli $ composer update Install and enable Xdebug to generate PHPUnit coverage reports See http://xdebug.org/docs/install For Debian-based distros: $ aptitude install php5-xdebug For ArchLinux: $ pacman -S xdebug Then add the following line to /etc/php/php.ini : zend_extension=xdebug.so Run unit tests Successful test suite: $ make test ------- PHPUNIT ------- PHPUnit 4.6.9 by Sebastian Bergmann and contributors. Configuration read from /home/virtualtam/public_html/shaarli/phpunit.xml .................................... Time: 759 ms, Memory: 8.25Mb OK (36 tests, 65 assertions) Test suite with failures and errors: $ make test ------- PHPUNIT ------- PHPUnit 4.6.9 by Sebastian Bergmann and contributors. Configuration read from /home/virtualtam/public_html/shaarli/phpunit.xml E..FF............................... Time: 802 ms, Memory: 8.25Mb There was 1 error: 1) LinkDBTest::testConstructLoggedIn Missing argument 2 for LinkDB::__construct(), called in /home/virtualtam/public_html/shaarli/tests/Link\\ DBTest.php on line 79 and defined /home/virtualtam/public_html/shaarli/application/LinkDB.php:58 /home/virtualtam/public_html/shaarli/tests/LinkDBTest.php:79 -- There were 2 failures: 1) LinkDBTest::testCheckDBNew Failed asserting that two strings are equal. --- Expected +++ Actual @@ @@ -'e3edea8ea7bb50be4bcb404df53fbb4546a7156e' +'85eab0c610d4f68025f6ed6e6b6b5fabd4b55834' /home/virtualtam/public_html/shaarli/tests/LinkDBTest.php:121 2) LinkDBTest::testCheckDBLoad Failed asserting that two strings are equal. --- Expected +++ Actual @@ @@ -'e3edea8ea7bb50be4bcb404df53fbb4546a7156e' +'85eab0c610d4f68025f6ed6e6b6b5fabd4b55834' /home/virtualtam/public_html/shaarli/tests/LinkDBTest.php:133 FAILURES! Tests: 36, Assertions: 63, Errors: 1, Failures: 2. Test results and coverage By default, PHPUnit will run all suitable tests found under the tests directory. Each test has 3 possible outcomes: . - success F - failure: the test was run but its results are invalid the code does not behave as expected dependencies to external elements: globals, session, cache... E - error: something went wrong and the tested code has crashed typos in the code, or in the test code dependencies to missing external elements If Xdebug has been installed and activated, two coverage reports will be generated: a summary in the console a detailed HTML report with metrics for tested code to open it in a web browser: firefox coverage/index.html & Executing specific tests Add a @group annotation in a test class or method comment: /** * Netscape bookmark import * @group WIP */ class BookmarkImportTest extends PHPUnit_Framework_TestCase { [...] } To run all tests annotated with @group WIP : $ vendor/bin/phpunit --group WIP tests/","title":"Unit tests"},{"location":"Unit-tests/#setup-your-environment-for-tests","text":"The framework used is PHPUnit ; it can be installed with Composer , which is a dependency management tool.","title":"Setup your environment for tests"},{"location":"Unit-tests/#install-composer","text":"You can either use: a system-wide version, e.g. installed through your distro's package manager a local version, downloadable here . # system-wide version $ composer install $ composer update # local version $ php composer.phar self-update $ php composer.phar install $ php composer.phar update","title":"Install composer"},{"location":"Unit-tests/#install-shaarli-dev-dependencies","text":"$ cd /path/to/shaarli $ composer update","title":"Install Shaarli dev dependencies"},{"location":"Unit-tests/#install-and-enable-xdebug-to-generate-phpunit-coverage-reports","text":"See http://xdebug.org/docs/install For Debian-based distros: $ aptitude install php5-xdebug For ArchLinux: $ pacman -S xdebug Then add the following line to /etc/php/php.ini : zend_extension=xdebug.so","title":"Install and enable Xdebug to generate PHPUnit coverage reports"},{"location":"Unit-tests/#run-unit-tests","text":"Successful test suite: $ make test ------- PHPUNIT ------- PHPUnit 4.6.9 by Sebastian Bergmann and contributors. Configuration read from /home/virtualtam/public_html/shaarli/phpunit.xml .................................... Time: 759 ms, Memory: 8.25Mb OK (36 tests, 65 assertions) Test suite with failures and errors: $ make test ------- PHPUNIT ------- PHPUnit 4.6.9 by Sebastian Bergmann and contributors. Configuration read from /home/virtualtam/public_html/shaarli/phpunit.xml E..FF............................... Time: 802 ms, Memory: 8.25Mb There was 1 error: 1) LinkDBTest::testConstructLoggedIn Missing argument 2 for LinkDB::__construct(), called in /home/virtualtam/public_html/shaarli/tests/Link\\ DBTest.php on line 79 and defined /home/virtualtam/public_html/shaarli/application/LinkDB.php:58 /home/virtualtam/public_html/shaarli/tests/LinkDBTest.php:79 -- There were 2 failures: 1) LinkDBTest::testCheckDBNew Failed asserting that two strings are equal. --- Expected +++ Actual @@ @@ -'e3edea8ea7bb50be4bcb404df53fbb4546a7156e' +'85eab0c610d4f68025f6ed6e6b6b5fabd4b55834' /home/virtualtam/public_html/shaarli/tests/LinkDBTest.php:121 2) LinkDBTest::testCheckDBLoad Failed asserting that two strings are equal. --- Expected +++ Actual @@ @@ -'e3edea8ea7bb50be4bcb404df53fbb4546a7156e' +'85eab0c610d4f68025f6ed6e6b6b5fabd4b55834' /home/virtualtam/public_html/shaarli/tests/LinkDBTest.php:133 FAILURES! Tests: 36, Assertions: 63, Errors: 1, Failures: 2.","title":"Run unit tests"},{"location":"Unit-tests/#test-results-and-coverage","text":"By default, PHPUnit will run all suitable tests found under the tests directory. Each test has 3 possible outcomes: . - success F - failure: the test was run but its results are invalid the code does not behave as expected dependencies to external elements: globals, session, cache... E - error: something went wrong and the tested code has crashed typos in the code, or in the test code dependencies to missing external elements If Xdebug has been installed and activated, two coverage reports will be generated: a summary in the console a detailed HTML report with metrics for tested code to open it in a web browser: firefox coverage/index.html &","title":"Test results and coverage"},{"location":"Unit-tests/#executing-specific-tests","text":"Add a @group annotation in a test class or method comment: /** * Netscape bookmark import * @group WIP */ class BookmarkImportTest extends PHPUnit_Framework_TestCase { [...] } To run all tests annotated with @group WIP : $ vendor/bin/phpunit --group WIP tests/","title":"Executing specific tests"},{"location":"Upgrade-and-migration/","text":"Preparation Note your current version If anything goes wrong, it's important for us to know which version you're upgrading from. The current version is present in the shaarli_version.php file. Backup your data Shaarli stores all user data under the data directory: data/config.json.php (or data/config.php for older Shaarli versions) - main configuration file data/datastore.php - bookmarked links data/ipbans.php - banned IP addresses data/updates.txt - contains all automatic update to the configuration and datastore files already run See Shaarli configuration for more information about Shaarli resources. It is recommended to backup this repository before starting updating/upgrading Shaarli: users with SSH access: copy or archive the directory to a temporary location users with FTP access: download a local copy of your Shaarli installation using your favourite client Migrating data from a previous installation As all user data is kept under data , this is the only directory you need to worry about when migrating to a new installation, which corresponds to the following steps: backup the data directory install or update Shaarli: fresh installation - see Download and Installation update - see the following sections check or restore the data directory Recommended : Upgrading from release archives All tagged revisions can be downloaded as tarballs or ZIP archives from the releases page. We recommend that you use the latest release tarball with the -full suffix. It contains the dependencies, please read Download and Installation for git complete instructions. Once downloaded, extract the archive locally and update your remote installation (e.g. via FTP) -be sure you keep the content of the data directory! If you use translations in gettext mode - meaning you manually changed the default mode -, reload your web server. After upgrading, access your fresh Shaarli installation from a web browser; the configuration and data store will then be automatically updated, and new settings added to data/config.json.php (see Shaarli configuration for more details). Upgrading with Git Updating a community Shaarli If you have installed Shaarli from the community Git repository , simply pull new changes from your local clone: $ cd /path/to/shaarli $ git pull From github.com:shaarli/Shaarli * branch master -> FETCH_HEAD Updating ebd67c6..521f0e6 Fast-forward application/Url.php | 1 + shaarli_version.php | 2 +- tests/Url/UrlTest.php | 1 + 3 files changed, 3 insertions(+), 1 deletion(-) Shaarli >= v0.8.x : install/update third-party PHP dependencies using Composer : $ composer install --no-dev Loading composer repositories with package information Updating dependencies - Installing shaarli/netscape-bookmark-parser (v1.0.1) Downloading: 100% Shaarli >= v0.9.2 supports translations: $ make translate If you use translations in gettext mode, reload your web server. Shaarli >= v0.10.0 manages its front-end dependencies with nodejs. You need to install yarn : $ make build_frontend Migrating and upgrading from Sebsauvage's repository If you have installed Shaarli from Sebsauvage's original Git repository , you can use Git remotes to update your working copy. The following guide assumes that: you have a basic knowledge of Git branching and remote repositories the default remote is named origin and points to Sebsauvage's repository the current branch is master if you have personal branches containing customizations, you will need to rebase them after the upgrade; beware though, a lot of changes have been made since the community fork has been created, so things are very likely to break! the working copy is clean: no versioned file has been locally modified no untracked files are present Step 0: show repository information $ cd /path/to/shaarli $ git remote -v origin https://github.com/sebsauvage/Shaarli (fetch) origin https://github.com/sebsauvage/Shaarli (push) $ git branch -vv * master 029f75f [origin/master] Update README.md $ git status On branch master Your branch is up-to-date with 'origin/master'. nothing to commit, working directory clean Step 1: update Git remotes $ git remote rename origin sebsauvage $ git remote -v sebsauvage https://github.com/sebsauvage/Shaarli (fetch) sebsauvage https://github.com/sebsauvage/Shaarli (push) $ git remote add origin https://github.com/shaarli/Shaarli $ git fetch origin remote: Counting objects: 3015, done. remote: Compressing objects: 100% (19/19), done. remote: Total 3015 (delta 446), reused 457 (delta 446), pack-reused 2550 Receiving objects: 100% (3015/3015), 2.59 MiB | 918.00 KiB/s, done. Resolving deltas: 100% (1899/1899), completed with 48 local objects. From https://github.com/shaarli/Shaarli * [new branch] master -> origin/master * [new branch] stable -> origin/stable [...] * [new tag] v0.6.4 -> v0.6.4 * [new tag] v0.7.0 -> v0.7.0 Step 2: use the stable community branch $ git checkout origin/stable -b stable Branch stable set up to track remote branch stable from origin. Switched to a new branch 'stable' $ git branch -vv master 029f75f [sebsauvage/master] Update README.md * stable 890afc3 [origin/stable] Merge pull request #509 from ArthurHoaro/v0.6.5 Shaarli >= v0.8.x : install/update third-party PHP dependencies using Composer : $ composer install --no-dev Loading composer repositories with package information Updating dependencies - Installing shaarli/netscape-bookmark-parser (v1.0.1) Downloading: 100% Shaarli >= v0.9.2 supports translations: $ make translate If you use translations in gettext mode, reload your web server. Shaarli >= v0.10.0 manages its front-end dependencies with nodejs. You need to install yarn : $ make build_frontend Optionally, you can delete information related to the legacy version: $ git branch -D master Deleted branch master (was 029f75f). $ git remote remove sebsauvage $ git remote -v origin https://github.com/shaarli/Shaarli (fetch) origin https://github.com/shaarli/Shaarli (push) $ git gc Counting objects: 3317, done. Delta compression using up to 8 threads. Compressing objects: 100% (1237/1237), done. Writing objects: 100% (3317/3317), done. Total 3317 (delta 2050), reused 3301 (delta 2034)to Step 3: configuration After migrating, access your fresh Shaarli installation from a web browser; the configuration will then be automatically updated, and new settings added to data/config.json.php (see Shaarli configuration for more details). Troubleshooting If the solutions provided here don't work, please open an issue specifying which version you're upgrading from and to. You must specify an integer as a key In v0.8.1 we changed how link keys are handled (from timestamps to incremental integers). Take a look at data/updates.txt content. updates.txt contains updateMethodDatastoreIds Try to delete it and refresh your page while being logged in. updates.txt doesn't exist or doesn't contain updateMethodDatastoreIds Create data/updates.txt if it doesn't exist Paste this string in the update file ;updateMethodRenameDashTags; Login to Shaarli Delete the update file Refresh","title":"Upgrade and migration"},{"location":"Upgrade-and-migration/#preparation","text":"","title":"Preparation"},{"location":"Upgrade-and-migration/#note-your-current-version","text":"If anything goes wrong, it's important for us to know which version you're upgrading from. The current version is present in the shaarli_version.php file.","title":"Note your current version"},{"location":"Upgrade-and-migration/#backup-your-data","text":"Shaarli stores all user data under the data directory: data/config.json.php (or data/config.php for older Shaarli versions) - main configuration file data/datastore.php - bookmarked links data/ipbans.php - banned IP addresses data/updates.txt - contains all automatic update to the configuration and datastore files already run See Shaarli configuration for more information about Shaarli resources. It is recommended to backup this repository before starting updating/upgrading Shaarli: users with SSH access: copy or archive the directory to a temporary location users with FTP access: download a local copy of your Shaarli installation using your favourite client","title":"Backup your data"},{"location":"Upgrade-and-migration/#migrating-data-from-a-previous-installation","text":"As all user data is kept under data , this is the only directory you need to worry about when migrating to a new installation, which corresponds to the following steps: backup the data directory install or update Shaarli: fresh installation - see Download and Installation update - see the following sections check or restore the data directory","title":"Migrating data from a previous installation"},{"location":"Upgrade-and-migration/#recommended-upgrading-from-release-archives","text":"All tagged revisions can be downloaded as tarballs or ZIP archives from the releases page. We recommend that you use the latest release tarball with the -full suffix. It contains the dependencies, please read Download and Installation for git complete instructions. Once downloaded, extract the archive locally and update your remote installation (e.g. via FTP) -be sure you keep the content of the data directory! If you use translations in gettext mode - meaning you manually changed the default mode -, reload your web server. After upgrading, access your fresh Shaarli installation from a web browser; the configuration and data store will then be automatically updated, and new settings added to data/config.json.php (see Shaarli configuration for more details).","title":"Recommended : Upgrading from release archives"},{"location":"Upgrade-and-migration/#upgrading-with-git","text":"","title":"Upgrading with Git"},{"location":"Upgrade-and-migration/#updating-a-community-shaarli","text":"If you have installed Shaarli from the community Git repository , simply pull new changes from your local clone: $ cd /path/to/shaarli $ git pull From github.com:shaarli/Shaarli * branch master -> FETCH_HEAD Updating ebd67c6..521f0e6 Fast-forward application/Url.php | 1 + shaarli_version.php | 2 +- tests/Url/UrlTest.php | 1 + 3 files changed, 3 insertions(+), 1 deletion(-) Shaarli >= v0.8.x : install/update third-party PHP dependencies using Composer : $ composer install --no-dev Loading composer repositories with package information Updating dependencies - Installing shaarli/netscape-bookmark-parser (v1.0.1) Downloading: 100% Shaarli >= v0.9.2 supports translations: $ make translate If you use translations in gettext mode, reload your web server. Shaarli >= v0.10.0 manages its front-end dependencies with nodejs. You need to install yarn : $ make build_frontend","title":"Updating a community Shaarli"},{"location":"Upgrade-and-migration/#migrating-and-upgrading-from-sebsauvages-repository","text":"If you have installed Shaarli from Sebsauvage's original Git repository , you can use Git remotes to update your working copy. The following guide assumes that: you have a basic knowledge of Git branching and remote repositories the default remote is named origin and points to Sebsauvage's repository the current branch is master if you have personal branches containing customizations, you will need to rebase them after the upgrade; beware though, a lot of changes have been made since the community fork has been created, so things are very likely to break! the working copy is clean: no versioned file has been locally modified no untracked files are present","title":"Migrating and upgrading from Sebsauvage's repository"},{"location":"Upgrade-and-migration/#step-0-show-repository-information","text":"$ cd /path/to/shaarli $ git remote -v origin https://github.com/sebsauvage/Shaarli (fetch) origin https://github.com/sebsauvage/Shaarli (push) $ git branch -vv * master 029f75f [origin/master] Update README.md $ git status On branch master Your branch is up-to-date with 'origin/master'. nothing to commit, working directory clean","title":"Step 0: show repository information"},{"location":"Upgrade-and-migration/#step-1-update-git-remotes","text":"$ git remote rename origin sebsauvage $ git remote -v sebsauvage https://github.com/sebsauvage/Shaarli (fetch) sebsauvage https://github.com/sebsauvage/Shaarli (push) $ git remote add origin https://github.com/shaarli/Shaarli $ git fetch origin remote: Counting objects: 3015, done. remote: Compressing objects: 100% (19/19), done. remote: Total 3015 (delta 446), reused 457 (delta 446), pack-reused 2550 Receiving objects: 100% (3015/3015), 2.59 MiB | 918.00 KiB/s, done. Resolving deltas: 100% (1899/1899), completed with 48 local objects. From https://github.com/shaarli/Shaarli * [new branch] master -> origin/master * [new branch] stable -> origin/stable [...] * [new tag] v0.6.4 -> v0.6.4 * [new tag] v0.7.0 -> v0.7.0","title":"Step 1: update Git remotes"},{"location":"Upgrade-and-migration/#step-2-use-the-stable-community-branch","text":"$ git checkout origin/stable -b stable Branch stable set up to track remote branch stable from origin. Switched to a new branch 'stable' $ git branch -vv master 029f75f [sebsauvage/master] Update README.md * stable 890afc3 [origin/stable] Merge pull request #509 from ArthurHoaro/v0.6.5 Shaarli >= v0.8.x : install/update third-party PHP dependencies using Composer : $ composer install --no-dev Loading composer repositories with package information Updating dependencies - Installing shaarli/netscape-bookmark-parser (v1.0.1) Downloading: 100% Shaarli >= v0.9.2 supports translations: $ make translate If you use translations in gettext mode, reload your web server. Shaarli >= v0.10.0 manages its front-end dependencies with nodejs. You need to install yarn : $ make build_frontend Optionally, you can delete information related to the legacy version: $ git branch -D master Deleted branch master (was 029f75f). $ git remote remove sebsauvage $ git remote -v origin https://github.com/shaarli/Shaarli (fetch) origin https://github.com/shaarli/Shaarli (push) $ git gc Counting objects: 3317, done. Delta compression using up to 8 threads. Compressing objects: 100% (1237/1237), done. Writing objects: 100% (3317/3317), done. Total 3317 (delta 2050), reused 3301 (delta 2034)to","title":"Step 2: use the stable community branch"},{"location":"Upgrade-and-migration/#step-3-configuration","text":"After migrating, access your fresh Shaarli installation from a web browser; the configuration will then be automatically updated, and new settings added to data/config.json.php (see Shaarli configuration for more details).","title":"Step 3: configuration"},{"location":"Upgrade-and-migration/#troubleshooting","text":"If the solutions provided here don't work, please open an issue specifying which version you're upgrading from and to.","title":"Troubleshooting"},{"location":"Upgrade-and-migration/#you-must-specify-an-integer-as-a-key","text":"In v0.8.1 we changed how link keys are handled (from timestamps to incremental integers). Take a look at data/updates.txt content.","title":"You must specify an integer as a key"},{"location":"Upgrade-and-migration/#updatestxt-contains-updatemethoddatastoreids","text":"Try to delete it and refresh your page while being logged in.","title":"updates.txt contains updateMethodDatastoreIds"},{"location":"Upgrade-and-migration/#updatestxt-doesnt-exist-or-doesnt-contain-updatemethoddatastoreids","text":"Create data/updates.txt if it doesn't exist Paste this string in the update file ;updateMethodRenameDashTags; Login to Shaarli Delete the update file Refresh","title":"updates.txt doesn't exist or doesn't contain updateMethodDatastoreIds"},{"location":"Versioning-and-Branches/","text":"WORK IN PROGRESS It's important to understand how Shaarli branches work, especially if you're maintaining a 3rd party tools for Shaarli (theme, plugin, etc.), to be sure stay compatible. master branch The master branch is the development branch. Any new change MUST go through this branch using Pull Requests. Remarks: This branch shouldn't be used for production as it isn't necessary stable. 3rd party aren't required to be compatible with the latest changes. Official plugins, themes and libraries (contained within Shaarli organization repos) must be compatible with the master branch. The version in this branch is always dev . v0.x branch This v0.x branch, points to the latest v0.x.y release. Explanation: When a new version is released, it might contains a major bug which isn't detected right away. For example, a new PHP version is released, containing backward compatibility issue which doesn't work with Shaarli. In this case, the issue is fixed in the master branch, and the fix is backported the to the v0.x branch. Then a new release is made from the v0.x branch. This workflow allow us to fix any major bug detected, without having to release bleeding edge feature too soon. latest branch This branch point the latest release. It recommended to use it to get the latest tested changes. stable branch The stable branch doesn't contain any major bug, and is one major digit version behind the latest release. For example, the current latest release is v0.8.3 , the stable branch is an alias to the latest v0.7.x release. When the v0.9.0 version will be released, the stable will move to the latest v0.8.x release. Remarks: Shaarli release pace isn't fast, and the stable branch might be a few months behind the latest release. Releases Releases are always made from the latest v0.x branch. Note that for every release, we manually generate a tarball which contains all Shaarli dependencies, making Shaarli's installation only one step. Advices on 3rd party git repos workflow Versioning Any time a new Shaarli release is published, you should publish a new release of your repo if the changes affected you since the latest release (take a look at the changelog ( Draft means not released yet) and the commit log (like tpl folder for themes)). You can either: use the Shaarli version number, with your repo version. For example, if Shaarli v0.8.3 is released, publish a v0.8.3-1 release, where v0.8.3 states Shaarli compatibility and -1 is your own version digit for the current Shaarli version. use your own versioning scheme, and state Shaarli compatibility in the release description. Using this, any user will be able to pick the release matching his own Shaarli version. Major bugfix backport releases To be able to support backported fixes, it recommended to use our workflow: # In master, fix the major bug git commit -m \"Katastrophe\" git push origin master # Get your commit hash git log --format=\"%H\" -n 1 # Create a new branch from your latest release, let's say v0.8.2-1 (the tag name) git checkout -b katastrophe v0.8.2-1 # Backport the fix commit to your brand new branch git cherry-pick <fix commit hash> git push origin katastrophe # Then you just have to make a new release from the `katastrophe` branch tagged `v0.8.3-1`","title":"Versioning and Branches"},{"location":"Versioning-and-Branches/#master-branch","text":"The master branch is the development branch. Any new change MUST go through this branch using Pull Requests. Remarks: This branch shouldn't be used for production as it isn't necessary stable. 3rd party aren't required to be compatible with the latest changes. Official plugins, themes and libraries (contained within Shaarli organization repos) must be compatible with the master branch. The version in this branch is always dev .","title":"master branch"},{"location":"Versioning-and-Branches/#v0x-branch","text":"This v0.x branch, points to the latest v0.x.y release. Explanation: When a new version is released, it might contains a major bug which isn't detected right away. For example, a new PHP version is released, containing backward compatibility issue which doesn't work with Shaarli. In this case, the issue is fixed in the master branch, and the fix is backported the to the v0.x branch. Then a new release is made from the v0.x branch. This workflow allow us to fix any major bug detected, without having to release bleeding edge feature too soon.","title":"v0.x branch"},{"location":"Versioning-and-Branches/#latest-branch","text":"This branch point the latest release. It recommended to use it to get the latest tested changes.","title":"latest branch"},{"location":"Versioning-and-Branches/#stable-branch","text":"The stable branch doesn't contain any major bug, and is one major digit version behind the latest release. For example, the current latest release is v0.8.3 , the stable branch is an alias to the latest v0.7.x release. When the v0.9.0 version will be released, the stable will move to the latest v0.8.x release. Remarks: Shaarli release pace isn't fast, and the stable branch might be a few months behind the latest release.","title":"stable branch"},{"location":"Versioning-and-Branches/#releases","text":"Releases are always made from the latest v0.x branch. Note that for every release, we manually generate a tarball which contains all Shaarli dependencies, making Shaarli's installation only one step.","title":"Releases"},{"location":"Versioning-and-Branches/#advices-on-3rd-party-git-repos-workflow","text":"","title":"Advices on 3rd party git repos workflow"},{"location":"Versioning-and-Branches/#versioning","text":"Any time a new Shaarli release is published, you should publish a new release of your repo if the changes affected you since the latest release (take a look at the changelog ( Draft means not released yet) and the commit log (like tpl folder for themes)). You can either: use the Shaarli version number, with your repo version. For example, if Shaarli v0.8.3 is released, publish a v0.8.3-1 release, where v0.8.3 states Shaarli compatibility and -1 is your own version digit for the current Shaarli version. use your own versioning scheme, and state Shaarli compatibility in the release description. Using this, any user will be able to pick the release matching his own Shaarli version.","title":"Versioning"},{"location":"Versioning-and-Branches/#major-bugfix-backport-releases","text":"To be able to support backported fixes, it recommended to use our workflow: # In master, fix the major bug git commit -m \"Katastrophe\" git push origin master # Get your commit hash git log --format=\"%H\" -n 1 # Create a new branch from your latest release, let's say v0.8.2-1 (the tag name) git checkout -b katastrophe v0.8.2-1 # Backport the fix commit to your brand new branch git cherry-pick <fix commit hash> git push origin katastrophe # Then you just have to make a new release from the `katastrophe` branch tagged `v0.8.3-1`","title":"Major bugfix backport releases"},{"location":"docker/docker-101/","text":"Basics Install Docker , by following the instructions relevant to your OS / distribution, and start the service. Search an image on DockerHub $ docker search debian NAME DESCRIPTION STARS OFFICIAL AUTOMATED ubuntu Ubuntu is a Debian-based Linux operating s... 2065 [OK] debian Debian is a Linux distribution that's comp... 603 [OK] google/debian 47 [OK] Show available tags for a repository $ curl https://index.docker.io/v1/repositories/debian/tags | python -m json.tool % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 1283 0 1283 0 0 433 0 --:--:-- 0:00:02 --:--:-- 433 Sample output: [ { \"layer\": \"85a02782\", \"name\": \"stretch\" }, { \"layer\": \"59abecbc\", \"name\": \"testing\" }, { \"layer\": \"bf0fd686\", \"name\": \"unstable\" }, { \"layer\": \"60c52dbe\", \"name\": \"wheezy\" }, { \"layer\": \"c5b806fe\", \"name\": \"wheezy-backports\" } ] Pull an image from DockerHub $ docker pull repository[:tag] $ docker pull debian:wheezy wheezy: Pulling from debian 4c8cbfd2973e: Pull complete 60c52dbe9d91: Pull complete Digest: sha256:c584131da2ac1948aa3e66468a4424b6aea2f33acba7cec0b631bdb56254c4fe Status: Downloaded newer image for debian:wheezy Docker re-uses layers already downloaded. In other words if you have images based on Alpine or some Ubuntu version for example, those can share disk space. Start a container A container is an instance created from an image, that can be run and that keeps running until its main process exits. Or until the user stops the container. The simplest way to start a container from image is docker run . It also pulls the image for you if it is not locally available. For more advanced use, refer to docker create . Stopped containers are not destroyed, unless you specify --rm . To view all created, running and stopped containers, enter: $ docker ps -a Some containers may be designed or configured to be restarted, others are not. Also remember both network ports and volumes of a container are created on start, and not editable later. Access a running container A running container is accessible using docker exec , or docker copy . You can use exec to start a root shell in the Shaarli container: $ docker exec -ti <container-name-or-id> bash Note the names and ID's of containers are listed in docker ps . You can even type only one or two letters of the ID, given they are unique. Access can also be through one or more network ports, or disk volumes. Both are specified on and fixed on docker create or run . You can view the console output of the main container process too: $ docker logs -f <container-name-or-id> Docker disk use Trying out different images can fill some gigabytes of disk quickly. Besides images, the docker volumes usually take up most disk space. If you care only about trying out docker and not about what is running or saved, the following commands should help you out quickly if you run low on disk space: $ docker rmi -f $(docker images -aq) # remove or mark all images for disposal $ docker volume rm $(docker volume ls -q) # remove all volumes Systemd config Systemd is the process manager of choice on Debian-based distributions. Once you have a docker service installed, you can use the following steps to set up Shaarli to run on system start. systemctl enable /etc/systemd/system/docker.shaarli.service systemctl start docker.shaarli systemctl status docker.* journalctl -f # inspect system log if needed You will need sudo or a root terminal to perform some or all of the steps above. Here are the contents for the service file: [Unit] Description=Shaarli Bookmark Manager Container After=docker.service Requires=docker.service [Service] Restart=always # Put any environment you want in an included file, like $host- or $domainname in this example EnvironmentFile=/etc/sysconfig/box-environment # It's just an example.. ExecStart=/usr/bin/docker run \\ -p 28010:80 \\ --name ${hostname}-shaarli \\ --hostname shaarli.${domainname} \\ -v /srv/docker-volumes-local/shaarli-data:/var/www/shaarli/data:rw \\ -v /etc/localtime:/etc/localtime:ro \\ shaarli/shaarli:latest ExecStop=/usr/bin/docker rm -f ${hostname}-shaarli [Install] WantedBy=multi-user.target","title":"Docker 101"},{"location":"docker/docker-101/#basics","text":"Install Docker , by following the instructions relevant to your OS / distribution, and start the service.","title":"Basics"},{"location":"docker/docker-101/#search-an-image-on-dockerhub","text":"$ docker search debian NAME DESCRIPTION STARS OFFICIAL AUTOMATED ubuntu Ubuntu is a Debian-based Linux operating s... 2065 [OK] debian Debian is a Linux distribution that's comp... 603 [OK] google/debian 47 [OK]","title":"Search an image on DockerHub"},{"location":"docker/docker-101/#show-available-tags-for-a-repository","text":"$ curl https://index.docker.io/v1/repositories/debian/tags | python -m json.tool % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 1283 0 1283 0 0 433 0 --:--:-- 0:00:02 --:--:-- 433 Sample output: [ { \"layer\": \"85a02782\", \"name\": \"stretch\" }, { \"layer\": \"59abecbc\", \"name\": \"testing\" }, { \"layer\": \"bf0fd686\", \"name\": \"unstable\" }, { \"layer\": \"60c52dbe\", \"name\": \"wheezy\" }, { \"layer\": \"c5b806fe\", \"name\": \"wheezy-backports\" } ]","title":"Show available tags for a repository"},{"location":"docker/docker-101/#pull-an-image-from-dockerhub","text":"$ docker pull repository[:tag] $ docker pull debian:wheezy wheezy: Pulling from debian 4c8cbfd2973e: Pull complete 60c52dbe9d91: Pull complete Digest: sha256:c584131da2ac1948aa3e66468a4424b6aea2f33acba7cec0b631bdb56254c4fe Status: Downloaded newer image for debian:wheezy Docker re-uses layers already downloaded. In other words if you have images based on Alpine or some Ubuntu version for example, those can share disk space.","title":"Pull an image from DockerHub"},{"location":"docker/docker-101/#start-a-container","text":"A container is an instance created from an image, that can be run and that keeps running until its main process exits. Or until the user stops the container. The simplest way to start a container from image is docker run . It also pulls the image for you if it is not locally available. For more advanced use, refer to docker create . Stopped containers are not destroyed, unless you specify --rm . To view all created, running and stopped containers, enter: $ docker ps -a Some containers may be designed or configured to be restarted, others are not. Also remember both network ports and volumes of a container are created on start, and not editable later.","title":"Start a container"},{"location":"docker/docker-101/#access-a-running-container","text":"A running container is accessible using docker exec , or docker copy . You can use exec to start a root shell in the Shaarli container: $ docker exec -ti <container-name-or-id> bash Note the names and ID's of containers are listed in docker ps . You can even type only one or two letters of the ID, given they are unique. Access can also be through one or more network ports, or disk volumes. Both are specified on and fixed on docker create or run . You can view the console output of the main container process too: $ docker logs -f <container-name-or-id>","title":"Access a running container"},{"location":"docker/docker-101/#docker-disk-use","text":"Trying out different images can fill some gigabytes of disk quickly. Besides images, the docker volumes usually take up most disk space. If you care only about trying out docker and not about what is running or saved, the following commands should help you out quickly if you run low on disk space: $ docker rmi -f $(docker images -aq) # remove or mark all images for disposal $ docker volume rm $(docker volume ls -q) # remove all volumes","title":"Docker disk use"},{"location":"docker/docker-101/#systemd-config","text":"Systemd is the process manager of choice on Debian-based distributions. Once you have a docker service installed, you can use the following steps to set up Shaarli to run on system start. systemctl enable /etc/systemd/system/docker.shaarli.service systemctl start docker.shaarli systemctl status docker.* journalctl -f # inspect system log if needed You will need sudo or a root terminal to perform some or all of the steps above. Here are the contents for the service file: [Unit] Description=Shaarli Bookmark Manager Container After=docker.service Requires=docker.service [Service] Restart=always # Put any environment you want in an included file, like $host- or $domainname in this example EnvironmentFile=/etc/sysconfig/box-environment # It's just an example.. ExecStart=/usr/bin/docker run \\ -p 28010:80 \\ --name ${hostname}-shaarli \\ --hostname shaarli.${domainname} \\ -v /srv/docker-volumes-local/shaarli-data:/var/www/shaarli/data:rw \\ -v /etc/localtime:/etc/localtime:ro \\ shaarli/shaarli:latest ExecStop=/usr/bin/docker rm -f ${hostname}-shaarli [Install] WantedBy=multi-user.target","title":"Systemd config"},{"location":"docker/resources/","text":"Docker Interactive Docker training portal on Katakoda Where are Docker images stored? Dockerfile reference Dockerfile best practices Volumes DockerHub Repositories Teams and organizations GitHub automated build Service management Using supervisord Nginx in the foreground supervisord","title":"Docker resources"},{"location":"docker/resources/#docker","text":"Interactive Docker training portal on Katakoda Where are Docker images stored? Dockerfile reference Dockerfile best practices Volumes","title":"Docker"},{"location":"docker/resources/#dockerhub","text":"Repositories Teams and organizations GitHub automated build","title":"DockerHub"},{"location":"docker/resources/#service-management","text":"Using supervisord Nginx in the foreground supervisord","title":"Service management"},{"location":"docker/reverse-proxy-configuration/","text":"Foreword This guide assumes that: Shaarli runs in a Docker container The host's 10080 port is mapped to the container's 80 port Shaarli's Fully Qualified Domain Name (FQDN) is shaarli.domain.tld HTTP traffic is redirected to HTTPS Apache Apache 2.4 documentation mod_proxy Reverse Proxy Request Headers The following HTTP headers are set when the ProxyPass directive is set: X-Forwarded-For X-Forwarded-Host X-Forwarded-Server The original SERVER_NAME can be sent to the proxied host by setting the ProxyPreserveHost directive to On . <VirtualHost *:80> ServerName shaarli.domain.tld Redirect permanent / https://shaarli.domain.tld </VirtualHost> <VirtualHost *:443> ServerName shaarli.domain.tld SSLEngine on SSLCertificateFile /path/to/cert SSLCertificateKeyFile /path/to/certkey LogLevel warn ErrorLog /var/log/apache2/shaarli-error.log CustomLog /var/log/apache2/shaarli-access.log combined RequestHeader set X-Forwarded-Proto \"https\" ProxyPreserveHost On ProxyPass / http://127.0.0.1:10080/ ProxyPassReverse / http://127.0.0.1:10080/ </VirtualHost> HAProxy HAProxy documentation global [...] defaults [...] frontend http-in bind :80 redirect scheme https code 301 if !{ ssl_fc } bind :443 ssl crt /path/to/cert.pem default_backend shaarli backend shaarli mode http option http-server-close option forwardfor reqadd X-Forwarded-Proto: https server shaarli1 127.0.0.1:10080 Nginx Nginx documentation http { [...] index index.html index.php; root /home/john/web; access_log /var/log/nginx/access.log; error_log /var/log/nginx/error.log; server { listen 80; server_name shaarli.domain.tld; return 301 https://shaarli.domain.tld$request_uri; } server { listen 443 ssl http2; server_name shaarli.domain.tld; ssl_certificate /path/to/cert ssl_certificate_key /path/to/certkey location / { proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-Forwarded-Host $host; proxy_pass http://localhost:10080/; proxy_set_header Host $host; proxy_connect_timeout 30s; proxy_read_timeout 120s; access_log /var/log/nginx/shaarli.access.log; error_log /var/log/nginx/shaarli.error.log; } } }","title":"Reverse proxy configuration"},{"location":"docker/reverse-proxy-configuration/#foreword","text":"This guide assumes that: Shaarli runs in a Docker container The host's 10080 port is mapped to the container's 80 port Shaarli's Fully Qualified Domain Name (FQDN) is shaarli.domain.tld HTTP traffic is redirected to HTTPS","title":"Foreword"},{"location":"docker/reverse-proxy-configuration/#apache","text":"Apache 2.4 documentation mod_proxy Reverse Proxy Request Headers The following HTTP headers are set when the ProxyPass directive is set: X-Forwarded-For X-Forwarded-Host X-Forwarded-Server The original SERVER_NAME can be sent to the proxied host by setting the ProxyPreserveHost directive to On . <VirtualHost *:80> ServerName shaarli.domain.tld Redirect permanent / https://shaarli.domain.tld </VirtualHost> <VirtualHost *:443> ServerName shaarli.domain.tld SSLEngine on SSLCertificateFile /path/to/cert SSLCertificateKeyFile /path/to/certkey LogLevel warn ErrorLog /var/log/apache2/shaarli-error.log CustomLog /var/log/apache2/shaarli-access.log combined RequestHeader set X-Forwarded-Proto \"https\" ProxyPreserveHost On ProxyPass / http://127.0.0.1:10080/ ProxyPassReverse / http://127.0.0.1:10080/ </VirtualHost>","title":"Apache"},{"location":"docker/reverse-proxy-configuration/#haproxy","text":"HAProxy documentation global [...] defaults [...] frontend http-in bind :80 redirect scheme https code 301 if !{ ssl_fc } bind :443 ssl crt /path/to/cert.pem default_backend shaarli backend shaarli mode http option http-server-close option forwardfor reqadd X-Forwarded-Proto: https server shaarli1 127.0.0.1:10080","title":"HAProxy"},{"location":"docker/reverse-proxy-configuration/#nginx","text":"Nginx documentation http { [...] index index.html index.php; root /home/john/web; access_log /var/log/nginx/access.log; error_log /var/log/nginx/error.log; server { listen 80; server_name shaarli.domain.tld; return 301 https://shaarli.domain.tld$request_uri; } server { listen 443 ssl http2; server_name shaarli.domain.tld; ssl_certificate /path/to/cert ssl_certificate_key /path/to/certkey location / { proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-Forwarded-Host $host; proxy_pass http://localhost:10080/; proxy_set_header Host $host; proxy_connect_timeout 30s; proxy_read_timeout 120s; access_log /var/log/nginx/shaarli.access.log; error_log /var/log/nginx/shaarli.error.log; } } }","title":"Nginx"},{"location":"docker/shaarli-images/","text":"A brief guide on getting starting using docker is given in Docker 101 . To learn more about user data and how to keep it across versions, please see Upgrade and Migration . Get and run a Shaarli image DockerHub repository The images can be found in the shaarli/shaarli repository. Available image tags latest : latest branch master : master branch stable : stable branch The latest and master images rely on: Alpine Linux PHP7-FPM Nginx The stable image relies on: Debian 8 Jessie PHP5-FPM Nginx Additional Dockerfiles are provided for the arm32v7 platform, relying on Linuxserver.io Alpine armhf images . These images must be built using docker build on an arm32v7 machine or using an emulator such as qemu . Download from Docker Hub $ docker pull shaarli/shaarli latest: Pulling from shaarli/shaarli 32716d9fcddb: Pull complete 84899d045435: Pull complete 4b6ad7444763: Pull complete e0345ef7a3e0: Pull complete 5c1dd344094f: Pull complete 6422305a200b: Pull complete 7d63f861dbef: Pull complete 3eb97210645c: Pull complete 869319d746ff: Already exists 869319d746ff: Pulling fs layer 902b87aaaec9: Already exists Digest: sha256:f836b4627b958b3f83f59c332f22f02fcd495ace3056f2be2c4912bd8704cc98 Status: Downloaded newer image for shaarli/shaarli:latest Create and start a new container from the image # map the host's :8000 port to the container's :80 port $ docker create -p 8000:80 shaarli/shaarli d40b7af693d678958adedfb88f87d6ea0237186c23de5c4102a55a8fcb499101 # launch the container in the background $ docker start d40b7af693d678958adedfb88f87d6ea0237186c23de5c4102a55a8fcb499101 d40b7af693d678958adedfb88f87d6ea0237186c23de5c4102a55a8fcb499101 # list active containers $ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES d40b7af693d6 shaarli/shaarli /usr/bin/supervisor 15 seconds ago Up 4 seconds 0.0.0.0:8000->80/tcp backstabbing_galileo Stop and destroy a container $ docker stop backstabbing_galileo # those docker guys are really rude to physicists! backstabbing_galileo # check the container is stopped $ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES # list ALL containers $ docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES d40b7af693d6 shaarli/shaarli /usr/bin/supervisor 5 minutes ago Exited (0) 48 seconds ago backstabbing_galileo # destroy the container $ docker rm backstabbing_galileo # let's put an end to these barbarian practices backstabbing_galileo $ docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES Automatic builds Docker users can start a personal instance from an autobuild image . For example to start a temporary Shaarli at localhost:8000 , and keep session data (config, storage): MY_SHAARLI_VOLUME=$(cd /path/to/shaarli/data/ && pwd -P) docker run -ti --rm \\ -p 8000:80 \\ -v $MY_SHAARLI_VOLUME:/var/www/shaarli/data \\ shaarli/shaarli Volumes and data persistence Data can be persisted by using volumes . Volumes allow to keep your data when renewing and/or updating container images: # Create data volumes $ docker volume create shaarli-data $ docker volume create shaarli-cache # Create and start a Shaarli container using these volumes to persist data $ docker create \\ --name shaarli \\ -v shaarli-cache:/var/www/shaarli/cache \\ -v shaarli-data:/var/www/shaarli/data \\ -p 8000:80 \\ shaarli/shaarli:master $ docker start shaarli","title":"Shaarli images"},{"location":"docker/shaarli-images/#get-and-run-a-shaarli-image","text":"","title":"Get and run a Shaarli image"},{"location":"docker/shaarli-images/#dockerhub-repository","text":"The images can be found in the shaarli/shaarli repository.","title":"DockerHub repository"},{"location":"docker/shaarli-images/#available-image-tags","text":"latest : latest branch master : master branch stable : stable branch The latest and master images rely on: Alpine Linux PHP7-FPM Nginx The stable image relies on: Debian 8 Jessie PHP5-FPM Nginx Additional Dockerfiles are provided for the arm32v7 platform, relying on Linuxserver.io Alpine armhf images . These images must be built using docker build on an arm32v7 machine or using an emulator such as qemu .","title":"Available image tags"},{"location":"docker/shaarli-images/#download-from-docker-hub","text":"$ docker pull shaarli/shaarli latest: Pulling from shaarli/shaarli 32716d9fcddb: Pull complete 84899d045435: Pull complete 4b6ad7444763: Pull complete e0345ef7a3e0: Pull complete 5c1dd344094f: Pull complete 6422305a200b: Pull complete 7d63f861dbef: Pull complete 3eb97210645c: Pull complete 869319d746ff: Already exists 869319d746ff: Pulling fs layer 902b87aaaec9: Already exists Digest: sha256:f836b4627b958b3f83f59c332f22f02fcd495ace3056f2be2c4912bd8704cc98 Status: Downloaded newer image for shaarli/shaarli:latest","title":"Download from Docker Hub"},{"location":"docker/shaarli-images/#create-and-start-a-new-container-from-the-image","text":"# map the host's :8000 port to the container's :80 port $ docker create -p 8000:80 shaarli/shaarli d40b7af693d678958adedfb88f87d6ea0237186c23de5c4102a55a8fcb499101 # launch the container in the background $ docker start d40b7af693d678958adedfb88f87d6ea0237186c23de5c4102a55a8fcb499101 d40b7af693d678958adedfb88f87d6ea0237186c23de5c4102a55a8fcb499101 # list active containers $ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES d40b7af693d6 shaarli/shaarli /usr/bin/supervisor 15 seconds ago Up 4 seconds 0.0.0.0:8000->80/tcp backstabbing_galileo","title":"Create and start a new container from the image"},{"location":"docker/shaarli-images/#stop-and-destroy-a-container","text":"$ docker stop backstabbing_galileo # those docker guys are really rude to physicists! backstabbing_galileo # check the container is stopped $ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES # list ALL containers $ docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES d40b7af693d6 shaarli/shaarli /usr/bin/supervisor 5 minutes ago Exited (0) 48 seconds ago backstabbing_galileo # destroy the container $ docker rm backstabbing_galileo # let's put an end to these barbarian practices backstabbing_galileo $ docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES","title":"Stop and destroy a container"},{"location":"docker/shaarli-images/#automatic-builds","text":"Docker users can start a personal instance from an autobuild image . For example to start a temporary Shaarli at localhost:8000 , and keep session data (config, storage): MY_SHAARLI_VOLUME=$(cd /path/to/shaarli/data/ && pwd -P) docker run -ti --rm \\ -p 8000:80 \\ -v $MY_SHAARLI_VOLUME:/var/www/shaarli/data \\ shaarli/shaarli","title":"Automatic builds"},{"location":"docker/shaarli-images/#volumes-and-data-persistence","text":"Data can be persisted by using volumes . Volumes allow to keep your data when renewing and/or updating container images: # Create data volumes $ docker volume create shaarli-data $ docker volume create shaarli-cache # Create and start a Shaarli container using these volumes to persist data $ docker create \\ --name shaarli \\ -v shaarli-cache:/var/www/shaarli/cache \\ -v shaarli-data:/var/www/shaarli/data \\ -p 8000:80 \\ shaarli/shaarli:master $ docker start shaarli","title":"Volumes and data persistence"},{"location":"guides/backup-restore-import-export/","text":"Backup and restore the datastore file Backup the file data/datastore.php (by FTP or SSH). Restore by putting the file back in place. Example command: rsync -avzP my.server.com:/var/www/shaarli/data/datastore.php datastore-$(date +%Y-%m-%d_%H%M).php Export links as... To export links as an HTML file, under Tools > Export , choose: Export all to export both public and private links Export public to export public links only Export private to export private links only Restore by using the Import feature. This can be done using the shaarchiver tool. Example command: ./export-bookmarks.py --url=https://my.server.com/shaarli --username=myusername --password=mysupersecretpassword --download-dir=./ --type=all Import links from... Diigo If you export your bookmark from Diigo, make sure you use the Delicious export, not the Netscape export. (Their Netscape export is broken, and they don't seem to be interested in fixing it.) Mister Wong See this issue for import tweaks. SemanticScuttle To correctly import the tags from a SemanticScuttle HTML export, edit the HTML file before importing and replace all occurences of tags= (lowercase) to TAGS= (uppercase). Scuttle Shaarli cannot import data directly from Scuttle . However, you can use the third-party scuttle-to-shaarli tool to export the Scuttle database to the Netscape HTML format compatible with the Shaarli importer. Refind You can use the third-party tool Derefind to convert refind.com bookmark exports to a format that can be imported into Shaarli. Import Shaarli links to Firefox Export your Shaarli links as described above. For compatibility reasons, check Prepend note permalinks with this Shaarli instance's URL (useful to import bookmarks in a web browser) In Firefox, open the bookmark manager (not the sidebar! Bookmarks menu > Show all bookmarks or Ctrl+Shift+B ) Select Import and Backup > Import bookmarks in HTML format Your bookmarks will be imported in Firefox, ready to use, with tags and descriptions retained. \"Self\" (notes) shaares will still point to the Shaarli instance you exported them from, but the note text can be viewed directly in the bookmark properties inside your browser. Depending on the number of bookmarks, the import can take some time. You may be interested in these Firefox addons to manage links imported from Shaarli Bookmark Deduplicator - provides an easy way to deduplicate your bookmarks TagSieve - browse your bookmarks by their tags","title":"Backup, restore, import and export"},{"location":"guides/backup-restore-import-export/#backup-and-restore-the-datastore-file","text":"Backup the file data/datastore.php (by FTP or SSH). Restore by putting the file back in place. Example command: rsync -avzP my.server.com:/var/www/shaarli/data/datastore.php datastore-$(date +%Y-%m-%d_%H%M).php","title":"Backup and restore the datastore file"},{"location":"guides/backup-restore-import-export/#export-links-as","text":"To export links as an HTML file, under Tools > Export , choose: Export all to export both public and private links Export public to export public links only Export private to export private links only Restore by using the Import feature. This can be done using the shaarchiver tool. Example command: ./export-bookmarks.py --url=https://my.server.com/shaarli --username=myusername --password=mysupersecretpassword --download-dir=./ --type=all","title":"Export links as..."},{"location":"guides/backup-restore-import-export/#import-links-from","text":"","title":"Import links from..."},{"location":"guides/backup-restore-import-export/#diigo","text":"If you export your bookmark from Diigo, make sure you use the Delicious export, not the Netscape export. (Their Netscape export is broken, and they don't seem to be interested in fixing it.)","title":"Diigo"},{"location":"guides/backup-restore-import-export/#mister-wong","text":"See this issue for import tweaks.","title":"Mister Wong"},{"location":"guides/backup-restore-import-export/#semanticscuttle","text":"To correctly import the tags from a SemanticScuttle HTML export, edit the HTML file before importing and replace all occurences of tags= (lowercase) to TAGS= (uppercase).","title":"SemanticScuttle"},{"location":"guides/backup-restore-import-export/#scuttle","text":"Shaarli cannot import data directly from Scuttle . However, you can use the third-party scuttle-to-shaarli tool to export the Scuttle database to the Netscape HTML format compatible with the Shaarli importer.","title":"Scuttle"},{"location":"guides/backup-restore-import-export/#refind","text":"You can use the third-party tool Derefind to convert refind.com bookmark exports to a format that can be imported into Shaarli.","title":"Refind"},{"location":"guides/backup-restore-import-export/#import-shaarli-links-to-firefox","text":"Export your Shaarli links as described above. For compatibility reasons, check Prepend note permalinks with this Shaarli instance's URL (useful to import bookmarks in a web browser) In Firefox, open the bookmark manager (not the sidebar! Bookmarks menu > Show all bookmarks or Ctrl+Shift+B ) Select Import and Backup > Import bookmarks in HTML format Your bookmarks will be imported in Firefox, ready to use, with tags and descriptions retained. \"Self\" (notes) shaares will still point to the Shaarli instance you exported them from, but the note text can be viewed directly in the bookmark properties inside your browser. Depending on the number of bookmarks, the import can take some time. You may be interested in these Firefox addons to manage links imported from Shaarli Bookmark Deduplicator - provides an easy way to deduplicate your bookmarks TagSieve - browse your bookmarks by their tags","title":"Import Shaarli links to Firefox"},{"location":"guides/install-shaarli-with-debian9-and-docker/","text":"Last updated on 2018-07-01. Goals Getting a Virtual Private Server (VPS) Running Shaarli: as a Docker container, using the Tr\u00e6fik reverse proxy, securized with TLS certificates from Let's Encrypt. The following components and tools will be used: Debian , a GNU/Linux distribution widely used in server environments; Docker , an open platform for developing, shipping, and running applications; Docker Compose , a tool for defining and running multi-container Docker applications. More information can be found in the Resources section at the bottom of the guide. Getting a Virtual Private Server For this guide, I went for the smallest VPS available from DigitalOcean, a Droplet with 1 CPU, 1 GiB RAM and 25 GiB SSD storage, which costs $5/month ($0.007/hour): Droplets Overview Pricing How to Create a Droplet from the DigitalOcean Control Panel How to Add SSH Keys to Droplets Initial Server Setup with Debian 8 (also applies to Debian 9) An Introduction to Securing your Linux VPS Creating a Droplet Select Debian 9 as the Droplet distribution: Choose a region that is geographically close to you: Choose a Droplet size that corresponds to your usage and budget: Finalize the Droplet creation: Droplet information is displayed on the Control Panel: Once your VPS has been created, you will receive an e-mail with connection instructions. Obtaining a domain name After creating your VPS, it will be reachable using its IP address; some hosting providers also create a DNS record, e.g. ns4853142.ip-01-47-127.eu . A domain name (DNS record) is required to obtain a certificate and setup HTTPS (HTTP with TLS encryption). Domain names can be obtained from registrars through hosting providers such as Gandi . Once you have your own domain, you need to create a new DNS record that points to your VPS' IP address: Host setup Now's the time to connect to your freshly created VPS! $ ssh root@188.166.85.8 Linux stretch-shaarli-02 4.9.0-6-amd64 #1 SMP Debian 4.9.88-1+deb9u1 (2018-05-07) x86_64 The programs included with the Debian GNU/Linux system are free software; the exact distribution terms for each program are described in the individual files in /usr/share/doc/*/copyright. Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent permitted by applicable law. Last login: Sun Jul 1 11:20:18 2018 from <REDACTED> root@stretch-shaarli-02:~$ Updating the system root@stretch-shaarli-02:~$ apt update && apt upgrade -y Setting up Docker The following instructions are from the Get Docker CE for Debian guide. Install package dependencies: root@stretch-shaarli-02:~$ apt install -y apt-transport-https ca-certificates curl gnupg2 software-properties-common Add Docker's package repository GPG key: root@stretch-shaarli-02:~$ curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add - Add Docker's package repository: root@stretch-shaarli-02:~$ add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/debian stretch stable\" Update package lists and install Docker: root@stretch-shaarli-02:~$ apt update && apt install -y docker-ce Verify Docker is properly configured by running the hello-world image: root@stretch-shaarli-02:~$ docker run hello-world Setting up Docker Compose The following instructions are from the Install Docker Compose guide. Download the current version from the release page: root@stretch-shaarli-02:~$ curl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose root@stretch-shaarli-02:~$ chmod +x /usr/local/bin/docker-compose Running Shaarli Shaarli comes with a configuration file for Docker Compose, that will setup: a local Docker network a Docker volume to store Shaarli data a Docker volume to store Tr\u00e6fik TLS configuration and certificates a Shaarli instance a Tr\u00e6fik instance Tr\u00e6fik is a modern HTTP reverse proxy, with native support for Docker and Let's Encrypt . Compose configuration Create a new directory to store the configuration: root@stretch-shaarli-02:~$ mkdir shaarli && cd shaarli root@stretch-shaarli-02:~/shaarli$ Download the current version of Shaarli's docker-compose.yml : root@stretch-shaarli-02:~/shaarli$ curl -L https://raw.githubusercontent.com/shaarli/Shaarli/master/docker-compose.yml -o docker-compose.yml Create the .env file and fill in your VPS and domain information (replace <MY_SHAARLI_DOMAIN> and <MY_CONTACT_EMAIL> with your actual information): root@stretch-shaarli-02:~/shaarli$ vim .env SHAARLI_VIRTUAL_HOST=<MY_SHAARLI_DOMAIN> SHAARLI_LETSENCRYPT_EMAIL=<MY_CONTACT_EMAIL> Pull the Docker images root@stretch-shaarli-02:~/shaarli$ docker-compose pull Pulling shaarli ... done Pulling traefik ... done Run! root@stretch-shaarli-02:~/shaarli$ docker-compose up -d Creating network \"shaarli_http-proxy\" with the default driver Creating volume \"shaarli_traefik-acme\" with default driver Creating volume \"shaarli_shaarli-data\" with default driver Creating shaarli_shaarli_1 ... done Creating shaarli_traefik_1 ... done Conclusion Congratulations! Your Shaarli instance should be up and running, and available at https://<MY_SHAARLI_DOMAIN> . Resources Related Shaarli documentation Docker 101 Shaarli images Hosting providers DigitalOcean Gandi OVH RackSpace etc. Domain Names and Registrars Introduction to the Domain Name System (DNS) ICANN Domain name registrar OVH Domain Registration Gandi Domain Registration HTTPS and Security Transport Layer Security Let's Encrypt Docker Docker Overview Docker Documentation Get Docker CE for Debian docker logs Volumes Install Docker Compose docker-compose logs Tr\u00e6fik Getting Started Docker backend Let's Encrypt and Docker traefik Docker image","title":"Install Shaarli on Debian 9 with Docker"},{"location":"guides/install-shaarli-with-debian9-and-docker/#goals","text":"Getting a Virtual Private Server (VPS) Running Shaarli: as a Docker container, using the Tr\u00e6fik reverse proxy, securized with TLS certificates from Let's Encrypt. The following components and tools will be used: Debian , a GNU/Linux distribution widely used in server environments; Docker , an open platform for developing, shipping, and running applications; Docker Compose , a tool for defining and running multi-container Docker applications. More information can be found in the Resources section at the bottom of the guide.","title":"Goals"},{"location":"guides/install-shaarli-with-debian9-and-docker/#getting-a-virtual-private-server","text":"For this guide, I went for the smallest VPS available from DigitalOcean, a Droplet with 1 CPU, 1 GiB RAM and 25 GiB SSD storage, which costs $5/month ($0.007/hour): Droplets Overview Pricing How to Create a Droplet from the DigitalOcean Control Panel How to Add SSH Keys to Droplets Initial Server Setup with Debian 8 (also applies to Debian 9) An Introduction to Securing your Linux VPS","title":"Getting a Virtual Private Server"},{"location":"guides/install-shaarli-with-debian9-and-docker/#creating-a-droplet","text":"Select Debian 9 as the Droplet distribution: Choose a region that is geographically close to you: Choose a Droplet size that corresponds to your usage and budget: Finalize the Droplet creation: Droplet information is displayed on the Control Panel: Once your VPS has been created, you will receive an e-mail with connection instructions.","title":"Creating a Droplet"},{"location":"guides/install-shaarli-with-debian9-and-docker/#obtaining-a-domain-name","text":"After creating your VPS, it will be reachable using its IP address; some hosting providers also create a DNS record, e.g. ns4853142.ip-01-47-127.eu . A domain name (DNS record) is required to obtain a certificate and setup HTTPS (HTTP with TLS encryption). Domain names can be obtained from registrars through hosting providers such as Gandi . Once you have your own domain, you need to create a new DNS record that points to your VPS' IP address:","title":"Obtaining a domain name"},{"location":"guides/install-shaarli-with-debian9-and-docker/#host-setup","text":"Now's the time to connect to your freshly created VPS! $ ssh root@188.166.85.8 Linux stretch-shaarli-02 4.9.0-6-amd64 #1 SMP Debian 4.9.88-1+deb9u1 (2018-05-07) x86_64 The programs included with the Debian GNU/Linux system are free software; the exact distribution terms for each program are described in the individual files in /usr/share/doc/*/copyright. Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent permitted by applicable law. Last login: Sun Jul 1 11:20:18 2018 from <REDACTED> root@stretch-shaarli-02:~$","title":"Host setup"},{"location":"guides/install-shaarli-with-debian9-and-docker/#updating-the-system","text":"root@stretch-shaarli-02:~$ apt update && apt upgrade -y","title":"Updating the system"},{"location":"guides/install-shaarli-with-debian9-and-docker/#setting-up-docker","text":"The following instructions are from the Get Docker CE for Debian guide. Install package dependencies: root@stretch-shaarli-02:~$ apt install -y apt-transport-https ca-certificates curl gnupg2 software-properties-common Add Docker's package repository GPG key: root@stretch-shaarli-02:~$ curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add - Add Docker's package repository: root@stretch-shaarli-02:~$ add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/debian stretch stable\" Update package lists and install Docker: root@stretch-shaarli-02:~$ apt update && apt install -y docker-ce Verify Docker is properly configured by running the hello-world image: root@stretch-shaarli-02:~$ docker run hello-world","title":"Setting up Docker"},{"location":"guides/install-shaarli-with-debian9-and-docker/#setting-up-docker-compose","text":"The following instructions are from the Install Docker Compose guide. Download the current version from the release page: root@stretch-shaarli-02:~$ curl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose root@stretch-shaarli-02:~$ chmod +x /usr/local/bin/docker-compose","title":"Setting up Docker Compose"},{"location":"guides/install-shaarli-with-debian9-and-docker/#running-shaarli","text":"Shaarli comes with a configuration file for Docker Compose, that will setup: a local Docker network a Docker volume to store Shaarli data a Docker volume to store Tr\u00e6fik TLS configuration and certificates a Shaarli instance a Tr\u00e6fik instance Tr\u00e6fik is a modern HTTP reverse proxy, with native support for Docker and Let's Encrypt .","title":"Running Shaarli"},{"location":"guides/install-shaarli-with-debian9-and-docker/#compose-configuration","text":"Create a new directory to store the configuration: root@stretch-shaarli-02:~$ mkdir shaarli && cd shaarli root@stretch-shaarli-02:~/shaarli$ Download the current version of Shaarli's docker-compose.yml : root@stretch-shaarli-02:~/shaarli$ curl -L https://raw.githubusercontent.com/shaarli/Shaarli/master/docker-compose.yml -o docker-compose.yml Create the .env file and fill in your VPS and domain information (replace <MY_SHAARLI_DOMAIN> and <MY_CONTACT_EMAIL> with your actual information): root@stretch-shaarli-02:~/shaarli$ vim .env SHAARLI_VIRTUAL_HOST=<MY_SHAARLI_DOMAIN> SHAARLI_LETSENCRYPT_EMAIL=<MY_CONTACT_EMAIL>","title":"Compose configuration"},{"location":"guides/install-shaarli-with-debian9-and-docker/#pull-the-docker-images","text":"root@stretch-shaarli-02:~/shaarli$ docker-compose pull Pulling shaarli ... done Pulling traefik ... done","title":"Pull the Docker images"},{"location":"guides/install-shaarli-with-debian9-and-docker/#run","text":"root@stretch-shaarli-02:~/shaarli$ docker-compose up -d Creating network \"shaarli_http-proxy\" with the default driver Creating volume \"shaarli_traefik-acme\" with default driver Creating volume \"shaarli_shaarli-data\" with default driver Creating shaarli_shaarli_1 ... done Creating shaarli_traefik_1 ... done","title":"Run!"},{"location":"guides/install-shaarli-with-debian9-and-docker/#conclusion","text":"Congratulations! Your Shaarli instance should be up and running, and available at https://<MY_SHAARLI_DOMAIN> .","title":"Conclusion"},{"location":"guides/install-shaarli-with-debian9-and-docker/#resources","text":"","title":"Resources"},{"location":"guides/install-shaarli-with-debian9-and-docker/#related-shaarli-documentation","text":"Docker 101 Shaarli images","title":"Related Shaarli documentation"},{"location":"guides/install-shaarli-with-debian9-and-docker/#hosting-providers","text":"DigitalOcean Gandi OVH RackSpace etc.","title":"Hosting providers"},{"location":"guides/install-shaarli-with-debian9-and-docker/#domain-names-and-registrars","text":"Introduction to the Domain Name System (DNS) ICANN Domain name registrar OVH Domain Registration Gandi Domain Registration","title":"Domain Names and Registrars"},{"location":"guides/install-shaarli-with-debian9-and-docker/#https-and-security","text":"Transport Layer Security Let's Encrypt","title":"HTTPS and Security"},{"location":"guides/install-shaarli-with-debian9-and-docker/#docker","text":"Docker Overview Docker Documentation Get Docker CE for Debian docker logs Volumes Install Docker Compose docker-compose logs","title":"Docker"},{"location":"guides/install-shaarli-with-debian9-and-docker/#trfik","text":"Getting Started Docker backend Let's Encrypt and Docker traefik Docker image","title":"Tr\u00e6fik"},{"location":"guides/various-hacks/","text":"Decode datastore content To display the array representing the data saved in data/datastore.php , use the following snippet: $data = \"tZNdb9MwFIb... <Commented content inside datastore.php>\"; $out = unserialize(gzinflate(base64_decode($data))); echo \"<pre>\"; // Pretty printing is love, pretty printing is life print_r($out); echo \"</pre>\"; exit; This will output the internal representation of the datastore, \"unobfuscated\" (if this can really be considered obfuscation). Alternatively, you can transform to JSON format (and pretty-print if you have jq installed): php -r 'print(json_encode(unserialize(gzinflate(base64_decode(preg_replace(\"!.*/\\* (.+) \\*/.*!\", \"$1\", file_get_contents(\"data/datastore.php\")))))));' | jq . Changing the timestamp for a shaare Look for <input type=\"hidden\" name=\"lf_linkdate\" value=\"{$link.linkdate}\"> in tpl/editlink.tpl (line 14) Replace type=\"hidden\" with type=\"text\" from this line A new date/time field becomes available in the edit/new link dialog. You can set the timestamp manually by entering it in the format YYYMMDD_HHMMS . See also Add a new custom field to shaares (example patch) Download CSS styles for shaarlis listed in an opml file Copy an existing Shaarli installation over SSH, and serve it locally Create multiple Shaarli instances, generate an HTML index of them","title":"Various hacks"},{"location":"guides/various-hacks/#decode-datastore-content","text":"To display the array representing the data saved in data/datastore.php , use the following snippet: $data = \"tZNdb9MwFIb... <Commented content inside datastore.php>\"; $out = unserialize(gzinflate(base64_decode($data))); echo \"<pre>\"; // Pretty printing is love, pretty printing is life print_r($out); echo \"</pre>\"; exit; This will output the internal representation of the datastore, \"unobfuscated\" (if this can really be considered obfuscation). Alternatively, you can transform to JSON format (and pretty-print if you have jq installed): php -r 'print(json_encode(unserialize(gzinflate(base64_decode(preg_replace(\"!.*/\\* (.+) \\*/.*!\", \"$1\", file_get_contents(\"data/datastore.php\")))))));' | jq .","title":"Decode datastore content"},{"location":"guides/various-hacks/#changing-the-timestamp-for-a-shaare","text":"Look for <input type=\"hidden\" name=\"lf_linkdate\" value=\"{$link.linkdate}\"> in tpl/editlink.tpl (line 14) Replace type=\"hidden\" with type=\"text\" from this line A new date/time field becomes available in the edit/new link dialog. You can set the timestamp manually by entering it in the format YYYMMDD_HHMMS .","title":"Changing the timestamp for a shaare"},{"location":"guides/various-hacks/#see-also","text":"Add a new custom field to shaares (example patch) Download CSS styles for shaarlis listed in an opml file Copy an existing Shaarli installation over SSH, and serve it locally Create multiple Shaarli instances, generate an HTML index of them","title":"See also"}]}